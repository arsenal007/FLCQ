{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"file": "DS18B20.asm",
			"settings":
			{
				"buffer_size": 7736,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "Makefile",
			"settings":
			{
				"buffer_size": 951,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "leds.asm",
			"settings":
			{
				"buffer_size": 1154,
				"line_ending": "Unix"
			}
		},
		{
			"file": "main.c",
			"settings":
			{
				"buffer_size": 7802,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "main_.asm",
			"settings":
			{
				"buffer_size": 1018,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": ";--------------------------------------------------------\n; File Created by SDCC : free open source ANSI-C Compiler\n; Version 4.0.0 #11528 (MINGW64)\n;--------------------------------------------------------\n; PIC port for the 14-bit core\n;--------------------------------------------------------\n;\t.file\t\"main.c\"\n\tlist\tp=16f628a\n\tradix dec\n\tinclude \"p16f628a.inc\"\n;--------------------------------------------------------\n; external declarations\n;--------------------------------------------------------\n\textern\t_main_asm\n\textern\t_eeprom_write\n\textern\t_eeprom_read\n\textern\t_PrescalerOff\n\textern\t_SetPrescaler\n\textern\t_ds18b20_get_temperature\n\textern\t_leds_over\n\textern\t_leds_set_end\n\textern\t_leds\n\textern\t_SPBRG\n\textern\t_RCREG\n\textern\t_TXREG\n\textern\t_TMR1H\n\textern\t_TMR1L\n\textern\t_TMR0\n\textern\t_b\n\textern\t_uart\n\textern\t_uart_id\n\textern\t_temperature\n\textern\t_TXSTAbits\n\textern\t_PIE1bits\n\textern\t_TRISBbits\n\textern\t_TRISAbits\n\textern\t_OPTION_REGbits\n\textern\t_RCSTAbits\n\textern\t_T1CONbits\n\textern\t_PIR1bits\n\textern\t_INTCONbits\n\textern\t_PORTAbits\n\textern\t__gptrget1\n\textern\t__sdcc_gsinit_startup\n;--------------------------------------------------------\n; global declarations\n;--------------------------------------------------------\n\tglobal\t_main\n\tglobal\t_uart_rx_packet\n\tglobal\t_send_temperature\n\tglobal\t_send_eeprom_value_to_host\n\tglobal\t_SendStringSerially\n\tglobal\t_isr\n\tglobal\t_timer1_int\n\tglobal\t_uart_freq\n\tglobal\t_freq_mesure1\n\tglobal\t_freq_mesure\n\tglobal\t_freq_mesure_init\n\tglobal\t_ReceiveByteSerially\n\tglobal\t_SendByteSerially\n\tglobal\t_uart_init\n\tglobal\t_reply\n\tglobal\t_sensor_rst\n\tglobal\t_cmnd_w\n\tglobal\t_option_reg\n\tglobal\t_serie_counter\n\tglobal\t_timer0_prescaler\n\tglobal\t_timer0_overflows\n\tglobal\t_answer\n\n\tglobal PSAVE\n\tglobal SSAVE\n\tglobal WSAVE\n\tglobal STK12\n\tglobal STK11\n\tglobal STK10\n\tglobal STK09\n\tglobal STK08\n\tglobal STK07\n\tglobal STK06\n\tglobal STK05\n\tglobal STK04\n\tglobal STK03\n\tglobal STK02\n\tglobal STK01\n\tglobal STK00\n\nsharebank udata_ovr 0x0070\nPSAVE\tres 1\nSSAVE\tres 1\nWSAVE\tres 1\nSTK12\tres 1\nSTK11\tres 1\nSTK10\tres 1\nSTK09\tres 1\nSTK08\tres 1\nSTK07\tres 1\nSTK06\tres 1\nSTK05\tres 1\nSTK04\tres 1\nSTK03\tres 1\nSTK02\tres 1\nSTK01\tres 1\nSTK00\tres 1\n\n;--------------------------------------------------------\n; global definitions\n;--------------------------------------------------------\nUD_main_0\tudata\n_timer0_overflows\tres\t2\n\nUD_main_1\tudata\n_serie_counter\tres\t1\n\n;--------------------------------------------------------\n; absolute symbol definitions\n;--------------------------------------------------------\n;--------------------------------------------------------\n; compiler-defined variables\n;--------------------------------------------------------\nUDL_main_0\tudata\nr0x1029\tres\t1\nr0x102A\tres\t1\nr0x102C\tres\t1\nr0x102B\tres\t1\nr0x1028\tres\t1\nr0x1024\tres\t1\nr0x1025\tres\t1\nr0x1026\tres\t1\nr0x1027\tres\t1\nr0x1011\tres\t1\nr0x1012\tres\t1\nr0x101F\tres\t1\nr0x1022\tres\t1\nr0x1023\tres\t1\nr0x102F\tres\t1\nr0x1030\tres\t1\nr0x1031\tres\t1\nr0x101D\tres\t1\nr0x101C\tres\t1\nr0x101B\tres\t1\nr0x101E\tres\t1\nr0x1013\tres\t1\nr0x1014\tres\t1\nr0x1015\tres\t1\nr0x1017\tres\t1\nr0x1018\tres\t1\nr0x1019\tres\t1\nr0x101A\tres\t1\n___sdcc_saved_fsr\tres\t1\n;--------------------------------------------------------\n; initialized data\n;--------------------------------------------------------\n\nIDD_main_0\tidata\n_timer0_prescaler\n\tdb\t0x05\t; 5\n\n\nIDC_main_1\tcode\n_option_reg\n\tretlw 0x20\t; 32\n\tretlw 0x21\t; 33\n\tretlw 0x22\t; 34\n\tretlw 0x23\t; 35\n\tretlw 0x24\t; 36\n;--------------------------------------------------------\n; initialized absolute data\n;--------------------------------------------------------\n;--------------------------------------------------------\n; overlayable items in internal ram \n;--------------------------------------------------------\n;\tudata_ovr\n;--------------------------------------------------------\n; reset vector \n;--------------------------------------------------------\nSTARTUP\tcode 0x0000\n\tnop\n\tpagesel __sdcc_gsinit_startup\n\tgoto\t__sdcc_gsinit_startup\n;--------------------------------------------------------\n; interrupt and initialization code\n;--------------------------------------------------------\nc_interrupt\tcode\t0x0004\n__sdcc_interrupt:\n;***\n;  pBlock Stats: dbName = I\n;***\n;functions called:\n;   _ReceiveByteSerially\n;   _ReceiveByteSerially\n;   _ReceiveByteSerially\n;   _ReceiveByteSerially\n;4 compiler assigned registers:\n;   r0x102F\n;   r0x1030\n;   r0x1031\n;   r0x1032\n;; Starting pCode block\n_isr:\n; 0 exit points\n;\t.line\t261; \"main.c\"\tvoid isr( void ) __interrupt 0\n\tMOVWF\tWSAVE\n\tSWAPF\tSTATUS,W\n\tCLRF\tSTATUS\n\tMOVWF\tSSAVE\n\tMOVF\tPCLATH,W\n\tCLRF\tPCLATH\n\tMOVWF\tPSAVE\n\tMOVF\tFSR,W\n\tBANKSEL\t___sdcc_saved_fsr\n\tMOVWF\t___sdcc_saved_fsr\n;\t.line\t264; \"main.c\"\tif ( RCIF )\n\tBANKSEL\t_PIR1bits\n\tBTFSS\t_PIR1bits,5\n\tGOTO\t_00237_DS_\n;\t.line\t266; \"main.c\"\tif ( RX_FULL )\n\tBANKSEL\t_b\n\tBTFSS\t_b,0\n\tGOTO\t_00229_DS_\n;\t.line\t268; \"main.c\"\tReceiveByteSerially();  // dummy read\n\tPAGESEL\t_ReceiveByteSerially\n\tCALL\t_ReceiveByteSerially\n\tPAGESEL\t$\n\tGOTO\t_00239_DS_\n_00229_DS_:\n;\t.line\t272; \"main.c\"\tuart[ uart_id ] = ReceiveByteSerially();\n\tBANKSEL\t_uart_id\n\tMOVF\t_uart_id,W\n\tADDLW\t(_uart + 0)\n\tBANKSEL\tr0x102F\n\tMOVWF\tr0x102F\n\tMOVLW\thigh (_uart + 0)\n\tBTFSC\tSTATUS,0\n\tADDLW\t0x01\n\tMOVWF\tr0x1030\n\tPAGESEL\t_ReceiveByteSerially\n\tCALL\t_ReceiveByteSerially\n\tPAGESEL\t$\n\tBANKSEL\tr0x1031\n\tMOVWF\tr0x1031\n\tMOVF\tr0x102F,W\n\tBANKSEL\tFSR\n\tMOVWF\tFSR\n\tBCF\tSTATUS,7\n\tBANKSEL\tr0x1030\n\tBTFSC\tr0x1030,0\n\tBSF\tSTATUS,7\n\tMOVF\tr0x1031,W\n\tBANKSEL\tINDF\n\tMOVWF\tINDF\n;\t.line\t273; \"main.c\"\tuart_id++;\n\tBANKSEL\t_uart_id\n\tINCF\t_uart_id,F\n;\t.line\t274; \"main.c\"\tuart_id &= 0b00000111;\n\tMOVLW\t0x07\n\tANDWF\t_uart_id,F\n;;unsigned compare: left < lit(0x4=4), size=1\n;\t.line\t275; \"main.c\"\tif ( ( 4 <= uart_id ) && ( uart[ uart_id - 1 ] == 0xFF ) && ( uart[ uart_id - 2 ] == 0xFF ) ) RX_FULL = 1;\n\tMOVLW\t0x04\n\tSUBWF\t_uart_id,W\n\tBTFSS\tSTATUS,0\n\tGOTO\t_00239_DS_\n;;genSkipc:3307: created from rifx:00000000047A5780\n\tMOVF\t_uart_id,W\n\tBANKSEL\tr0x102F\n\tMOVWF\tr0x102F\n\tDECF\tr0x102F,W\n\tMOVWF\tr0x1030\n\tCLRF\tr0x1031\n\tMOVF\tr0x1030,W\n\tADDLW\t(_uart + 0)\n\tMOVWF\tr0x1030\n\tMOVLW\t0x00\n\tBTFSC\tSTATUS,0\n\tINCFSZ\tr0x1031,W\n\tADDLW\thigh (_uart + 0)\n\tMOVWF\tr0x1031\n\tMOVF\tr0x1030,W\n\tBANKSEL\tFSR\n\tMOVWF\tFSR\n\tBCF\tSTATUS,7\n\tBANKSEL\tr0x1031\n\tBTFSC\tr0x1031,0\n\tBSF\tSTATUS,7\n\tBANKSEL\tINDF\n\tMOVF\tINDF,W\n;;1\tMOVWF\tr0x1032\n\tXORLW\t0xff\n\tBTFSS\tSTATUS,2\n\tGOTO\t_00239_DS_\n\tMOVLW\t0xfe\n\tBANKSEL\tr0x102F\n\tADDWF\tr0x102F,F\n\tCLRF\tr0x1030\n\tMOVF\tr0x102F,W\n\tADDLW\t(_uart + 0)\n\tMOVWF\tr0x102F\n\tMOVLW\t0x00\n\tBTFSC\tSTATUS,0\n\tINCFSZ\tr0x1030,W\n\tADDLW\thigh (_uart + 0)\n\tMOVWF\tr0x1030\n\tMOVF\tr0x102F,W\n\tBANKSEL\tFSR\n\tMOVWF\tFSR\n\tBCF\tSTATUS,7\n\tBANKSEL\tr0x1030\n\tBTFSC\tr0x1030,0\n\tBSF\tSTATUS,7\n\tBANKSEL\tINDF\n\tMOVF\tINDF,W\n\tBANKSEL\tr0x1031\n\tMOVWF\tr0x1031\n\tXORLW\t0xff\n\tBTFSS\tSTATUS,2\n\tGOTO\t_00239_DS_\n\tBANKSEL\t_b\n\tBSF\t_b,0\n\tGOTO\t_00239_DS_\n_00237_DS_:\n;\t.line\t278; \"main.c\"\telse if ( TMR0IF )\n\tBANKSEL\t_INTCONbits\n\tBTFSS\t_INTCONbits,2\n\tGOTO\t_00234_DS_\n;\t.line\t280; \"main.c\"\tTMR0IF = 0;\n\tBCF\t_INTCONbits,2\n;\t.line\t281; \"main.c\"\ttimer0_overflows++;\n\tBANKSEL\t_timer0_overflows\n\tINCF\t_timer0_overflows,F\n\tBTFSC\tSTATUS,2\n\tINCF\t(_timer0_overflows + 1),F\n\tGOTO\t_00239_DS_\n_00234_DS_:\n;\t.line\t283; \"main.c\"\telse if ( TMR1IF )\n\tBANKSEL\t_PIR1bits\n\tBTFSS\t_PIR1bits,0\n\tGOTO\t_00239_DS_\n;\t.line\t285; \"main.c\"\tTRISA3 = 0;\n\tBANKSEL\t_TRISAbits\n\tBCF\t_TRISAbits,3\n;\t.line\t286; \"main.c\"\tTMR1ON = 0;  // disable timer\n\tBANKSEL\t_T1CONbits\n\tBCF\t_T1CONbits,0\n;\t.line\t287; \"main.c\"\tTMR1IF = 0;\n\tBCF\t_PIR1bits,0\n;\t.line\t288; \"main.c\"\tT0IE = 0;\n\tBCF\t_INTCONbits,5\n;\t.line\t289; \"main.c\"\tTIMER1_INTERRUPT = 1;\n\tBANKSEL\t_b\n\tBSF\t_b,1\n_00239_DS_:\n;\t.line\t291; \"main.c\"\t}\n\tBANKSEL\t___sdcc_saved_fsr\n\tMOVF\t___sdcc_saved_fsr,W\n\tBANKSEL\tFSR\n\tMOVWF\tFSR\n\tMOVF\tPSAVE,W\n\tMOVWF\tPCLATH\n\tCLRF\tSTATUS\n\tSWAPF\tSSAVE,W\n\tMOVWF\tSTATUS\n\tSWAPF\tWSAVE,F\n\tSWAPF\tWSAVE,W\nEND_OF_INTERRUPT:\n\tRETFIE\t\n\n;--------------------------------------------------------\n; code\n;--------------------------------------------------------\ncode_main\tcode\n;***\n;  pBlock Stats: dbName = M\n;***\n;has an exit\n;functions called:\n;   _main_asm\n;   _main_asm\n;; Starting pCode block\nS_main__main\tcode\n_main:\n; 2 exit points\n;\t.line\t379; \"main.c\"\tmain_asm();\n\tPAGESEL\t_main_asm\n\tCALL\t_main_asm\n\tPAGESEL\t$\n;\t.line\t380; \"main.c\"\t}\n\tRETURN\t\n; exit point of _main\n\n;***\n;  pBlock Stats: dbName = C\n;***\n;has an exit\n;functions called:\n;   _eeprom_write\n;   _send_eeprom_value_to_host\n;   _send_eeprom_value_to_host\n;   _leds\n;   _leds_set_end\n;   _freq_mesure1\n;   _leds\n;   _leds_set_end\n;   _ds18b20_get_temperature\n;   _send_temperature\n;   _leds_over\n;   _eeprom_write\n;   _send_eeprom_value_to_host\n;   _send_eeprom_value_to_host\n;   _leds\n;   _leds_set_end\n;   _freq_mesure1\n;   _leds\n;   _leds_set_end\n;   _ds18b20_get_temperature\n;   _send_temperature\n;   _leds_over\n;3 compiler assigned registers:\n;   r0x1018\n;   r0x1019\n;   r0x101A\n;; Starting pCode block\nS_main__uart_rx_packet\tcode\n_uart_rx_packet:\n; 2 exit points\n;\t.line\t330; \"main.c\"\tswitch ( uart[ 0 ] )\n\tBANKSEL\t_uart\n\tMOVF\t(_uart + 0),W\n\tBANKSEL\tr0x1018\n\tMOVWF\tr0x1018\n\tXORLW\t0x03\n\tBTFSC\tSTATUS,2\n\tGOTO\t_00269_DS_\n\tMOVF\tr0x1018,W\n\tXORLW\t0x05\n\tBTFSC\tSTATUS,2\n\tGOTO\t_00272_DS_\n\tMOVF\tr0x1018,W\n\tXORLW\t0x07\n\tBTFSC\tSTATUS,2\n\tGOTO\t_00273_DS_\n\tMOVF\tr0x1018,W\n\tXORLW\t0x09\n\tBTFSC\tSTATUS,2\n\tGOTO\t_00274_DS_\n\tGOTO\t_00286_DS_\n_00269_DS_:\n;\t.line\t335; \"main.c\"\tuart[ 1 ] &= 0x7F;  //128 max\n\tBANKSEL\t_uart\n\tMOVF\t(_uart + 1),W\n\tBANKSEL\tr0x1018\n\tMOVWF\tr0x1018\n\tBCF\tr0x1018,7\n;;/home/sdcc-builder/build/sdcc-build/orig/sdcc/src/pic14/gen.c:6828: size=0, offset=0, AOP_TYPE(res)=8\n\tMOVF\tr0x1018,W\n\tBANKSEL\t_uart\n\tMOVWF\t(_uart + 1)\n;\t.line\t336; \"main.c\"\tif ( uart_id == 5 )\n\tBANKSEL\t_uart_id\n\tMOVF\t_uart_id,W\n\tXORLW\t0x05\n\tBTFSS\tSTATUS,2\n\tGOTO\t_00286_DS_\n;\t.line\t338; \"main.c\"\teeprom_write();\n\tPAGESEL\t_eeprom_write\n\tCALL\t_eeprom_write\n\tPAGESEL\t$\n;\t.line\t339; \"main.c\"\tsend_eeprom_value_to_host();\n\tPAGESEL\t_send_eeprom_value_to_host\n\tCALL\t_send_eeprom_value_to_host\n\tPAGESEL\t$\n;\t.line\t341; \"main.c\"\tbreak;\n\tGOTO\t_00286_DS_\n_00272_DS_:\n;\t.line\t346; \"main.c\"\tuart[ 1 ] &= 0x7F;  //128 max\n\tBANKSEL\t_uart\n\tMOVF\t(_uart + 1),W\n\tBANKSEL\tr0x1018\n\tMOVWF\tr0x1018\n\tBCF\tr0x1018,7\n;;/home/sdcc-builder/build/sdcc-build/orig/sdcc/src/pic14/gen.c:6828: size=0, offset=0, AOP_TYPE(res)=8\n\tMOVF\tr0x1018,W\n\tBANKSEL\t_uart\n\tMOVWF\t(_uart + 1)\n;\t.line\t347; \"main.c\"\tsend_eeprom_value_to_host();\n\tPAGESEL\t_send_eeprom_value_to_host\n\tCALL\t_send_eeprom_value_to_host\n\tPAGESEL\t$\n;\t.line\t348; \"main.c\"\tbreak;\n\tGOTO\t_00286_DS_\n_00273_DS_:\n;\t.line\t352; \"main.c\"\tleds( uart[ 1 ] );\n\tBANKSEL\t_uart\n\tMOVF\t(_uart + 1),W\n\tBANKSEL\tr0x1018\n\tMOVWF\tr0x1018\n\tPAGESEL\t_leds\n\tCALL\t_leds\n\tPAGESEL\t$\n;\t.line\t353; \"main.c\"\tleds_set_end( uart[ 2 ] );\n\tBANKSEL\t_uart\n\tMOVF\t(_uart + 2),W\n\tBANKSEL\tr0x1018\n\tMOVWF\tr0x1018\n\tPAGESEL\t_leds_set_end\n\tCALL\t_leds_set_end\n\tPAGESEL\t$\n;\t.line\t354; \"main.c\"\tuart[ 3 ]--;\n\tBANKSEL\t_uart\n\tDECF\t(_uart + 3),W\n\tBANKSEL\tr0x1018\n\tMOVWF\tr0x1018\n\tBANKSEL\t_uart\n\tMOVWF\t(_uart + 3)\n;\t.line\t355; \"main.c\"\tserie_counter = uart[ 3 ];\n\tBANKSEL\tr0x1018\n\tMOVF\tr0x1018,W\n\tBANKSEL\t_serie_counter\n\tMOVWF\t_serie_counter\n;\t.line\t356; \"main.c\"\tfreq_mesure1();\n\tPAGESEL\t_freq_mesure1\n\tCALL\t_freq_mesure1\n\tPAGESEL\t$\n;\t.line\t357; \"main.c\"\tbreak;\n\tGOTO\t_00286_DS_\n_00274_DS_:\n;\t.line\t361; \"main.c\"\tleds( uart[ 1 ] );\n\tBANKSEL\t_uart\n\tMOVF\t(_uart + 1),W\n\tBANKSEL\tr0x1018\n\tMOVWF\tr0x1018\n\tPAGESEL\t_leds\n\tCALL\t_leds\n\tPAGESEL\t$\n;\t.line\t362; \"main.c\"\tleds_set_end( uart[ 2 ] );\n\tBANKSEL\t_uart\n\tMOVF\t(_uart + 2),W\n\tBANKSEL\tr0x1018\n\tMOVWF\tr0x1018\n\tPAGESEL\t_leds_set_end\n\tCALL\t_leds_set_end\n\tPAGESEL\t$\n;\t.line\t363; \"main.c\"\tds18b20_get_temperature();\n\tPAGESEL\t_ds18b20_get_temperature\n\tCALL\t_ds18b20_get_temperature\n\tPAGESEL\t$\n;\t.line\t364; \"main.c\"\tsend_temperature();\n\tPAGESEL\t_send_temperature\n\tCALL\t_send_temperature\n\tPAGESEL\t$\n;\t.line\t365; \"main.c\"\tleds_over();      \n\tPAGESEL\t_leds_over\n\tCALL\t_leds_over\n\tPAGESEL\t$\n_00286_DS_:\n;\t.line\t370; \"main.c\"\tfor ( i = 0; i < UART_PACKET_SIZE; i++ )\n\tBANKSEL\tr0x1018\n\tCLRF\tr0x1018\n_00277_DS_:\n;\t.line\t371; \"main.c\"\tuart[ i ] = 0;\n\tBANKSEL\tr0x1018\n\tMOVF\tr0x1018,W\n\tADDLW\t(_uart + 0)\n\tMOVWF\tr0x1019\n\tMOVLW\thigh (_uart + 0)\n\tBTFSC\tSTATUS,0\n\tADDLW\t0x01\n\tMOVWF\tr0x101A\n\tMOVF\tr0x1019,W\n\tBANKSEL\tFSR\n\tMOVWF\tFSR\n\tBCF\tSTATUS,7\n\tBANKSEL\tr0x101A\n\tBTFSC\tr0x101A,0\n\tBSF\tSTATUS,7\n\tMOVLW\t0x00\n\tBANKSEL\tINDF\n\tMOVWF\tINDF\n;\t.line\t370; \"main.c\"\tfor ( i = 0; i < UART_PACKET_SIZE; i++ )\n\tBANKSEL\tr0x1018\n\tINCF\tr0x1018,F\n;;unsigned compare: left < lit(0x8=8), size=1\n\tMOVLW\t0x08\n\tSUBWF\tr0x1018,W\n\tBTFSS\tSTATUS,0\n\tGOTO\t_00277_DS_\n;;genSkipc:3307: created from rifx:00000000047A5780\n;\t.line\t372; \"main.c\"\tuart_id = 0;\n\tBANKSEL\t_uart_id\n\tCLRF\t_uart_id\n;\t.line\t373; \"main.c\"\tRX_FULL = 0;\n\tBANKSEL\t_b\n\tBCF\t_b,0\n;\t.line\t374; \"main.c\"\t}\n\tRETURN\t\n; exit point of _uart_rx_packet\n\n;***\n;  pBlock Stats: dbName = C\n;***\n;has an exit\n;functions called:\n;   _answer\n;   _answer\n;1 compiler assigned register :\n;   r0x1017\n;; Starting pCode block\nS_main__send_temperature\tcode\n_send_temperature:\n; 2 exit points\n;;/home/sdcc-builder/build/sdcc-build/orig/sdcc/src/pic14/gen.c:6828: size=0, offset=0, AOP_TYPE(res)=8\n;\t.line\t320; \"main.c\"\tuart[ 0 ] = 0x0A;\n\tMOVLW\t0x0a\n\tBANKSEL\t_uart\n\tMOVWF\t(_uart + 0)\n;\t.line\t321; \"main.c\"\tuart[ 1 ] = temperature[1];\n\tBANKSEL\t_temperature\n\tMOVF\t(_temperature + 1),W\n\tBANKSEL\tr0x1017\n\tMOVWF\tr0x1017\n\tBANKSEL\t_uart\n\tMOVWF\t(_uart + 1)\n;\t.line\t322; \"main.c\"\tuart[ 2 ] = temperature[0];\n\tBANKSEL\t_temperature\n\tMOVF\t(_temperature + 0),W\n\tBANKSEL\tr0x1017\n\tMOVWF\tr0x1017\n\tBANKSEL\t_uart\n\tMOVWF\t(_uart + 2)\n;;/home/sdcc-builder/build/sdcc-build/orig/sdcc/src/pic14/gen.c:6828: size=0, offset=0, AOP_TYPE(res)=8\n;\t.line\t323; \"main.c\"\tuart[ 3 ] = 0xFF;\n\tMOVLW\t0xff\n;\t.line\t324; \"main.c\"\tuart[ 4 ] = 0xFF;\n\tMOVWF\t(_uart + 3)\n\tMOVWF\t(_uart + 4)\n;\t.line\t325; \"main.c\"\tanswer( 5 );\n\tMOVLW\t0x05\n\tPAGESEL\t_answer\n\tCALL\t_answer\n\tPAGESEL\t$\n;\t.line\t326; \"main.c\"\t}\n\tRETURN\t\n; exit point of _send_temperature\n\n;***\n;  pBlock Stats: dbName = C\n;***\n;has an exit\n;functions called:\n;   _eeprom_read\n;   _answer\n;   _eeprom_read\n;   _answer\n;1 compiler assigned register :\n;   r0x1017\n;; Starting pCode block\nS_main__send_eeprom_value_to_host\tcode\n_send_eeprom_value_to_host:\n; 2 exit points\n;;/home/sdcc-builder/build/sdcc-build/orig/sdcc/src/pic14/gen.c:6828: size=0, offset=0, AOP_TYPE(res)=8\n;\t.line\t311; \"main.c\"\tuart[ 0 ] = 0x04;\n\tMOVLW\t0x04\n\tBANKSEL\t_uart\n\tMOVWF\t(_uart + 0)\n;\t.line\t312; \"main.c\"\tuart[ 2 ] = eeprom_read( uart[ 1 ] );\n\tMOVF\t(_uart + 1),W\n\tBANKSEL\tr0x1017\n\tMOVWF\tr0x1017\n\tPAGESEL\t_eeprom_read\n\tCALL\t_eeprom_read\n\tPAGESEL\t$\n\tBANKSEL\tr0x1017\n\tMOVWF\tr0x1017\n\tBANKSEL\t_uart\n\tMOVWF\t(_uart + 2)\n;;/home/sdcc-builder/build/sdcc-build/orig/sdcc/src/pic14/gen.c:6828: size=0, offset=0, AOP_TYPE(res)=8\n;\t.line\t313; \"main.c\"\tuart[ 3 ] = 0xFF;\n\tMOVLW\t0xff\n;\t.line\t314; \"main.c\"\tuart[ 4 ] = 0xFF;\n\tMOVWF\t(_uart + 3)\n\tMOVWF\t(_uart + 4)\n;\t.line\t315; \"main.c\"\tanswer( 5 );\n\tMOVLW\t0x05\n\tPAGESEL\t_answer\n\tCALL\t_answer\n\tPAGESEL\t$\n;\t.line\t316; \"main.c\"\t}\n\tRETURN\t\n; exit point of _send_eeprom_value_to_host\n\n;***\n;  pBlock Stats: dbName = C\n;***\n;has an exit\n;functions called:\n;   _SendByteSerially\n;   _SendByteSerially\n;5 compiler assigned registers:\n;   r0x1012\n;   r0x1013\n;   r0x1014\n;   r0x1015\n;   r0x1016\n;; Starting pCode block\nS_main__answer\tcode\n_answer:\n; 2 exit points\n;\t.line\t302; \"main.c\"\tvoid answer( uint8_t N )\n\tBANKSEL\tr0x1012\n\tMOVWF\tr0x1012\n;\t.line\t305; \"main.c\"\tfor ( i = 0; i < N; i++ )\n\tCLRF\tr0x1013\n_00254_DS_:\n\tBANKSEL\tr0x1012\n\tMOVF\tr0x1012,W\n\tSUBWF\tr0x1013,W\n\tBTFSC\tSTATUS,0\n\tGOTO\t_00256_DS_\n;;genSkipc:3307: created from rifx:00000000047A5780\n;\t.line\t306; \"main.c\"\tSendByteSerially( uart[ i ] );\n\tMOVF\tr0x1013,W\n\tADDLW\t(_uart + 0)\n\tMOVWF\tr0x1014\n\tMOVLW\thigh (_uart + 0)\n\tBTFSC\tSTATUS,0\n\tADDLW\t0x01\n\tMOVWF\tr0x1015\n\tMOVF\tr0x1014,W\n\tBANKSEL\tFSR\n\tMOVWF\tFSR\n\tBCF\tSTATUS,7\n\tBANKSEL\tr0x1015\n\tBTFSC\tr0x1015,0\n\tBSF\tSTATUS,7\n\tBANKSEL\tINDF\n\tMOVF\tINDF,W\n;;1\tMOVWF\tr0x1016\n\tPAGESEL\t_SendByteSerially\n\tCALL\t_SendByteSerially\n\tPAGESEL\t$\n;\t.line\t305; \"main.c\"\tfor ( i = 0; i < N; i++ )\n\tBANKSEL\tr0x1013\n\tINCF\tr0x1013,F\n\tGOTO\t_00254_DS_\n_00256_DS_:\n;\t.line\t307; \"main.c\"\t}\n\tRETURN\t\n; exit point of _answer\n\n;***\n;  pBlock Stats: dbName = C\n;***\n;has an exit\n;functions called:\n;   __gptrget1\n;   _SendByteSerially\n;   __gptrget1\n;   _SendByteSerially\n;6 compiler assigned registers:\n;   r0x101B\n;   STK00\n;   r0x101C\n;   STK01\n;   r0x101D\n;   r0x101E\n;; Starting pCode block\nS_main__SendStringSerially\tcode\n_SendStringSerially:\n; 2 exit points\n;\t.line\t293; \"main.c\"\tvoid SendStringSerially( const unsigned char* st )\n\tBANKSEL\tr0x101B\n\tMOVWF\tr0x101B\n\tMOVF\tSTK00,W\n\tMOVWF\tr0x101C\n\tMOVF\tSTK01,W\n\tMOVWF\tr0x101D\n_00244_DS_:\n;\t.line\t295; \"main.c\"\twhile ( *st )\n\tBANKSEL\tr0x101D\n\tMOVF\tr0x101D,W\n\tMOVWF\tSTK01\n\tMOVF\tr0x101C,W\n\tMOVWF\tSTK00\n\tMOVF\tr0x101B,W\n\tPAGESEL\t__gptrget1\n\tCALL\t__gptrget1\n\tPAGESEL\t$\n\tBANKSEL\tr0x101E\n\tMOVWF\tr0x101E\n\tMOVF\tr0x101E,W\n\tBTFSC\tSTATUS,2\n\tGOTO\t_00247_DS_\n;\t.line\t296; \"main.c\"\tSendByteSerially( *st++ );\n\tINCF\tr0x101D,F\n\tBTFSC\tSTATUS,2\n\tINCF\tr0x101C,F\n\tBTFSC\tSTATUS,2\n\tINCF\tr0x101B,F\n\tMOVF\tr0x101E,W\n\tPAGESEL\t_SendByteSerially\n\tCALL\t_SendByteSerially\n\tPAGESEL\t$\n\tGOTO\t_00244_DS_\n_00247_DS_:\n;\t.line\t297; \"main.c\"\t}\n\tRETURN\t\n; exit point of _SendStringSerially\n\n;***\n;  pBlock Stats: dbName = C\n;***\n;has an exit\n;functions called:\n;   _uart_freq\n;   _freq_mesure\n;   _uart_freq\n;   _uart_freq\n;   _freq_mesure\n;   _uart_freq\n;2 compiler assigned registers:\n;   r0x1022\n;   r0x1023\n;; Starting pCode block\nS_main__timer1_int\tcode\n_timer1_int:\n; 2 exit points\n;\t.line\t251; \"main.c\"\tif ( timer0_prescaler == 0 )\n\tBANKSEL\t_timer0_prescaler\n\tMOVF\t_timer0_prescaler,W\n\tBTFSS\tSTATUS,2\n\tGOTO\t_00207_DS_\n;\t.line\t252; \"main.c\"\tuart_freq();\n\tPAGESEL\t_uart_freq\n\tCALL\t_uart_freq\n\tPAGESEL\t$\n\tGOTO\t_00208_DS_\n_00207_DS_:\n;\t.line\t253; \"main.c\"\telse if ( timer0_overflows < 819 )\n\tBANKSEL\t_timer0_overflows\n\tMOVF\t_timer0_overflows,W\n\tBANKSEL\tr0x1022\n\tMOVWF\tr0x1022\n\tBANKSEL\t_timer0_overflows\n\tMOVF\t(_timer0_overflows + 1),W\n\tBANKSEL\tr0x1023\n\tMOVWF\tr0x1023\n;;unsigned compare: left < lit(0x333=819), size=2\n\tMOVLW\t0x03\n\tSUBWF\tr0x1023,W\n\tBTFSS\tSTATUS,2\n\tGOTO\t_00219_DS_\n\tMOVLW\t0x33\n\tSUBWF\tr0x1022,W\n_00219_DS_:\n\tBTFSC\tSTATUS,0\n\tGOTO\t_00204_DS_\n;;genSkipc:3307: created from rifx:00000000047A5780\n;\t.line\t254; \"main.c\"\tfreq_mesure();  // freq_mesure does always prescaler decrement\n\tPAGESEL\t_freq_mesure\n\tCALL\t_freq_mesure\n\tPAGESEL\t$\n\tGOTO\t_00208_DS_\n_00204_DS_:\n;\t.line\t256; \"main.c\"\tuart_freq();\n\tPAGESEL\t_uart_freq\n\tCALL\t_uart_freq\n\tPAGESEL\t$\n_00208_DS_:\n;\t.line\t257; \"main.c\"\tTIMER1_INTERRUPT = 0;\n\tBANKSEL\t_b\n\tBCF\t_b,1\n;\t.line\t258; \"main.c\"\t}\n\tRETURN\t\n; exit point of _timer1_int\n\n;***\n;  pBlock Stats: dbName = C\n;***\n;has an exit\n;functions called:\n;   _answer\n;   _freq_mesure_init\n;   _leds_over\n;   _answer\n;   _freq_mesure_init\n;   _leds_over\n;3 compiler assigned registers:\n;   r0x101F\n;   r0x1020\n;   r0x1021\n;; Starting pCode block\nS_main__uart_freq\tcode\n_uart_freq:\n; 2 exit points\n;;/home/sdcc-builder/build/sdcc-build/orig/sdcc/src/pic14/gen.c:6828: size=0, offset=0, AOP_TYPE(res)=8\n;\t.line\t220; \"main.c\"\tuart[ 0 ] = 0x06;\n\tMOVLW\t0x06\n\tBANKSEL\t_uart\n\tMOVWF\t(_uart + 0)\n;;/home/sdcc-builder/build/sdcc-build/orig/sdcc/src/pic14/gen.c:6828: size=0, offset=0, AOP_TYPE(res)=8\n;\t.line\t221; \"main.c\"\tuart[ 1 ] = timer0_prescaler;\n\tBANKSEL\t_timer0_prescaler\n\tMOVF\t_timer0_prescaler,W\n\tBANKSEL\t_uart\n\tMOVWF\t(_uart + 1)\n;;/home/sdcc-builder/build/sdcc-build/orig/sdcc/src/pic14/gen.c:6828: size=0, offset=0, AOP_TYPE(res)=8\n;\t.line\t222; \"main.c\"\tuart[ 2 ] = TMR0;\n\tBANKSEL\t_TMR0\n\tMOVF\t_TMR0,W\n\tBANKSEL\t_uart\n\tMOVWF\t(_uart + 2)\n;\t.line\t223; \"main.c\"\tuart[ 3 ] = ( timer0_overflows >> 8 ) & 0xff;\n\tBANKSEL\t_timer0_overflows\n\tMOVF\t(_timer0_overflows + 1),W\n\tBANKSEL\tr0x101F\n\tMOVWF\tr0x101F\n\tBANKSEL\t_uart\n\tMOVWF\t(_uart + 3)\n;\t.line\t224; \"main.c\"\tuart[ 4 ] = timer0_overflows & 0xff;\n\tBANKSEL\t_timer0_overflows\n\tMOVF\t_timer0_overflows,W\n\tBANKSEL\tr0x101F\n\tMOVWF\tr0x101F\n\tBANKSEL\t_uart\n\tMOVWF\t(_uart + 4)\n;;/home/sdcc-builder/build/sdcc-build/orig/sdcc/src/pic14/gen.c:6828: size=0, offset=0, AOP_TYPE(res)=8\n;\t.line\t225; \"main.c\"\tuart[ 5 ] = 0xFF;\n\tMOVLW\t0xff\n;\t.line\t226; \"main.c\"\tuart[ 6 ] = 0xFF;\n\tMOVWF\t(_uart + 5)\n\tMOVWF\t(_uart + 6)\n;\t.line\t227; \"main.c\"\tanswer( 7 );\n\tMOVLW\t0x07\n\tPAGESEL\t_answer\n\tCALL\t_answer\n\tPAGESEL\t$\n;\t.line\t228; \"main.c\"\tif ( serie_counter )\n\tBANKSEL\t_serie_counter\n\tMOVF\t_serie_counter,W\n\tBTFSC\tSTATUS,2\n\tGOTO\t_00196_DS_\n;\t.line\t230; \"main.c\"\tserie_counter--;\n\tDECF\t_serie_counter,F\n;\t.line\t231; \"main.c\"\tfreq_mesure_init();\n\tPAGESEL\t_freq_mesure_init\n\tCALL\t_freq_mesure_init\n\tPAGESEL\t$\n\tGOTO\t_00198_DS_\n_00196_DS_:\n;\t.line\t235; \"main.c\"\tleds_over();\n\tPAGESEL\t_leds_over\n\tCALL\t_leds_over\n\tPAGESEL\t$\n_00198_DS_:\n;\t.line\t237; \"main.c\"\t}\n\tRETURN\t\n; exit point of _uart_freq\n\n;***\n;  pBlock Stats: dbName = C\n;***\n;has an exit\n;functions called:\n;   _freq_mesure\n;   _freq_mesure\n;; Starting pCode block\nS_main__freq_mesure1\tcode\n_freq_mesure1:\n; 2 exit points\n;\t.line\t210; \"main.c\"\ttimer0_prescaler = 5;\n\tMOVLW\t0x05\n\tBANKSEL\t_timer0_prescaler\n\tMOVWF\t_timer0_prescaler\n;\t.line\t211; \"main.c\"\tfreq_mesure();\n\tPAGESEL\t_freq_mesure\n\tCALL\t_freq_mesure\n\tPAGESEL\t$\n;\t.line\t212; \"main.c\"\t}\n\tRETURN\t\n; exit point of _freq_mesure1\n\n;***\n;  pBlock Stats: dbName = C\n;***\n;has an exit\n;functions called:\n;   __gptrget1\n;   _SetPrescaler\n;   _PrescalerOff\n;   _freq_mesure_init\n;   __gptrget1\n;   _SetPrescaler\n;   _PrescalerOff\n;   _freq_mesure_init\n;5 compiler assigned registers:\n;   r0x1011\n;   r0x1012\n;   STK01\n;   STK00\n;   r0x1013\n;; Starting pCode block\nS_main__freq_mesure\tcode\n_freq_mesure:\n; 2 exit points\n;\t.line\t201; \"main.c\"\tif ( timer0_prescaler )\n\tBANKSEL\t_timer0_prescaler\n\tMOVF\t_timer0_prescaler,W\n\tBTFSC\tSTATUS,2\n\tGOTO\t_00185_DS_\n;\t.line\t202; \"main.c\"\tSetPrescaler( option_reg[ --timer0_prescaler ] );\n\tDECF\t_timer0_prescaler,F\n\tMOVF\t_timer0_prescaler,W\n\tADDLW\t(_option_reg + 0)\n\tBANKSEL\tr0x1011\n\tMOVWF\tr0x1011\n\tMOVLW\thigh (_option_reg + 0)\n\tBTFSC\tSTATUS,0\n\tADDLW\t0x01\n\tMOVWF\tr0x1012\n\tMOVF\tr0x1011,W\n\tMOVWF\tSTK01\n\tMOVF\tr0x1012,W\n\tMOVWF\tSTK00\n\tMOVLW\t0x80\n\tPAGESEL\t__gptrget1\n\tCALL\t__gptrget1\n\tPAGESEL\t$\n;;1\tMOVWF\tr0x1013\n\tPAGESEL\t_SetPrescaler\n\tCALL\t_SetPrescaler\n\tPAGESEL\t$\n\tGOTO\t_00186_DS_\n_00185_DS_:\n;\t.line\t204; \"main.c\"\tPrescalerOff();\n\tPAGESEL\t_PrescalerOff\n\tCALL\t_PrescalerOff\n\tPAGESEL\t$\n_00186_DS_:\n;\t.line\t205; \"main.c\"\tfreq_mesure_init();\n\tPAGESEL\t_freq_mesure_init\n\tCALL\t_freq_mesure_init\n\tPAGESEL\t$\n;\t.line\t206; \"main.c\"\t}\n\tRETURN\t\n; exit point of _freq_mesure\n\n;***\n;  pBlock Stats: dbName = C\n;***\n;has an exit\n;; Starting pCode block\nS_main__freq_mesure_init\tcode\n_freq_mesure_init:\n; 2 exit points\n;\t.line\t174; \"main.c\"\tT0SE = 0;  // bit 4 TMR0 Source Edge Select bit 0 = low/high 1 = high/low\n\tBANKSEL\t_OPTION_REGbits\n\tBCF\t_OPTION_REGbits,4\n;\t.line\t175; \"main.c\"\ttimer0_overflows = 0;\n\tBANKSEL\t_timer0_overflows\n\tCLRF\t_timer0_overflows\n\tCLRF\t(_timer0_overflows + 1)\n;\t.line\t180; \"main.c\"\tT1CKPS1 = 1;  // bits 5-4  Prescaler Rate Select bits\n\tBANKSEL\t_T1CONbits\n\tBSF\t_T1CONbits,5\n;\t.line\t181; \"main.c\"\tT1CKPS0 = 1;\n\tBSF\t_T1CONbits,4\n;\t.line\t182; \"main.c\"\tT1OSCEN = 0;  // bit 3 Timer1 Oscillator Enable Control: bit 1=on\n\tBCF\t_T1CONbits,3\n;\t.line\t183; \"main.c\"\tNOT_T1SYNC =\n\tBSF\t_T1CONbits,2\n;\t.line\t185; \"main.c\"\tTMR1CS =\n\tBCF\t_T1CONbits,1\n;\t.line\t187; \"main.c\"\tTMR1IE = 1;\n\tBANKSEL\t_PIE1bits\n\tBSF\t_PIE1bits,0\n;\t.line\t188; \"main.c\"\tTMR1H = 0;   // preset for timer1 MSB register\n\tBANKSEL\t_TMR1H\n\tCLRF\t_TMR1H\n;\t.line\t189; \"main.c\"\tTMR1L = 0;   // preset for timer1 LSB register\n\tCLRF\t_TMR1L\n;\t.line\t191; \"main.c\"\tTMR1ON = 1;  // bit 0 enables timer\n\tBSF\t_T1CONbits,0\n;\t.line\t193; \"main.c\"\tTMR0 = 0;\n\tCLRF\t_TMR0\n;\t.line\t194; \"main.c\"\tT0IE = 1;\n\tBSF\t_INTCONbits,5\n;\t.line\t196; \"main.c\"\tTRISA3 = 1;  // TRISA3 = 1 enable it as input\n\tBANKSEL\t_TRISAbits\n\tBSF\t_TRISAbits,3\n;\t.line\t197; \"main.c\"\t}\n\tRETURN\t\n; exit point of _freq_mesure_init\n\n;***\n;  pBlock Stats: dbName = C\n;***\n;has an exit\n;; Starting pCode block\nS_main__ReceiveByteSerially\tcode\n_ReceiveByteSerially:\n; 2 exit points\n;\t.line\t120; \"main.c\"\tif ( OERR )  // If over run error, then reset the receiver\n\tBANKSEL\t_RCSTAbits\n\tBTFSS\t_RCSTAbits,1\n\tGOTO\t_00175_DS_\n;\t.line\t122; \"main.c\"\tCREN = 0;\n\tBCF\t_RCSTAbits,4\n;\t.line\t123; \"main.c\"\tCREN = 1;\n\tBSF\t_RCSTAbits,4\n_00175_DS_:\n;\t.line\t126; \"main.c\"\twhile ( !RCIF )\n\tBANKSEL\t_PIR1bits\n\tBTFSS\t_PIR1bits,5\n\tGOTO\t_00175_DS_\n;\t.line\t129; \"main.c\"\treturn RCREG;\n\tMOVF\t_RCREG,W\n;\t.line\t130; \"main.c\"\t}\n\tRETURN\t\n; exit point of _ReceiveByteSerially\n\n;***\n;  pBlock Stats: dbName = C\n;***\n;has an exit\n;1 compiler assigned register :\n;   r0x1011\n;; Starting pCode block\nS_main__SendByteSerially\tcode\n_SendByteSerially:\n; 2 exit points\n;\t.line\t111; \"main.c\"\tvoid SendByteSerially( unsigned char Byte )  // Writes a character to the serial port\n\tBANKSEL\tr0x1011\n\tMOVWF\tr0x1011\n_00168_DS_:\n;\t.line\t113; \"main.c\"\twhile ( !TXIF )\n\tBANKSEL\t_PIR1bits\n\tBTFSS\t_PIR1bits,4\n\tGOTO\t_00168_DS_\n;\t.line\t115; \"main.c\"\tTXREG = Byte;\n\tBANKSEL\tr0x1011\n\tMOVF\tr0x1011,W\n\tBANKSEL\t_TXREG\n\tMOVWF\t_TXREG\n;\t.line\t116; \"main.c\"\t}\n\tRETURN\t\n; exit point of _SendByteSerially\n\n;***\n;  pBlock Stats: dbName = C\n;***\n;has an exit\n;; Starting pCode block\nS_main__uart_init\tcode\n_uart_init:\n; 2 exit points\n;\t.line\t92; \"main.c\"\tTRISB2 = 0;  // TX Pin\n\tBANKSEL\t_TRISBbits\n\tBCF\t_TRISBbits,2\n;\t.line\t93; \"main.c\"\tTRISB1 = 1;  // RX Pin\n\tBSF\t_TRISBbits,1\n;\t.line\t94; \"main.c\"\tSPBRG = ( ( _XTAL_FREQ / 16 ) / BAUDRATE ) - 1;\n\tMOVLW\t0x14\n\tMOVWF\t_SPBRG\n;\t.line\t95; \"main.c\"\tBRGH = 1;  // Fast baudrate\n\tBSF\t_TXSTAbits,2\n;\t.line\t96; \"main.c\"\tSYNC = 0;  // Asynchronous\n\tBCF\t_TXSTAbits,4\n;\t.line\t97; \"main.c\"\tSPEN = 1;  // Enable serial port pins\n\tBANKSEL\t_RCSTAbits\n\tBSF\t_RCSTAbits,7\n;\t.line\t98; \"main.c\"\tCREN = 1;  // Enable reception\n\tBSF\t_RCSTAbits,4\n;\t.line\t99; \"main.c\"\tSREN = 0;  // No effect\n\tBCF\t_RCSTAbits,5\n;\t.line\t100; \"main.c\"\tTXIE = 0;  // Disable tx interrupts\n\tBANKSEL\t_PIE1bits\n\tBCF\t_PIE1bits,4\n;\t.line\t101; \"main.c\"\tRCIE = 1;  // Enable rx interrupts\n\tBSF\t_PIE1bits,5\n;\t.line\t102; \"main.c\"\tTX9 = 0;   // 8-bit transmission\n\tBCF\t_TXSTAbits,6\n;\t.line\t103; \"main.c\"\tRX9 = 0;   // 8-bit reception\n\tBANKSEL\t_RCSTAbits\n\tBCF\t_RCSTAbits,6\n;\t.line\t104; \"main.c\"\tTXEN = 0;  // Reset transmitter\n\tBANKSEL\t_TXSTAbits\n\tBCF\t_TXSTAbits,5\n;\t.line\t105; \"main.c\"\tTXEN = 1;  // Enable the transmitter\n\tBSF\t_TXSTAbits,5\n;\t.line\t106; \"main.c\"\t}\n\tRETURN\t\n; exit point of _uart_init\n\n;***\n;  pBlock Stats: dbName = C\n;***\n;has an exit\n;4 compiler assigned registers:\n;   r0x1024\n;   r0x1025\n;   r0x1026\n;   r0x1027\n;; Starting pCode block\nS_main__reply\tcode\n_reply:\n; 2 exit points\n;\t.line\t71; \"main.c\"\tunsigned char ret = 0, i;\n\tBANKSEL\tr0x1024\n\tCLRF\tr0x1024\n;\t.line\t73; \"main.c\"\tfor ( i = 0; i < 8; i++ )\n\tCLRF\tr0x1025\n_00139_DS_:\n;\t.line\t75; \"main.c\"\tto;\n\tBANKSEL\t_TRISAbits\n\tBCF\t_TRISAbits,1\n;\t.line\t76; \"main.c\"\tt = 0;\n\tBANKSEL\t_PORTAbits\n\tBCF\t_PORTAbits,1\n;\t.line\t78; \"main.c\"\tti;\n\tBANKSEL\t_TRISAbits\n\tBSF\t_TRISAbits,1\n;\t.line\t80; \"main.c\"\tif ( t )\n\tBANKSEL\t_PORTAbits\n\tBTFSS\t_PORTAbits,1\n\tGOTO\t_00140_DS_\n;;103\tMOVF\tr0x1025,W\n;\t.line\t82; \"main.c\"\tret += 1 << i;\n\tMOVLW\t0x01\n\tBANKSEL\tr0x1027\n\tMOVWF\tr0x1027\n;;102\tMOVF\tr0x1026,W\n\tMOVF\tr0x1025,W\n\tMOVWF\tr0x1026\n\tBTFSC\tr0x1026,7\n\tGOTO\t_00159_DS_\n\tSUBLW\t0x00\n\tBTFSC\tSTATUS,2\n\tGOTO\t_00157_DS_\n_00156_DS_:\n\tBANKSEL\tr0x1027\n\tRLF\tr0x1027,F\n\tADDLW\t0x01\n\tBTFSS\tSTATUS,0\n\tGOTO\t_00156_DS_\n\tGOTO\t_00157_DS_\n_00159_DS_:\n\tBCF\tSTATUS,0\n\tBANKSEL\tr0x1027\n\tBTFSC\tr0x1027,7\n\tBSF\tSTATUS,0\n\tRRF\tr0x1027,F\n\tADDLW\t0x01\n\tBTFSS\tSTATUS,0\n\tGOTO\t_00159_DS_\n_00157_DS_:\n\tBANKSEL\tr0x1024\n\tMOVF\tr0x1024,W\n\tMOVWF\tr0x1026\n\tMOVF\tr0x1027,W\n\tADDWF\tr0x1026,W\n\tMOVWF\tr0x1024\n_00140_DS_:\n;\t.line\t73; \"main.c\"\tfor ( i = 0; i < 8; i++ )\n\tBANKSEL\tr0x1025\n\tINCF\tr0x1025,F\n;;unsigned compare: left < lit(0x8=8), size=1\n\tMOVLW\t0x08\n\tSUBWF\tr0x1025,W\n\tBTFSS\tSTATUS,0\n\tGOTO\t_00139_DS_\n;;genSkipc:3307: created from rifx:00000000047A5780\n;\t.line\t86; \"main.c\"\tti;\n\tBANKSEL\t_TRISAbits\n\tBSF\t_TRISAbits,1\n;\t.line\t87; \"main.c\"\treturn ret;\n\tBANKSEL\tr0x1024\n\tMOVF\tr0x1024,W\n;\t.line\t88; \"main.c\"\t}\n\tRETURN\t\n; exit point of _reply\n\n;***\n;  pBlock Stats: dbName = C\n;***\n;has an exit\n;1 compiler assigned register :\n;   r0x1028\n;; Starting pCode block\nS_main__sensor_rst\tcode\n_sensor_rst:\n; 2 exit points\n;\t.line\t60; \"main.c\"\tto;\n\tBANKSEL\t_TRISAbits\n\tBCF\t_TRISAbits,1\n;\t.line\t61; \"main.c\"\tt = 0;\n\tBANKSEL\t_PORTAbits\n\tBCF\t_PORTAbits,1\n;\t.line\t63; \"main.c\"\tti;\n\tBANKSEL\t_TRISAbits\n\tBSF\t_TRISAbits,1\n;\t.line\t66; \"main.c\"\treturn t;  //return 0 for sensor present\n\tBANKSEL\tr0x1028\n\tCLRF\tr0x1028\n\tBANKSEL\t_PORTAbits\n\tBTFSS\t_PORTAbits,1\n\tGOTO\t_00001_DS_\n\tBANKSEL\tr0x1028\n\tINCF\tr0x1028,F\n_00001_DS_:\n\tBANKSEL\tr0x1028\n\tMOVF\tr0x1028,W\n;\t.line\t67; \"main.c\"\t}\n\tRETURN\t\n; exit point of _sensor_rst\n\n;***\n;  pBlock Stats: dbName = C\n;***\n;has an exit\n;6 compiler assigned registers:\n;   r0x1029\n;   r0x102A\n;   r0x102B\n;   r0x102C\n;   r0x102D\n;   r0x102E\n;; Starting pCode block\nS_main__cmnd_w\tcode\n_cmnd_w:\n; 2 exit points\n;\t.line\t31; \"main.c\"\tvoid cmnd_w( unsigned char cmnd )\n\tBANKSEL\tr0x1029\n\tMOVWF\tr0x1029\n;\t.line\t35; \"main.c\"\tfor ( i = 0; i < 8; i++ )\n\tCLRF\tr0x102A\n_00109_DS_:\n;\t.line\t37; \"main.c\"\tif ( cmnd & ( 1 << i ) )\n\tMOVLW\t0x00\n\tBANKSEL\tr0x102B\n\tMOVWF\tr0x102B\n\tMOVLW\t0x01\n\tMOVWF\tr0x102C\n\tMOVF\tr0x102A,W\n\tSUBLW\t0x00\n\tBTFSC\tSTATUS,2\n\tGOTO\t_00127_DS_\n_00126_DS_:\n\tBANKSEL\tr0x102C\n\tRLF\tr0x102C,F\n\tRLF\tr0x102B,F\n\tADDLW\t0x01\n\tBTFSS\tSTATUS,0\n\tGOTO\t_00126_DS_\n;;101\tMOVF\tr0x1029,W\n;;99\tMOVWF\tr0x102D\n;;1\tCLRF\tr0x102E\n;;100\tMOVF\tr0x102D,W\n_00127_DS_:\n\tBANKSEL\tr0x1029\n\tMOVF\tr0x1029,W\n\tANDWF\tr0x102C,F\n\tMOVLW\t0x00\n\tANDWF\tr0x102B,F\n\tMOVF\tr0x102B,W\n\tIORWF\tr0x102C,W\n\tBTFSC\tSTATUS,2\n\tGOTO\t_00106_DS_\n;\t.line\t39; \"main.c\"\tto;\n\tBANKSEL\t_TRISAbits\n\tBCF\t_TRISAbits,1\n;\t.line\t40; \"main.c\"\tt = 0;\n\tBANKSEL\t_PORTAbits\n\tBCF\t_PORTAbits,1\n;\t.line\t42; \"main.c\"\tti;\n\tBANKSEL\t_TRISAbits\n\tBSF\t_TRISAbits,1\n\tGOTO\t_00110_DS_\n_00106_DS_:\n;\t.line\t47; \"main.c\"\tto;\n\tBANKSEL\t_TRISAbits\n\tBCF\t_TRISAbits,1\n;\t.line\t48; \"main.c\"\tt = 0;\n\tBANKSEL\t_PORTAbits\n\tBCF\t_PORTAbits,1\n;\t.line\t50; \"main.c\"\tti;\n\tBANKSEL\t_TRISAbits\n\tBSF\t_TRISAbits,1\n_00110_DS_:\n;\t.line\t35; \"main.c\"\tfor ( i = 0; i < 8; i++ )\n\tBANKSEL\tr0x102A\n\tINCF\tr0x102A,F\n;;unsigned compare: left < lit(0x8=8), size=1\n\tMOVLW\t0x08\n\tSUBWF\tr0x102A,W\n\tBTFSS\tSTATUS,0\n\tGOTO\t_00109_DS_\n;;genSkipc:3307: created from rifx:00000000047A5780\n;\t.line\t54; \"main.c\"\tti;\n\tBANKSEL\t_TRISAbits\n\tBSF\t_TRISAbits,1\n;\t.line\t55; \"main.c\"\t}\n\tRETURN\t\n; exit point of _cmnd_w\n\n\n;\tcode size estimation:\n;\t  471+  209 =   680 instructions ( 1778 byte)\n\n\tend\n",
			"file": "main.asm",
			"file_size": 31569,
			"file_write_time": 132314076964009024,
			"settings":
			{
				"buffer_size": 30160,
				"line_ending": "Windows"
			}
		},
		{
			"file": "interrupt.asm",
			"settings":
			{
				"buffer_size": 5273,
				"line_ending": "Windows"
			}
		},
		{
			"file": "timer0.asm",
			"settings":
			{
				"buffer_size": 3841,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "digitaltemperaturesensor.asm",
			"settings":
			{
				"buffer_size": 35154,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "eeprom.asm",
			"settings":
			{
				"buffer_size": 1751,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "uart.asm",
			"settings":
			{
				"buffer_size": 257,
				"encoding": "UTF-8",
				"line_ending": "Windows",
				"name": "list P=16F628A"
			}
		},
		{
			"contents": "gplink-1.5.0 #1285 (Sep 12 2016)\nCopyright (c) 1998-2016 gputils project\nListing File Generated: 4-15-2020  09:01:37\n\n\nAddress  Value    Disassembly              Source\n-------  -----    -----------              ------\n                                           ;--------------------------------------------------------\n                                           ; File Created by SDCC : free open source ANSI-C Compiler\n                                           ; Version 4.0.0 #11528 (MINGW64)\n                                           ;--------------------------------------------------------\n                                           ; PIC port for the 14-bit core\n                                           ;--------------------------------------------------------\n                                           ;\t.file\t\"main.c\"\n                                           \tlist\tp=16f628a\n                                           \tradix dec\n                                           \tinclude \"p16f628a.inc\"\n                                                   LIST\n\n                                           ;==========================================================================\n                                           ; Build date : Oct 21 2015\n                                           ;  MPASM PIC16F628A processor include\n                                           ; \n                                           ;  (c) Copyright 1999-2015 Microchip Technology, All rights reserved\n                                           ;==========================================================================\n\n                                                   NOLIST\n                                           ;--------------------------------------------------------\n                                           ; external declarations\n                                           ;--------------------------------------------------------\n                                           \textern\t_main_asm\n                                           \textern\t_eeprom_write\n                                           \textern\t_eeprom_read\n                                           \textern\t_PrescalerOff\n                                           \textern\t_SetPrescaler\n                                           \textern\t_ds18b20_get_temperature\n                                           \textern\t_leds_over\n                                           \textern\t_leds_set_end\n                                           \textern\t_leds\n                                           \textern\t_SPBRG\n                                           \textern\t_RCREG\n                                           \textern\t_TXREG\n                                           \textern\t_TMR1H\n                                           \textern\t_TMR1L\n                                           \textern\t_TMR0\n                                           \textern\t_b\n                                           \textern\t_uart\n                                           \textern\t_uart_id\n                                           \textern\t_temperature\n                                           \textern\t_TXSTAbits\n                                           \textern\t_PIE1bits\n                                           \textern\t_TRISBbits\n                                           \textern\t_TRISAbits\n                                           \textern\t_OPTION_REGbits\n                                           \textern\t_RCSTAbits\n                                           \textern\t_T1CONbits\n                                           \textern\t_PIR1bits\n                                           \textern\t_INTCONbits\n                                           \textern\t_PORTAbits\n                                           \textern\t__gptrget1\n                                           \textern\t__sdcc_gsinit_startup\n                                           ;--------------------------------------------------------\n                                           ; global declarations\n                                           ;--------------------------------------------------------\n                                           \tglobal\t_main\n                                           \tglobal\t_uart_rx_packet\n                                           \tglobal\t_send_temperature\n                                           \tglobal\t_send_eeprom_value_to_host\n                                           \tglobal\t_SendStringSerially\n                                           \tglobal\t_isr\n                                           \tglobal\t_timer1_int\n                                           \tglobal\t_uart_freq\n                                           \tglobal\t_freq_mesure1\n                                           \tglobal\t_freq_mesure\n                                           \tglobal\t_freq_mesure_init\n                                           \tglobal\t_ReceiveByteSerially\n                                           \tglobal\t_SendByteSerially\n                                           \tglobal\t_uart_init\n                                           \tglobal\t_reply\n                                           \tglobal\t_sensor_rst\n                                           \tglobal\t_cmnd_w\n                                           \tglobal\t_option_reg\n                                           \tglobal\t_serie_counter\n                                           \tglobal\t_timer0_prescaler\n                                           \tglobal\t_timer0_overflows\n                                           \tglobal\t_answer\n\n                                           \tglobal PSAVE\n                                           \tglobal SSAVE\n                                           \tglobal WSAVE\n                                           \tglobal STK12\n                                           \tglobal STK11\n                                           \tglobal STK10\n                                           \tglobal STK09\n                                           \tglobal STK08\n                                           \tglobal STK07\n                                           \tglobal STK06\n                                           \tglobal STK05\n                                           \tglobal STK04\n                                           \tglobal STK03\n                                           \tglobal STK02\n                                           \tglobal STK01\n                                           \tglobal STK00\n\n                                           sharebank udata_ovr 0x0070\n                                           PSAVE\tres 1\n                                           SSAVE\tres 1\n                                           WSAVE\tres 1\n                                           STK12\tres 1\n                                           STK11\tres 1\n                                           STK10\tres 1\n                                           STK09\tres 1\n                                           STK08\tres 1\n                                           STK07\tres 1\n                                           STK06\tres 1\n                                           STK05\tres 1\n                                           STK04\tres 1\n                                           STK03\tres 1\n                                           STK02\tres 1\n                                           STK01\tres 1\n                                           STK00\tres 1\n\n                                           ;--------------------------------------------------------\n                                           ; global definitions\n                                           ;--------------------------------------------------------\n                                           UD_main_0\tudata\n                                           _timer0_overflows\tres\t2\n\n                                           UD_main_1\tudata\n                                           _serie_counter\tres\t1\n\n                                           ;--------------------------------------------------------\n                                           ; absolute symbol definitions\n                                           ;--------------------------------------------------------\n                                           ;--------------------------------------------------------\n                                           ; compiler-defined variables\n                                           ;--------------------------------------------------------\n                                           UDL_main_0\tudata\n                                           r0x1029\tres\t1\n                                           r0x102A\tres\t1\n                                           r0x102C\tres\t1\n                                           r0x102B\tres\t1\n                                           r0x1028\tres\t1\n                                           r0x1024\tres\t1\n                                           r0x1025\tres\t1\n                                           r0x1026\tres\t1\n                                           r0x1027\tres\t1\n                                           r0x1011\tres\t1\n                                           r0x1012\tres\t1\n                                           r0x101F\tres\t1\n                                           r0x1022\tres\t1\n                                           r0x1023\tres\t1\n                                           r0x102F\tres\t1\n                                           r0x1030\tres\t1\n                                           r0x1031\tres\t1\n                                           r0x101D\tres\t1\n                                           r0x101C\tres\t1\n                                           r0x101B\tres\t1\n                                           r0x101E\tres\t1\n                                           r0x1013\tres\t1\n                                           r0x1014\tres\t1\n                                           r0x1015\tres\t1\n                                           r0x1017\tres\t1\n                                           r0x1018\tres\t1\n                                           r0x1019\tres\t1\n                                           r0x101A\tres\t1\n                                           ___sdcc_saved_fsr\tres\t1\n                                           ;--------------------------------------------------------\n                                           ; initialized data\n                                           ;--------------------------------------------------------\n\n                                           IDD_main_0\tidata\n                                           _timer0_prescaler\n                                           \tdb\t0x05\t; 5\n\n\n                                           IDC_main_1\tcode\n                                           _option_reg\n0004a0   3420     retlw   0x20             \tretlw 0x20\t; 32\n0004a1   3421     retlw   0x21             \tretlw 0x21\t; 33\n0004a2   3422     retlw   0x22             \tretlw 0x22\t; 34\n0004a3   3423     retlw   0x23             \tretlw 0x23\t; 35\n0004a4   3424     retlw   0x24             \tretlw 0x24\t; 36\n                                           ;--------------------------------------------------------\n                                           ; initialized absolute data\n                                           ;--------------------------------------------------------\n                                           ;--------------------------------------------------------\n                                           ; overlayable items in internal ram \n                                           ;--------------------------------------------------------\n                                           ;\tudata_ovr\n                                           ;--------------------------------------------------------\n                                           ; reset vector \n                                           ;--------------------------------------------------------\n                                           STARTUP\tcode 0x0000\n000000   0000     nop                      \tnop\n                                           \tpagesel __sdcc_gsinit_startup\n000001   299e     goto    0x019e           \tgoto\t__sdcc_gsinit_startup\n                                           ;--------------------------------------------------------\n                                           ; interrupt and initialization code\n                                           ;--------------------------------------------------------\n                                           c_interrupt\tcode\t0x0004\n                                           __sdcc_interrupt:\n                                           ;***\n                                           ;  pBlock Stats: dbName = I\n                                           ;***\n                                           ;functions called:\n                                           ;   _ReceiveByteSerially\n                                           ;   _ReceiveByteSerially\n                                           ;   _ReceiveByteSerially\n                                           ;   _ReceiveByteSerially\n                                           ;4 compiler assigned registers:\n                                           ;   r0x102F\n                                           ;   r0x1030\n                                           ;   r0x1031\n                                           ;   r0x1032\n                                           ;; Starting pCode block\n                                           _isr:\n                                           ; 0 exit points\n                                           ;\t.line\t261; \"main.c\"\tvoid isr( void ) __interrupt 0\n000004   00f2     movwf   0x72             \tMOVWF\tWSAVE\n000005   0e03     swapf   0x03, 0x0        \tSWAPF\tSTATUS,W\n000006   0183     clrf    0x03             \tCLRF\tSTATUS\n000007   00f1     movwf   0x71             \tMOVWF\tSSAVE\n000008   080a     movf    0x0a, 0x0        \tMOVF\tPCLATH,W\n000009   018a     clrf    0x0a             \tCLRF\tPCLATH\n00000a   00f0     movwf   0x70             \tMOVWF\tPSAVE\n00000b   0804     movf    0x04, 0x0        \tMOVF\tFSR,W\n00000c   1283     bcf     0x03, 0x5        \tBANKSEL\t___sdcc_saved_fsr\n00000d   1703     bsf     0x03, 0x6        \n00000e   00bc     movwf   0x3c             \tMOVWF\t___sdcc_saved_fsr\n                                           ;\t.line\t264; \"main.c\"\tif ( RCIF )\n00000f   1283     bcf     0x03, 0x5        \tBANKSEL\t_PIR1bits\n000010   1303     bcf     0x03, 0x6        \n000011   1e8c     btfss   0x0c, 0x5        \tBTFSS\t_PIR1bits,5\n000012   287f     goto    0x007f           \tGOTO\t_00237_DS_\n                                           ;\t.line\t266; \"main.c\"\tif ( RX_FULL )\n000013   1283     bcf     0x03, 0x5        \tBANKSEL\t_b\n000014   1303     bcf     0x03, 0x6        \n000015   1c68     btfss   0x68, 0x0        \tBTFSS\t_b,0\n000016   2819     goto    0x0019           \tGOTO\t_00229_DS_\n                                           ;\t.line\t268; \"main.c\"\tReceiveByteSerially();  // dummy read\n                                           \tPAGESEL\t_ReceiveByteSerially\n000017   248e     call    0x048e           \tCALL\t_ReceiveByteSerially\n                                           \tPAGESEL\t$\n000018   2899     goto    0x0099           \tGOTO\t_00239_DS_\n                                           _00229_DS_:\n                                           ;\t.line\t272; \"main.c\"\tuart[ uart_id ] = ReceiveByteSerially();\n000019   1283     bcf     0x03, 0x5        \tBANKSEL\t_uart_id\n00001a   1303     bcf     0x03, 0x6        \n00001b   0859     movf    0x59, 0x0        \tMOVF\t_uart_id,W\n00001c   3e60     addlw   0x60             \tADDLW\t(_uart + 0)\n00001d   1283     bcf     0x03, 0x5        \tBANKSEL\tr0x102F\n00001e   1703     bsf     0x03, 0x6        \n00001f   00ae     movwf   0x2e             \tMOVWF\tr0x102F\n000020   3000     movlw   0x00             \tMOVLW\thigh (_uart + 0)\n000021   1803     btfsc   0x03, 0x0        \tBTFSC\tSTATUS,0\n000022   3e01     addlw   0x01             \tADDLW\t0x01\n000023   00af     movwf   0x2f             \tMOVWF\tr0x1030\n                                           \tPAGESEL\t_ReceiveByteSerially\n000024   248e     call    0x048e           \tCALL\t_ReceiveByteSerially\n                                           \tPAGESEL\t$\n000025   1283     bcf     0x03, 0x5        \tBANKSEL\tr0x1031\n000026   1703     bsf     0x03, 0x6        \n000027   00b0     movwf   0x30             \tMOVWF\tr0x1031\n000028   082e     movf    0x2e, 0x0        \tMOVF\tr0x102F,W\n000029   1283     bcf     0x03, 0x5        \tBANKSEL\tFSR\n00002a   1303     bcf     0x03, 0x6        \n00002b   0084     movwf   0x04             \tMOVWF\tFSR\n00002c   1383     bcf     0x03, 0x7        \tBCF\tSTATUS,7\n00002d   1283     bcf     0x03, 0x5        \tBANKSEL\tr0x1030\n00002e   1703     bsf     0x03, 0x6        \n00002f   182f     btfsc   0x2f, 0x0        \tBTFSC\tr0x1030,0\n000030   1783     bsf     0x03, 0x7        \tBSF\tSTATUS,7\n000031   0830     movf    0x30, 0x0        \tMOVF\tr0x1031,W\n000032   1283     bcf     0x03, 0x5        \tBANKSEL\tINDF\n000033   1303     bcf     0x03, 0x6        \n000034   0080     movwf   0x00             \tMOVWF\tINDF\n                                           ;\t.line\t273; \"main.c\"\tuart_id++;\n000035   1283     bcf     0x03, 0x5        \tBANKSEL\t_uart_id\n000036   1303     bcf     0x03, 0x6        \n000037   0ad9     incf    0x59, 0x1        \tINCF\t_uart_id,F\n                                           ;\t.line\t274; \"main.c\"\tuart_id &= 0b00000111;\n000038   3007     movlw   0x07             \tMOVLW\t0x07\n000039   05d9     andwf   0x59, 0x1        \tANDWF\t_uart_id,F\n                                           ;;unsigned compare: left < lit(0x4=4), size=1\n                                           ;\t.line\t275; \"main.c\"\tif ( ( 4 <= uart_id ) && ( uart[ uart_id - 1 ] == 0xFF ) && ( uart[ uart_id - 2 ] == 0xFF ) ) RX_FULL = 1;\n00003a   3004     movlw   0x04             \tMOVLW\t0x04\n00003b   0259     subwf   0x59, 0x0        \tSUBWF\t_uart_id,W\n00003c   1c03     btfss   0x03, 0x0        \tBTFSS\tSTATUS,0\n00003d   2899     goto    0x0099           \tGOTO\t_00239_DS_\n                                           ;;genSkipc:3307: created from rifx:00000000047A5780\n00003e   0859     movf    0x59, 0x0        \tMOVF\t_uart_id,W\n00003f   1283     bcf     0x03, 0x5        \tBANKSEL\tr0x102F\n000040   1703     bsf     0x03, 0x6        \n000041   00ae     movwf   0x2e             \tMOVWF\tr0x102F\n000042   032e     decf    0x2e, 0x0        \tDECF\tr0x102F,W\n000043   00af     movwf   0x2f             \tMOVWF\tr0x1030\n000044   01b0     clrf    0x30             \tCLRF\tr0x1031\n000045   082f     movf    0x2f, 0x0        \tMOVF\tr0x1030,W\n000046   3e60     addlw   0x60             \tADDLW\t(_uart + 0)\n000047   00af     movwf   0x2f             \tMOVWF\tr0x1030\n000048   3000     movlw   0x00             \tMOVLW\t0x00\n000049   1803     btfsc   0x03, 0x0        \tBTFSC\tSTATUS,0\n00004a   0f30     incfsz  0x30, 0x0        \tINCFSZ\tr0x1031,W\n00004b   3e00     addlw   0x00             \tADDLW\thigh (_uart + 0)\n00004c   00b0     movwf   0x30             \tMOVWF\tr0x1031\n00004d   082f     movf    0x2f, 0x0        \tMOVF\tr0x1030,W\n00004e   1283     bcf     0x03, 0x5        \tBANKSEL\tFSR\n00004f   1303     bcf     0x03, 0x6        \n000050   0084     movwf   0x04             \tMOVWF\tFSR\n000051   1383     bcf     0x03, 0x7        \tBCF\tSTATUS,7\n000052   1283     bcf     0x03, 0x5        \tBANKSEL\tr0x1031\n000053   1703     bsf     0x03, 0x6        \n000054   1830     btfsc   0x30, 0x0        \tBTFSC\tr0x1031,0\n000055   1783     bsf     0x03, 0x7        \tBSF\tSTATUS,7\n000056   1283     bcf     0x03, 0x5        \tBANKSEL\tINDF\n000057   1303     bcf     0x03, 0x6        \n000058   0800     movf    0x00, 0x0        \tMOVF\tINDF,W\n                                           ;;1\tMOVWF\tr0x1032\n000059   3aff     xorlw   0xff             \tXORLW\t0xff\n00005a   1d03     btfss   0x03, 0x2        \tBTFSS\tSTATUS,2\n00005b   2899     goto    0x0099           \tGOTO\t_00239_DS_\n00005c   30fe     movlw   0xfe             \tMOVLW\t0xfe\n00005d   1283     bcf     0x03, 0x5        \tBANKSEL\tr0x102F\n00005e   1703     bsf     0x03, 0x6        \n00005f   07ae     addwf   0x2e, 0x1        \tADDWF\tr0x102F,F\n000060   01af     clrf    0x2f             \tCLRF\tr0x1030\n000061   082e     movf    0x2e, 0x0        \tMOVF\tr0x102F,W\n000062   3e60     addlw   0x60             \tADDLW\t(_uart + 0)\n000063   00ae     movwf   0x2e             \tMOVWF\tr0x102F\n000064   3000     movlw   0x00             \tMOVLW\t0x00\n000065   1803     btfsc   0x03, 0x0        \tBTFSC\tSTATUS,0\n000066   0f2f     incfsz  0x2f, 0x0        \tINCFSZ\tr0x1030,W\n000067   3e00     addlw   0x00             \tADDLW\thigh (_uart + 0)\n000068   00af     movwf   0x2f             \tMOVWF\tr0x1030\n000069   082e     movf    0x2e, 0x0        \tMOVF\tr0x102F,W\n00006a   1283     bcf     0x03, 0x5        \tBANKSEL\tFSR\n00006b   1303     bcf     0x03, 0x6        \n00006c   0084     movwf   0x04             \tMOVWF\tFSR\n00006d   1383     bcf     0x03, 0x7        \tBCF\tSTATUS,7\n00006e   1283     bcf     0x03, 0x5        \tBANKSEL\tr0x1030\n00006f   1703     bsf     0x03, 0x6        \n000070   182f     btfsc   0x2f, 0x0        \tBTFSC\tr0x1030,0\n000071   1783     bsf     0x03, 0x7        \tBSF\tSTATUS,7\n000072   1283     bcf     0x03, 0x5        \tBANKSEL\tINDF\n000073   1303     bcf     0x03, 0x6        \n000074   0800     movf    0x00, 0x0        \tMOVF\tINDF,W\n000075   1283     bcf     0x03, 0x5        \tBANKSEL\tr0x1031\n000076   1703     bsf     0x03, 0x6        \n000077   00b0     movwf   0x30             \tMOVWF\tr0x1031\n000078   3aff     xorlw   0xff             \tXORLW\t0xff\n000079   1d03     btfss   0x03, 0x2        \tBTFSS\tSTATUS,2\n00007a   2899     goto    0x0099           \tGOTO\t_00239_DS_\n00007b   1283     bcf     0x03, 0x5        \tBANKSEL\t_b\n00007c   1303     bcf     0x03, 0x6        \n00007d   1468     bsf     0x68, 0x0        \tBSF\t_b,0\n00007e   2899     goto    0x0099           \tGOTO\t_00239_DS_\n                                           _00237_DS_:\n                                           ;\t.line\t278; \"main.c\"\telse if ( TMR0IF )\n00007f   1283     bcf     0x03, 0x5        \tBANKSEL\t_INTCONbits\n000080   1303     bcf     0x03, 0x6        \n000081   1d0b     btfss   0x0b, 0x2        \tBTFSS\t_INTCONbits,2\n000082   288a     goto    0x008a           \tGOTO\t_00234_DS_\n                                           ;\t.line\t280; \"main.c\"\tTMR0IF = 0;\n000083   110b     bcf     0x0b, 0x2        \tBCF\t_INTCONbits,2\n                                           ;\t.line\t281; \"main.c\"\ttimer0_overflows++;\n000084   1283     bcf     0x03, 0x5        \tBANKSEL\t_timer0_overflows\n000085   1303     bcf     0x03, 0x6        \n000086   0ada     incf    0x5a, 0x1        \tINCF\t_timer0_overflows,F\n000087   1903     btfsc   0x03, 0x2        \tBTFSC\tSTATUS,2\n000088   0adb     incf    0x5b, 0x1        \tINCF\t(_timer0_overflows + 1),F\n000089   2899     goto    0x0099           \tGOTO\t_00239_DS_\n                                           _00234_DS_:\n                                           ;\t.line\t283; \"main.c\"\telse if ( TMR1IF )\n00008a   1283     bcf     0x03, 0x5        \tBANKSEL\t_PIR1bits\n00008b   1303     bcf     0x03, 0x6        \n00008c   1c0c     btfss   0x0c, 0x0        \tBTFSS\t_PIR1bits,0\n00008d   2899     goto    0x0099           \tGOTO\t_00239_DS_\n                                           ;\t.line\t285; \"main.c\"\tTRISA3 = 0;\n00008e   1683     bsf     0x03, 0x5        \tBANKSEL\t_TRISAbits\n00008f   1303     bcf     0x03, 0x6        \n000090   1185     bcf     0x05, 0x3        \tBCF\t_TRISAbits,3\n                                           ;\t.line\t286; \"main.c\"\tTMR1ON = 0;  // disable timer\n000091   1283     bcf     0x03, 0x5        \tBANKSEL\t_T1CONbits\n000092   1303     bcf     0x03, 0x6        \n000093   1010     bcf     0x10, 0x0        \tBCF\t_T1CONbits,0\n                                           ;\t.line\t287; \"main.c\"\tTMR1IF = 0;\n000094   100c     bcf     0x0c, 0x0        \tBCF\t_PIR1bits,0\n                                           ;\t.line\t288; \"main.c\"\tT0IE = 0;\n000095   128b     bcf     0x0b, 0x5        \tBCF\t_INTCONbits,5\n                                           ;\t.line\t289; \"main.c\"\tTIMER1_INTERRUPT = 1;\n000096   1283     bcf     0x03, 0x5        \tBANKSEL\t_b\n000097   1303     bcf     0x03, 0x6        \n000098   14e8     bsf     0x68, 0x1        \tBSF\t_b,1\n                                           _00239_DS_:\n                                           ;\t.line\t291; \"main.c\"\t}\n000099   1283     bcf     0x03, 0x5        \tBANKSEL\t___sdcc_saved_fsr\n00009a   1703     bsf     0x03, 0x6        \n00009b   083c     movf    0x3c, 0x0        \tMOVF\t___sdcc_saved_fsr,W\n00009c   1283     bcf     0x03, 0x5        \tBANKSEL\tFSR\n00009d   1303     bcf     0x03, 0x6        \n00009e   0084     movwf   0x04             \tMOVWF\tFSR\n00009f   0870     movf    0x70, 0x0        \tMOVF\tPSAVE,W\n0000a0   008a     movwf   0x0a             \tMOVWF\tPCLATH\n0000a1   0183     clrf    0x03             \tCLRF\tSTATUS\n0000a2   0e71     swapf   0x71, 0x0        \tSWAPF\tSSAVE,W\n0000a3   0083     movwf   0x03             \tMOVWF\tSTATUS\n0000a4   0ef2     swapf   0x72, 0x1        \tSWAPF\tWSAVE,F\n0000a5   0e72     swapf   0x72, 0x0        \tSWAPF\tWSAVE,W\n                                           END_OF_INTERRUPT:\n0000a6   0009     retfie                   \tRETFIE\t\n\n                                           ;--------------------------------------------------------\n                                           ; code\n                                           ;--------------------------------------------------------\n                                           code_main\tcode\n                                           ;***\n                                           ;  pBlock Stats: dbName = M\n                                           ;***\n                                           ;has an exit\n                                           ;functions called:\n                                           ;   _main_asm\n                                           ;   _main_asm\n                                           ;; Starting pCode block\n                                           S_main__main\tcode\n                                           _main:\n                                           ; 2 exit points\n                                           ;\t.line\t379; \"main.c\"\tmain_asm();\n                                           \tPAGESEL\t_main_asm\n000002   215a     call    0x015a           \tCALL\t_main_asm\n                                           \tPAGESEL\t$\n                                           ;\t.line\t380; \"main.c\"\t}\n000003   0008     return                   \tRETURN\t\n                                           ; exit point of _main\n\n                                           ;***\n                                           ;  pBlock Stats: dbName = C\n                                           ;***\n                                           ;has an exit\n                                           ;functions called:\n                                           ;   _eeprom_write\n                                           ;   _send_eeprom_value_to_host\n                                           ;   _send_eeprom_value_to_host\n                                           ;   _leds\n                                           ;   _leds_set_end\n                                           ;   _freq_mesure1\n                                           ;   _leds\n                                           ;   _leds_set_end\n                                           ;   _ds18b20_get_temperature\n                                           ;   _send_temperature\n                                           ;   _leds_over\n                                           ;   _eeprom_write\n                                           ;   _send_eeprom_value_to_host\n                                           ;   _send_eeprom_value_to_host\n                                           ;   _leds\n                                           ;   _leds_set_end\n                                           ;   _freq_mesure1\n                                           ;   _leds\n                                           ;   _leds_set_end\n                                           ;   _ds18b20_get_temperature\n                                           ;   _send_temperature\n                                           ;   _leds_over\n                                           ;3 compiler assigned registers:\n                                           ;   r0x1018\n                                           ;   r0x1019\n                                           ;   r0x101A\n                                           ;; Starting pCode block\n                                           S_main__uart_rx_packet\tcode\n                                           _uart_rx_packet:\n                                           ; 2 exit points\n                                           ;\t.line\t330; \"main.c\"\tswitch ( uart[ 0 ] )\n00023a   1283     bcf     0x03, 0x5        \tBANKSEL\t_uart\n00023b   1303     bcf     0x03, 0x6        \n00023c   0860     movf    0x60, 0x0        \tMOVF\t(_uart + 0),W\n00023d   1283     bcf     0x03, 0x5        \tBANKSEL\tr0x1018\n00023e   1703     bsf     0x03, 0x6        \n00023f   00b9     movwf   0x39             \tMOVWF\tr0x1018\n000240   3a03     xorlw   0x03             \tXORLW\t0x03\n000241   1903     btfsc   0x03, 0x2        \tBTFSC\tSTATUS,2\n000242   2a50     goto    0x0250           \tGOTO\t_00269_DS_\n000243   0839     movf    0x39, 0x0        \tMOVF\tr0x1018,W\n000244   3a05     xorlw   0x05             \tXORLW\t0x05\n000245   1903     btfsc   0x03, 0x2        \tBTFSC\tSTATUS,2\n000246   2a64     goto    0x0264           \tGOTO\t_00272_DS_\n000247   0839     movf    0x39, 0x0        \tMOVF\tr0x1018,W\n000248   3a07     xorlw   0x07             \tXORLW\t0x07\n000249   1903     btfsc   0x03, 0x2        \tBTFSC\tSTATUS,2\n00024a   2a71     goto    0x0271           \tGOTO\t_00273_DS_\n00024b   0839     movf    0x39, 0x0        \tMOVF\tr0x1018,W\n00024c   3a09     xorlw   0x09             \tXORLW\t0x09\n00024d   1903     btfsc   0x03, 0x2        \tBTFSC\tSTATUS,2\n00024e   2a90     goto    0x0290           \tGOTO\t_00274_DS_\n00024f   2aa1     goto    0x02a1           \tGOTO\t_00286_DS_\n                                           _00269_DS_:\n                                           ;\t.line\t335; \"main.c\"\tuart[ 1 ] &= 0x7F;  //128 max\n000250   1283     bcf     0x03, 0x5        \tBANKSEL\t_uart\n000251   1303     bcf     0x03, 0x6        \n000252   0861     movf    0x61, 0x0        \tMOVF\t(_uart + 1),W\n000253   1283     bcf     0x03, 0x5        \tBANKSEL\tr0x1018\n000254   1703     bsf     0x03, 0x6        \n000255   00b9     movwf   0x39             \tMOVWF\tr0x1018\n000256   13b9     bcf     0x39, 0x7        \tBCF\tr0x1018,7\n                                           ;;/home/sdcc-builder/build/sdcc-build/orig/sdcc/src/pic14/gen.c:6828: size=0, offset=0, AOP_TYPE(res)=8\n000257   0839     movf    0x39, 0x0        \tMOVF\tr0x1018,W\n000258   1283     bcf     0x03, 0x5        \tBANKSEL\t_uart\n000259   1303     bcf     0x03, 0x6        \n00025a   00e1     movwf   0x61             \tMOVWF\t(_uart + 1)\n                                           ;\t.line\t336; \"main.c\"\tif ( uart_id == 5 )\n00025b   1283     bcf     0x03, 0x5        \tBANKSEL\t_uart_id\n00025c   1303     bcf     0x03, 0x6        \n00025d   0859     movf    0x59, 0x0        \tMOVF\t_uart_id,W\n00025e   3a05     xorlw   0x05             \tXORLW\t0x05\n00025f   1d03     btfss   0x03, 0x2        \tBTFSS\tSTATUS,2\n000260   2aa1     goto    0x02a1           \tGOTO\t_00286_DS_\n                                           ;\t.line\t338; \"main.c\"\teeprom_write();\n                                           \tPAGESEL\t_eeprom_write\n000261   20ad     call    0x00ad           \tCALL\t_eeprom_write\n                                           \tPAGESEL\t$\n                                           ;\t.line\t339; \"main.c\"\tsend_eeprom_value_to_host();\n                                           \tPAGESEL\t_send_eeprom_value_to_host\n000262   245d     call    0x045d           \tCALL\t_send_eeprom_value_to_host\n                                           \tPAGESEL\t$\n                                           ;\t.line\t341; \"main.c\"\tbreak;\n000263   2aa1     goto    0x02a1           \tGOTO\t_00286_DS_\n                                           _00272_DS_:\n                                           ;\t.line\t346; \"main.c\"\tuart[ 1 ] &= 0x7F;  //128 max\n000264   1283     bcf     0x03, 0x5        \tBANKSEL\t_uart\n000265   1303     bcf     0x03, 0x6        \n000266   0861     movf    0x61, 0x0        \tMOVF\t(_uart + 1),W\n000267   1283     bcf     0x03, 0x5        \tBANKSEL\tr0x1018\n000268   1703     bsf     0x03, 0x6        \n000269   00b9     movwf   0x39             \tMOVWF\tr0x1018\n00026a   13b9     bcf     0x39, 0x7        \tBCF\tr0x1018,7\n                                           ;;/home/sdcc-builder/build/sdcc-build/orig/sdcc/src/pic14/gen.c:6828: size=0, offset=0, AOP_TYPE(res)=8\n00026b   0839     movf    0x39, 0x0        \tMOVF\tr0x1018,W\n00026c   1283     bcf     0x03, 0x5        \tBANKSEL\t_uart\n00026d   1303     bcf     0x03, 0x6        \n00026e   00e1     movwf   0x61             \tMOVWF\t(_uart + 1)\n                                           ;\t.line\t347; \"main.c\"\tsend_eeprom_value_to_host();\n                                           \tPAGESEL\t_send_eeprom_value_to_host\n00026f   245d     call    0x045d           \tCALL\t_send_eeprom_value_to_host\n                                           \tPAGESEL\t$\n                                           ;\t.line\t348; \"main.c\"\tbreak;\n000270   2aa1     goto    0x02a1           \tGOTO\t_00286_DS_\n                                           _00273_DS_:\n                                           ;\t.line\t352; \"main.c\"\tleds( uart[ 1 ] );\n000271   1283     bcf     0x03, 0x5        \tBANKSEL\t_uart\n000272   1303     bcf     0x03, 0x6        \n000273   0861     movf    0x61, 0x0        \tMOVF\t(_uart + 1),W\n000274   1283     bcf     0x03, 0x5        \tBANKSEL\tr0x1018\n000275   1703     bsf     0x03, 0x6        \n000276   00b9     movwf   0x39             \tMOVWF\tr0x1018\n                                           \tPAGESEL\t_leds\n000277   20e6     call    0x00e6           \tCALL\t_leds\n                                           \tPAGESEL\t$\n                                           ;\t.line\t353; \"main.c\"\tleds_set_end( uart[ 2 ] );\n000278   1283     bcf     0x03, 0x5        \tBANKSEL\t_uart\n000279   1303     bcf     0x03, 0x6        \n00027a   0862     movf    0x62, 0x0        \tMOVF\t(_uart + 2),W\n00027b   1283     bcf     0x03, 0x5        \tBANKSEL\tr0x1018\n00027c   1703     bsf     0x03, 0x6        \n00027d   00b9     movwf   0x39             \tMOVWF\tr0x1018\n                                           \tPAGESEL\t_leds_set_end\n00027e   20df     call    0x00df           \tCALL\t_leds_set_end\n                                           \tPAGESEL\t$\n                                           ;\t.line\t354; \"main.c\"\tuart[ 3 ]--;\n00027f   1283     bcf     0x03, 0x5        \tBANKSEL\t_uart\n000280   1303     bcf     0x03, 0x6        \n000281   0363     decf    0x63, 0x0        \tDECF\t(_uart + 3),W\n000282   1283     bcf     0x03, 0x5        \tBANKSEL\tr0x1018\n000283   1703     bsf     0x03, 0x6        \n000284   00b9     movwf   0x39             \tMOVWF\tr0x1018\n000285   1283     bcf     0x03, 0x5        \tBANKSEL\t_uart\n000286   1303     bcf     0x03, 0x6        \n000287   00e3     movwf   0x63             \tMOVWF\t(_uart + 3)\n                                           ;\t.line\t355; \"main.c\"\tserie_counter = uart[ 3 ];\n000288   1283     bcf     0x03, 0x5        \tBANKSEL\tr0x1018\n000289   1703     bsf     0x03, 0x6        \n00028a   0839     movf    0x39, 0x0        \tMOVF\tr0x1018,W\n00028b   1283     bcf     0x03, 0x5        \tBANKSEL\t_serie_counter\n00028c   1303     bcf     0x03, 0x6        \n00028d   00dc     movwf   0x5c             \tMOVWF\t_serie_counter\n                                           ;\t.line\t356; \"main.c\"\tfreq_mesure1();\n                                           \tPAGESEL\t_freq_mesure1\n00028e   249a     call    0x049a           \tCALL\t_freq_mesure1\n                                           \tPAGESEL\t$\n                                           ;\t.line\t357; \"main.c\"\tbreak;\n00028f   2aa1     goto    0x02a1           \tGOTO\t_00286_DS_\n                                           _00274_DS_:\n                                           ;\t.line\t361; \"main.c\"\tleds( uart[ 1 ] );\n000290   1283     bcf     0x03, 0x5        \tBANKSEL\t_uart\n000291   1303     bcf     0x03, 0x6        \n000292   0861     movf    0x61, 0x0        \tMOVF\t(_uart + 1),W\n000293   1283     bcf     0x03, 0x5        \tBANKSEL\tr0x1018\n000294   1703     bsf     0x03, 0x6        \n000295   00b9     movwf   0x39             \tMOVWF\tr0x1018\n                                           \tPAGESEL\t_leds\n000296   20e6     call    0x00e6           \tCALL\t_leds\n                                           \tPAGESEL\t$\n                                           ;\t.line\t362; \"main.c\"\tleds_set_end( uart[ 2 ] );\n000297   1283     bcf     0x03, 0x5        \tBANKSEL\t_uart\n000298   1303     bcf     0x03, 0x6        \n000299   0862     movf    0x62, 0x0        \tMOVF\t(_uart + 2),W\n00029a   1283     bcf     0x03, 0x5        \tBANKSEL\tr0x1018\n00029b   1703     bsf     0x03, 0x6        \n00029c   00b9     movwf   0x39             \tMOVWF\tr0x1018\n                                           \tPAGESEL\t_leds_set_end\n00029d   20df     call    0x00df           \tCALL\t_leds_set_end\n                                           \tPAGESEL\t$\n                                           ;\t.line\t363; \"main.c\"\tds18b20_get_temperature();\n                                           \tPAGESEL\t_ds18b20_get_temperature\n00029e   2145     call    0x0145           \tCALL\t_ds18b20_get_temperature\n                                           \tPAGESEL\t$\n                                           ;\t.line\t364; \"main.c\"\tsend_temperature();\n                                           \tPAGESEL\t_send_temperature\n00029f   23da     call    0x03da           \tCALL\t_send_temperature\n                                           \tPAGESEL\t$\n                                           ;\t.line\t365; \"main.c\"\tleds_over();      \n                                           \tPAGESEL\t_leds_over\n0002a0   20e3     call    0x00e3           \tCALL\t_leds_over\n                                           \tPAGESEL\t$\n                                           _00286_DS_:\n                                           ;\t.line\t370; \"main.c\"\tfor ( i = 0; i < UART_PACKET_SIZE; i++ )\n0002a1   1283     bcf     0x03, 0x5        \tBANKSEL\tr0x1018\n0002a2   1703     bsf     0x03, 0x6        \n0002a3   01b9     clrf    0x39             \tCLRF\tr0x1018\n                                           _00277_DS_:\n                                           ;\t.line\t371; \"main.c\"\tuart[ i ] = 0;\n0002a4   1283     bcf     0x03, 0x5        \tBANKSEL\tr0x1018\n0002a5   1703     bsf     0x03, 0x6        \n0002a6   0839     movf    0x39, 0x0        \tMOVF\tr0x1018,W\n0002a7   3e60     addlw   0x60             \tADDLW\t(_uart + 0)\n0002a8   00ba     movwf   0x3a             \tMOVWF\tr0x1019\n0002a9   3000     movlw   0x00             \tMOVLW\thigh (_uart + 0)\n0002aa   1803     btfsc   0x03, 0x0        \tBTFSC\tSTATUS,0\n0002ab   3e01     addlw   0x01             \tADDLW\t0x01\n0002ac   00bb     movwf   0x3b             \tMOVWF\tr0x101A\n0002ad   083a     movf    0x3a, 0x0        \tMOVF\tr0x1019,W\n0002ae   1283     bcf     0x03, 0x5        \tBANKSEL\tFSR\n0002af   1303     bcf     0x03, 0x6        \n0002b0   0084     movwf   0x04             \tMOVWF\tFSR\n0002b1   1383     bcf     0x03, 0x7        \tBCF\tSTATUS,7\n0002b2   1283     bcf     0x03, 0x5        \tBANKSEL\tr0x101A\n0002b3   1703     bsf     0x03, 0x6        \n0002b4   183b     btfsc   0x3b, 0x0        \tBTFSC\tr0x101A,0\n0002b5   1783     bsf     0x03, 0x7        \tBSF\tSTATUS,7\n0002b6   3000     movlw   0x00             \tMOVLW\t0x00\n0002b7   1283     bcf     0x03, 0x5        \tBANKSEL\tINDF\n0002b8   1303     bcf     0x03, 0x6        \n0002b9   0080     movwf   0x00             \tMOVWF\tINDF\n                                           ;\t.line\t370; \"main.c\"\tfor ( i = 0; i < UART_PACKET_SIZE; i++ )\n0002ba   1283     bcf     0x03, 0x5        \tBANKSEL\tr0x1018\n0002bb   1703     bsf     0x03, 0x6        \n0002bc   0ab9     incf    0x39, 0x1        \tINCF\tr0x1018,F\n                                           ;;unsigned compare: left < lit(0x8=8), size=1\n0002bd   3008     movlw   0x08             \tMOVLW\t0x08\n0002be   0239     subwf   0x39, 0x0        \tSUBWF\tr0x1018,W\n0002bf   1c03     btfss   0x03, 0x0        \tBTFSS\tSTATUS,0\n0002c0   2aa4     goto    0x02a4           \tGOTO\t_00277_DS_\n                                           ;;genSkipc:3307: created from rifx:00000000047A5780\n                                           ;\t.line\t372; \"main.c\"\tuart_id = 0;\n0002c1   1283     bcf     0x03, 0x5        \tBANKSEL\t_uart_id\n0002c2   1303     bcf     0x03, 0x6        \n0002c3   01d9     clrf    0x59             \tCLRF\t_uart_id\n                                           ;\t.line\t373; \"main.c\"\tRX_FULL = 0;\n0002c4   1283     bcf     0x03, 0x5        \tBANKSEL\t_b\n0002c5   1303     bcf     0x03, 0x6        \n0002c6   1068     bcf     0x68, 0x0        \tBCF\t_b,0\n                                           ;\t.line\t374; \"main.c\"\t}\n0002c7   0008     return                   \tRETURN\t\n                                           ; exit point of _uart_rx_packet\n\n                                           ;***\n                                           ;  pBlock Stats: dbName = C\n                                           ;***\n                                           ;has an exit\n                                           ;functions called:\n                                           ;   _answer\n                                           ;   _answer\n                                           ;1 compiler assigned register :\n                                           ;   r0x1017\n                                           ;; Starting pCode block\n                                           S_main__send_temperature\tcode\n                                           _send_temperature:\n                                           ; 2 exit points\n                                           ;;/home/sdcc-builder/build/sdcc-build/orig/sdcc/src/pic14/gen.c:6828: size=0, offset=0, AOP_TYPE(res)=8\n                                           ;\t.line\t320; \"main.c\"\tuart[ 0 ] = 0x0A;\n0003da   300a     movlw   0x0a             \tMOVLW\t0x0a\n0003db   1283     bcf     0x03, 0x5        \tBANKSEL\t_uart\n0003dc   1303     bcf     0x03, 0x6        \n0003dd   00e0     movwf   0x60             \tMOVWF\t(_uart + 0)\n                                           ;\t.line\t321; \"main.c\"\tuart[ 1 ] = temperature[1];\n0003de   1283     bcf     0x03, 0x5        \tBANKSEL\t_temperature\n0003df   1303     bcf     0x03, 0x6        \n0003e0   086b     movf    0x6b, 0x0        \tMOVF\t(_temperature + 1),W\n0003e1   1283     bcf     0x03, 0x5        \tBANKSEL\tr0x1017\n0003e2   1703     bsf     0x03, 0x6        \n0003e3   00b8     movwf   0x38             \tMOVWF\tr0x1017\n0003e4   1283     bcf     0x03, 0x5        \tBANKSEL\t_uart\n0003e5   1303     bcf     0x03, 0x6        \n0003e6   00e1     movwf   0x61             \tMOVWF\t(_uart + 1)\n                                           ;\t.line\t322; \"main.c\"\tuart[ 2 ] = temperature[0];\n0003e7   1283     bcf     0x03, 0x5        \tBANKSEL\t_temperature\n0003e8   1303     bcf     0x03, 0x6        \n0003e9   086a     movf    0x6a, 0x0        \tMOVF\t(_temperature + 0),W\n0003ea   1283     bcf     0x03, 0x5        \tBANKSEL\tr0x1017\n0003eb   1703     bsf     0x03, 0x6        \n0003ec   00b8     movwf   0x38             \tMOVWF\tr0x1017\n0003ed   1283     bcf     0x03, 0x5        \tBANKSEL\t_uart\n0003ee   1303     bcf     0x03, 0x6        \n0003ef   00e2     movwf   0x62             \tMOVWF\t(_uart + 2)\n                                           ;;/home/sdcc-builder/build/sdcc-build/orig/sdcc/src/pic14/gen.c:6828: size=0, offset=0, AOP_TYPE(res)=8\n                                           ;\t.line\t323; \"main.c\"\tuart[ 3 ] = 0xFF;\n0003f0   30ff     movlw   0xff             \tMOVLW\t0xff\n                                           ;\t.line\t324; \"main.c\"\tuart[ 4 ] = 0xFF;\n0003f1   00e3     movwf   0x63             \tMOVWF\t(_uart + 3)\n0003f2   00e4     movwf   0x64             \tMOVWF\t(_uart + 4)\n                                           ;\t.line\t325; \"main.c\"\tanswer( 5 );\n0003f3   3005     movlw   0x05             \tMOVLW\t0x05\n                                           \tPAGESEL\t_answer\n0003f4   2377     call    0x0377           \tCALL\t_answer\n                                           \tPAGESEL\t$\n                                           ;\t.line\t326; \"main.c\"\t}\n0003f5   0008     return                   \tRETURN\t\n                                           ; exit point of _send_temperature\n\n                                           ;***\n                                           ;  pBlock Stats: dbName = C\n                                           ;***\n                                           ;has an exit\n                                           ;functions called:\n                                           ;   _eeprom_read\n                                           ;   _answer\n                                           ;   _eeprom_read\n                                           ;   _answer\n                                           ;1 compiler assigned register :\n                                           ;   r0x1017\n                                           ;; Starting pCode block\n                                           S_main__send_eeprom_value_to_host\tcode\n                                           _send_eeprom_value_to_host:\n                                           ; 2 exit points\n                                           ;;/home/sdcc-builder/build/sdcc-build/orig/sdcc/src/pic14/gen.c:6828: size=0, offset=0, AOP_TYPE(res)=8\n                                           ;\t.line\t311; \"main.c\"\tuart[ 0 ] = 0x04;\n00045d   3004     movlw   0x04             \tMOVLW\t0x04\n00045e   1283     bcf     0x03, 0x5        \tBANKSEL\t_uart\n00045f   1303     bcf     0x03, 0x6        \n000460   00e0     movwf   0x60             \tMOVWF\t(_uart + 0)\n                                           ;\t.line\t312; \"main.c\"\tuart[ 2 ] = eeprom_read( uart[ 1 ] );\n000461   0861     movf    0x61, 0x0        \tMOVF\t(_uart + 1),W\n000462   1283     bcf     0x03, 0x5        \tBANKSEL\tr0x1017\n000463   1703     bsf     0x03, 0x6        \n000464   00b8     movwf   0x38             \tMOVWF\tr0x1017\n                                           \tPAGESEL\t_eeprom_read\n000465   20a7     call    0x00a7           \tCALL\t_eeprom_read\n                                           \tPAGESEL\t$\n000466   1283     bcf     0x03, 0x5        \tBANKSEL\tr0x1017\n000467   1703     bsf     0x03, 0x6        \n000468   00b8     movwf   0x38             \tMOVWF\tr0x1017\n000469   1283     bcf     0x03, 0x5        \tBANKSEL\t_uart\n00046a   1303     bcf     0x03, 0x6        \n00046b   00e2     movwf   0x62             \tMOVWF\t(_uart + 2)\n                                           ;;/home/sdcc-builder/build/sdcc-build/orig/sdcc/src/pic14/gen.c:6828: size=0, offset=0, AOP_TYPE(res)=8\n                                           ;\t.line\t313; \"main.c\"\tuart[ 3 ] = 0xFF;\n00046c   30ff     movlw   0xff             \tMOVLW\t0xff\n                                           ;\t.line\t314; \"main.c\"\tuart[ 4 ] = 0xFF;\n00046d   00e3     movwf   0x63             \tMOVWF\t(_uart + 3)\n00046e   00e4     movwf   0x64             \tMOVWF\t(_uart + 4)\n                                           ;\t.line\t315; \"main.c\"\tanswer( 5 );\n00046f   3005     movlw   0x05             \tMOVLW\t0x05\n                                           \tPAGESEL\t_answer\n000470   2377     call    0x0377           \tCALL\t_answer\n                                           \tPAGESEL\t$\n                                           ;\t.line\t316; \"main.c\"\t}\n000471   0008     return                   \tRETURN\t\n                                           ; exit point of _send_eeprom_value_to_host\n\n                                           ;***\n                                           ;  pBlock Stats: dbName = C\n                                           ;***\n                                           ;has an exit\n                                           ;functions called:\n                                           ;   _SendByteSerially\n                                           ;   _SendByteSerially\n                                           ;5 compiler assigned registers:\n                                           ;   r0x1012\n                                           ;   r0x1013\n                                           ;   r0x1014\n                                           ;   r0x1015\n                                           ;   r0x1016\n                                           ;; Starting pCode block\n                                           S_main__answer\tcode\n                                           _answer:\n                                           ; 2 exit points\n                                           ;\t.line\t302; \"main.c\"\tvoid answer( uint8_t N )\n000377   1283     bcf     0x03, 0x5        \tBANKSEL\tr0x1012\n000378   1703     bsf     0x03, 0x6        \n000379   00aa     movwf   0x2a             \tMOVWF\tr0x1012\n                                           ;\t.line\t305; \"main.c\"\tfor ( i = 0; i < N; i++ )\n00037a   01b5     clrf    0x35             \tCLRF\tr0x1013\n                                           _00254_DS_:\n00037b   1283     bcf     0x03, 0x5        \tBANKSEL\tr0x1012\n00037c   1703     bsf     0x03, 0x6        \n00037d   082a     movf    0x2a, 0x0        \tMOVF\tr0x1012,W\n00037e   0235     subwf   0x35, 0x0        \tSUBWF\tr0x1013,W\n00037f   1803     btfsc   0x03, 0x0        \tBTFSC\tSTATUS,0\n000380   2b99     goto    0x0399           \tGOTO\t_00256_DS_\n                                           ;;genSkipc:3307: created from rifx:00000000047A5780\n                                           ;\t.line\t306; \"main.c\"\tSendByteSerially( uart[ i ] );\n000381   0835     movf    0x35, 0x0        \tMOVF\tr0x1013,W\n000382   3e60     addlw   0x60             \tADDLW\t(_uart + 0)\n000383   00b6     movwf   0x36             \tMOVWF\tr0x1014\n000384   3000     movlw   0x00             \tMOVLW\thigh (_uart + 0)\n000385   1803     btfsc   0x03, 0x0        \tBTFSC\tSTATUS,0\n000386   3e01     addlw   0x01             \tADDLW\t0x01\n000387   00b7     movwf   0x37             \tMOVWF\tr0x1015\n000388   0836     movf    0x36, 0x0        \tMOVF\tr0x1014,W\n000389   1283     bcf     0x03, 0x5        \tBANKSEL\tFSR\n00038a   1303     bcf     0x03, 0x6        \n00038b   0084     movwf   0x04             \tMOVWF\tFSR\n00038c   1383     bcf     0x03, 0x7        \tBCF\tSTATUS,7\n00038d   1283     bcf     0x03, 0x5        \tBANKSEL\tr0x1015\n00038e   1703     bsf     0x03, 0x6        \n00038f   1837     btfsc   0x37, 0x0        \tBTFSC\tr0x1015,0\n000390   1783     bsf     0x03, 0x7        \tBSF\tSTATUS,7\n000391   1283     bcf     0x03, 0x5        \tBANKSEL\tINDF\n000392   1303     bcf     0x03, 0x6        \n000393   0800     movf    0x00, 0x0        \tMOVF\tINDF,W\n                                           ;;1\tMOVWF\tr0x1016\n                                           \tPAGESEL\t_SendByteSerially\n000394   2472     call    0x0472           \tCALL\t_SendByteSerially\n                                           \tPAGESEL\t$\n                                           ;\t.line\t305; \"main.c\"\tfor ( i = 0; i < N; i++ )\n000395   1283     bcf     0x03, 0x5        \tBANKSEL\tr0x1013\n000396   1703     bsf     0x03, 0x6        \n000397   0ab5     incf    0x35, 0x1        \tINCF\tr0x1013,F\n000398   2b7b     goto    0x037b           \tGOTO\t_00254_DS_\n                                           _00256_DS_:\n                                           ;\t.line\t307; \"main.c\"\t}\n000399   0008     return                   \tRETURN\t\n                                           ; exit point of _answer\n\n                                           ;***\n                                           ;  pBlock Stats: dbName = C\n                                           ;***\n                                           ;has an exit\n                                           ;functions called:\n                                           ;   __gptrget1\n                                           ;   _SendByteSerially\n                                           ;   __gptrget1\n                                           ;   _SendByteSerially\n                                           ;6 compiler assigned registers:\n                                           ;   r0x101B\n                                           ;   STK00\n                                           ;   r0x101C\n                                           ;   STK01\n                                           ;   r0x101D\n                                           ;   r0x101E\n                                           ;; Starting pCode block\n                                           S_main__SendStringSerially\tcode\n                                           _SendStringSerially:\n                                           ; 2 exit points\n                                           ;\t.line\t293; \"main.c\"\tvoid SendStringSerially( const unsigned char* st )\n0003bc   1283     bcf     0x03, 0x5        \tBANKSEL\tr0x101B\n0003bd   1703     bsf     0x03, 0x6        \n0003be   00b3     movwf   0x33             \tMOVWF\tr0x101B\n0003bf   087f     movf    0x7f, 0x0        \tMOVF\tSTK00,W\n0003c0   00b2     movwf   0x32             \tMOVWF\tr0x101C\n0003c1   087e     movf    0x7e, 0x0        \tMOVF\tSTK01,W\n0003c2   00b1     movwf   0x31             \tMOVWF\tr0x101D\n                                           _00244_DS_:\n                                           ;\t.line\t295; \"main.c\"\twhile ( *st )\n0003c3   1283     bcf     0x03, 0x5        \tBANKSEL\tr0x101D\n0003c4   1703     bsf     0x03, 0x6        \n0003c5   0831     movf    0x31, 0x0        \tMOVF\tr0x101D,W\n0003c6   00fe     movwf   0x7e             \tMOVWF\tSTK01\n0003c7   0832     movf    0x32, 0x0        \tMOVF\tr0x101C,W\n0003c8   00ff     movwf   0x7f             \tMOVWF\tSTK00\n0003c9   0833     movf    0x33, 0x0        \tMOVF\tr0x101B,W\n                                           \tPAGESEL\t__gptrget1\n0003ca   218b     call    0x018b           \tCALL\t__gptrget1\n                                           \tPAGESEL\t$\n0003cb   1283     bcf     0x03, 0x5        \tBANKSEL\tr0x101E\n0003cc   1703     bsf     0x03, 0x6        \n0003cd   00b4     movwf   0x34             \tMOVWF\tr0x101E\n0003ce   0834     movf    0x34, 0x0        \tMOVF\tr0x101E,W\n0003cf   1903     btfsc   0x03, 0x2        \tBTFSC\tSTATUS,2\n0003d0   2bd9     goto    0x03d9           \tGOTO\t_00247_DS_\n                                           ;\t.line\t296; \"main.c\"\tSendByteSerially( *st++ );\n0003d1   0ab1     incf    0x31, 0x1        \tINCF\tr0x101D,F\n0003d2   1903     btfsc   0x03, 0x2        \tBTFSC\tSTATUS,2\n0003d3   0ab2     incf    0x32, 0x1        \tINCF\tr0x101C,F\n0003d4   1903     btfsc   0x03, 0x2        \tBTFSC\tSTATUS,2\n0003d5   0ab3     incf    0x33, 0x1        \tINCF\tr0x101B,F\n0003d6   0834     movf    0x34, 0x0        \tMOVF\tr0x101E,W\n                                           \tPAGESEL\t_SendByteSerially\n0003d7   2472     call    0x0472           \tCALL\t_SendByteSerially\n                                           \tPAGESEL\t$\n0003d8   2bc3     goto    0x03c3           \tGOTO\t_00244_DS_\n                                           _00247_DS_:\n                                           ;\t.line\t297; \"main.c\"\t}\n0003d9   0008     return                   \tRETURN\t\n                                           ; exit point of _SendStringSerially\n\n                                           ;***\n                                           ;  pBlock Stats: dbName = C\n                                           ;***\n                                           ;has an exit\n                                           ;functions called:\n                                           ;   _uart_freq\n                                           ;   _freq_mesure\n                                           ;   _uart_freq\n                                           ;   _uart_freq\n                                           ;   _freq_mesure\n                                           ;   _uart_freq\n                                           ;2 compiler assigned registers:\n                                           ;   r0x1022\n                                           ;   r0x1023\n                                           ;; Starting pCode block\n                                           S_main__timer1_int\tcode\n                                           _timer1_int:\n                                           ; 2 exit points\n                                           ;\t.line\t251; \"main.c\"\tif ( timer0_prescaler == 0 )\n00039a   1283     bcf     0x03, 0x5        \tBANKSEL\t_timer0_prescaler\n00039b   1303     bcf     0x03, 0x6        \n00039c   085d     movf    0x5d, 0x0        \tMOVF\t_timer0_prescaler,W\n00039d   1d03     btfss   0x03, 0x2        \tBTFSS\tSTATUS,2\n00039e   2ba1     goto    0x03a1           \tGOTO\t_00207_DS_\n                                           ;\t.line\t252; \"main.c\"\tuart_freq();\n                                           \tPAGESEL\t_uart_freq\n00039f   2346     call    0x0346           \tCALL\t_uart_freq\n                                           \tPAGESEL\t$\n0003a0   2bb8     goto    0x03b8           \tGOTO\t_00208_DS_\n                                           _00207_DS_:\n                                           ;\t.line\t253; \"main.c\"\telse if ( timer0_overflows < 819 )\n0003a1   1283     bcf     0x03, 0x5        \tBANKSEL\t_timer0_overflows\n0003a2   1303     bcf     0x03, 0x6        \n0003a3   085a     movf    0x5a, 0x0        \tMOVF\t_timer0_overflows,W\n0003a4   1283     bcf     0x03, 0x5        \tBANKSEL\tr0x1022\n0003a5   1703     bsf     0x03, 0x6        \n0003a6   00ac     movwf   0x2c             \tMOVWF\tr0x1022\n0003a7   1283     bcf     0x03, 0x5        \tBANKSEL\t_timer0_overflows\n0003a8   1303     bcf     0x03, 0x6        \n0003a9   085b     movf    0x5b, 0x0        \tMOVF\t(_timer0_overflows + 1),W\n0003aa   1283     bcf     0x03, 0x5        \tBANKSEL\tr0x1023\n0003ab   1703     bsf     0x03, 0x6        \n0003ac   00ad     movwf   0x2d             \tMOVWF\tr0x1023\n                                           ;;unsigned compare: left < lit(0x333=819), size=2\n0003ad   3003     movlw   0x03             \tMOVLW\t0x03\n0003ae   022d     subwf   0x2d, 0x0        \tSUBWF\tr0x1023,W\n0003af   1d03     btfss   0x03, 0x2        \tBTFSS\tSTATUS,2\n0003b0   2bb3     goto    0x03b3           \tGOTO\t_00219_DS_\n0003b1   3033     movlw   0x33             \tMOVLW\t0x33\n0003b2   022c     subwf   0x2c, 0x0        \tSUBWF\tr0x1022,W\n                                           _00219_DS_:\n0003b3   1803     btfsc   0x03, 0x0        \tBTFSC\tSTATUS,0\n0003b4   2bb7     goto    0x03b7           \tGOTO\t_00204_DS_\n                                           ;;genSkipc:3307: created from rifx:00000000047A5780\n                                           ;\t.line\t254; \"main.c\"\tfreq_mesure();  // freq_mesure does always prescaler decrement\n                                           \tPAGESEL\t_freq_mesure\n0003b5   2412     call    0x0412           \tCALL\t_freq_mesure\n                                           \tPAGESEL\t$\n0003b6   2bb8     goto    0x03b8           \tGOTO\t_00208_DS_\n                                           _00204_DS_:\n                                           ;\t.line\t256; \"main.c\"\tuart_freq();\n                                           \tPAGESEL\t_uart_freq\n0003b7   2346     call    0x0346           \tCALL\t_uart_freq\n                                           \tPAGESEL\t$\n                                           _00208_DS_:\n                                           ;\t.line\t257; \"main.c\"\tTIMER1_INTERRUPT = 0;\n0003b8   1283     bcf     0x03, 0x5        \tBANKSEL\t_b\n0003b9   1303     bcf     0x03, 0x6        \n0003ba   10e8     bcf     0x68, 0x1        \tBCF\t_b,1\n                                           ;\t.line\t258; \"main.c\"\t}\n0003bb   0008     return                   \tRETURN\t\n                                           ; exit point of _timer1_int\n\n                                           ;***\n                                           ;  pBlock Stats: dbName = C\n                                           ;***\n                                           ;has an exit\n                                           ;functions called:\n                                           ;   _answer\n                                           ;   _freq_mesure_init\n                                           ;   _leds_over\n                                           ;   _answer\n                                           ;   _freq_mesure_init\n                                           ;   _leds_over\n                                           ;3 compiler assigned registers:\n                                           ;   r0x101F\n                                           ;   r0x1020\n                                           ;   r0x1021\n                                           ;; Starting pCode block\n                                           S_main__uart_freq\tcode\n                                           _uart_freq:\n                                           ; 2 exit points\n                                           ;;/home/sdcc-builder/build/sdcc-build/orig/sdcc/src/pic14/gen.c:6828: size=0, offset=0, AOP_TYPE(res)=8\n                                           ;\t.line\t220; \"main.c\"\tuart[ 0 ] = 0x06;\n000346   3006     movlw   0x06             \tMOVLW\t0x06\n000347   1283     bcf     0x03, 0x5        \tBANKSEL\t_uart\n000348   1303     bcf     0x03, 0x6        \n000349   00e0     movwf   0x60             \tMOVWF\t(_uart + 0)\n                                           ;;/home/sdcc-builder/build/sdcc-build/orig/sdcc/src/pic14/gen.c:6828: size=0, offset=0, AOP_TYPE(res)=8\n                                           ;\t.line\t221; \"main.c\"\tuart[ 1 ] = timer0_prescaler;\n00034a   1283     bcf     0x03, 0x5        \tBANKSEL\t_timer0_prescaler\n00034b   1303     bcf     0x03, 0x6        \n00034c   085d     movf    0x5d, 0x0        \tMOVF\t_timer0_prescaler,W\n00034d   1283     bcf     0x03, 0x5        \tBANKSEL\t_uart\n00034e   1303     bcf     0x03, 0x6        \n00034f   00e1     movwf   0x61             \tMOVWF\t(_uart + 1)\n                                           ;;/home/sdcc-builder/build/sdcc-build/orig/sdcc/src/pic14/gen.c:6828: size=0, offset=0, AOP_TYPE(res)=8\n                                           ;\t.line\t222; \"main.c\"\tuart[ 2 ] = TMR0;\n000350   1283     bcf     0x03, 0x5        \tBANKSEL\t_TMR0\n000351   1303     bcf     0x03, 0x6        \n000352   0801     movf    0x01, 0x0        \tMOVF\t_TMR0,W\n000353   1283     bcf     0x03, 0x5        \tBANKSEL\t_uart\n000354   1303     bcf     0x03, 0x6        \n000355   00e2     movwf   0x62             \tMOVWF\t(_uart + 2)\n                                           ;\t.line\t223; \"main.c\"\tuart[ 3 ] = ( timer0_overflows >> 8 ) & 0xff;\n000356   1283     bcf     0x03, 0x5        \tBANKSEL\t_timer0_overflows\n000357   1303     bcf     0x03, 0x6        \n000358   085b     movf    0x5b, 0x0        \tMOVF\t(_timer0_overflows + 1),W\n000359   1283     bcf     0x03, 0x5        \tBANKSEL\tr0x101F\n00035a   1703     bsf     0x03, 0x6        \n00035b   00ab     movwf   0x2b             \tMOVWF\tr0x101F\n00035c   1283     bcf     0x03, 0x5        \tBANKSEL\t_uart\n00035d   1303     bcf     0x03, 0x6        \n00035e   00e3     movwf   0x63             \tMOVWF\t(_uart + 3)\n                                           ;\t.line\t224; \"main.c\"\tuart[ 4 ] = timer0_overflows & 0xff;\n00035f   1283     bcf     0x03, 0x5        \tBANKSEL\t_timer0_overflows\n000360   1303     bcf     0x03, 0x6        \n000361   085a     movf    0x5a, 0x0        \tMOVF\t_timer0_overflows,W\n000362   1283     bcf     0x03, 0x5        \tBANKSEL\tr0x101F\n000363   1703     bsf     0x03, 0x6        \n000364   00ab     movwf   0x2b             \tMOVWF\tr0x101F\n000365   1283     bcf     0x03, 0x5        \tBANKSEL\t_uart\n000366   1303     bcf     0x03, 0x6        \n000367   00e4     movwf   0x64             \tMOVWF\t(_uart + 4)\n                                           ;;/home/sdcc-builder/build/sdcc-build/orig/sdcc/src/pic14/gen.c:6828: size=0, offset=0, AOP_TYPE(res)=8\n                                           ;\t.line\t225; \"main.c\"\tuart[ 5 ] = 0xFF;\n000368   30ff     movlw   0xff             \tMOVLW\t0xff\n                                           ;\t.line\t226; \"main.c\"\tuart[ 6 ] = 0xFF;\n000369   00e5     movwf   0x65             \tMOVWF\t(_uart + 5)\n00036a   00e6     movwf   0x66             \tMOVWF\t(_uart + 6)\n                                           ;\t.line\t227; \"main.c\"\tanswer( 7 );\n00036b   3007     movlw   0x07             \tMOVLW\t0x07\n                                           \tPAGESEL\t_answer\n00036c   2377     call    0x0377           \tCALL\t_answer\n                                           \tPAGESEL\t$\n                                           ;\t.line\t228; \"main.c\"\tif ( serie_counter )\n00036d   1283     bcf     0x03, 0x5        \tBANKSEL\t_serie_counter\n00036e   1303     bcf     0x03, 0x6        \n00036f   085c     movf    0x5c, 0x0        \tMOVF\t_serie_counter,W\n000370   1903     btfsc   0x03, 0x2        \tBTFSC\tSTATUS,2\n000371   2b75     goto    0x0375           \tGOTO\t_00196_DS_\n                                           ;\t.line\t230; \"main.c\"\tserie_counter--;\n000372   03dc     decf    0x5c, 0x1        \tDECF\t_serie_counter,F\n                                           ;\t.line\t231; \"main.c\"\tfreq_mesure_init();\n                                           \tPAGESEL\t_freq_mesure_init\n000373   23f6     call    0x03f6           \tCALL\t_freq_mesure_init\n                                           \tPAGESEL\t$\n000374   2b76     goto    0x0376           \tGOTO\t_00198_DS_\n                                           _00196_DS_:\n                                           ;\t.line\t235; \"main.c\"\tleds_over();\n                                           \tPAGESEL\t_leds_over\n000375   20e3     call    0x00e3           \tCALL\t_leds_over\n                                           \tPAGESEL\t$\n                                           _00198_DS_:\n                                           ;\t.line\t237; \"main.c\"\t}\n000376   0008     return                   \tRETURN\t\n                                           ; exit point of _uart_freq\n\n                                           ;***\n                                           ;  pBlock Stats: dbName = C\n                                           ;***\n                                           ;has an exit\n                                           ;functions called:\n                                           ;   _freq_mesure\n                                           ;   _freq_mesure\n                                           ;; Starting pCode block\n                                           S_main__freq_mesure1\tcode\n                                           _freq_mesure1:\n                                           ; 2 exit points\n                                           ;\t.line\t210; \"main.c\"\ttimer0_prescaler = 5;\n00049a   3005     movlw   0x05             \tMOVLW\t0x05\n00049b   1283     bcf     0x03, 0x5        \tBANKSEL\t_timer0_prescaler\n00049c   1303     bcf     0x03, 0x6        \n00049d   00dd     movwf   0x5d             \tMOVWF\t_timer0_prescaler\n                                           ;\t.line\t211; \"main.c\"\tfreq_mesure();\n                                           \tPAGESEL\t_freq_mesure\n00049e   2412     call    0x0412           \tCALL\t_freq_mesure\n                                           \tPAGESEL\t$\n                                           ;\t.line\t212; \"main.c\"\t}\n00049f   0008     return                   \tRETURN\t\n                                           ; exit point of _freq_mesure1\n\n                                           ;***\n                                           ;  pBlock Stats: dbName = C\n                                           ;***\n                                           ;has an exit\n                                           ;functions called:\n                                           ;   __gptrget1\n                                           ;   _SetPrescaler\n                                           ;   _PrescalerOff\n                                           ;   _freq_mesure_init\n                                           ;   __gptrget1\n                                           ;   _SetPrescaler\n                                           ;   _PrescalerOff\n                                           ;   _freq_mesure_init\n                                           ;5 compiler assigned registers:\n                                           ;   r0x1011\n                                           ;   r0x1012\n                                           ;   STK01\n                                           ;   STK00\n                                           ;   r0x1013\n                                           ;; Starting pCode block\n                                           S_main__freq_mesure\tcode\n                                           _freq_mesure:\n                                           ; 2 exit points\n                                           ;\t.line\t201; \"main.c\"\tif ( timer0_prescaler )\n000412   1283     bcf     0x03, 0x5        \tBANKSEL\t_timer0_prescaler\n000413   1303     bcf     0x03, 0x6        \n000414   085d     movf    0x5d, 0x0        \tMOVF\t_timer0_prescaler,W\n000415   1903     btfsc   0x03, 0x2        \tBTFSC\tSTATUS,2\n000416   2c29     goto    0x0429           \tGOTO\t_00185_DS_\n                                           ;\t.line\t202; \"main.c\"\tSetPrescaler( option_reg[ --timer0_prescaler ] );\n000417   03dd     decf    0x5d, 0x1        \tDECF\t_timer0_prescaler,F\n000418   085d     movf    0x5d, 0x0        \tMOVF\t_timer0_prescaler,W\n000419   3ea0     addlw   0xa0             \tADDLW\t(_option_reg + 0)\n00041a   1283     bcf     0x03, 0x5        \tBANKSEL\tr0x1011\n00041b   1703     bsf     0x03, 0x6        \n00041c   00a9     movwf   0x29             \tMOVWF\tr0x1011\n00041d   3004     movlw   0x04             \tMOVLW\thigh (_option_reg + 0)\n00041e   1803     btfsc   0x03, 0x0        \tBTFSC\tSTATUS,0\n00041f   3e01     addlw   0x01             \tADDLW\t0x01\n000420   00aa     movwf   0x2a             \tMOVWF\tr0x1012\n000421   0829     movf    0x29, 0x0        \tMOVF\tr0x1011,W\n000422   00fe     movwf   0x7e             \tMOVWF\tSTK01\n000423   082a     movf    0x2a, 0x0        \tMOVF\tr0x1012,W\n000424   00ff     movwf   0x7f             \tMOVWF\tSTK00\n000425   3080     movlw   0x80             \tMOVLW\t0x80\n                                           \tPAGESEL\t__gptrget1\n000426   218b     call    0x018b           \tCALL\t__gptrget1\n                                           \tPAGESEL\t$\n                                           ;;1\tMOVWF\tr0x1013\n                                           \tPAGESEL\t_SetPrescaler\n000427   20c7     call    0x00c7           \tCALL\t_SetPrescaler\n                                           \tPAGESEL\t$\n000428   2c2a     goto    0x042a           \tGOTO\t_00186_DS_\n                                           _00185_DS_:\n                                           ;\t.line\t204; \"main.c\"\tPrescalerOff();\n                                           \tPAGESEL\t_PrescalerOff\n000429   20cb     call    0x00cb           \tCALL\t_PrescalerOff\n                                           \tPAGESEL\t$\n                                           _00186_DS_:\n                                           ;\t.line\t205; \"main.c\"\tfreq_mesure_init();\n                                           \tPAGESEL\t_freq_mesure_init\n00042a   23f6     call    0x03f6           \tCALL\t_freq_mesure_init\n                                           \tPAGESEL\t$\n                                           ;\t.line\t206; \"main.c\"\t}\n00042b   0008     return                   \tRETURN\t\n                                           ; exit point of _freq_mesure\n\n                                           ;***\n                                           ;  pBlock Stats: dbName = C\n                                           ;***\n                                           ;has an exit\n                                           ;; Starting pCode block\n                                           S_main__freq_mesure_init\tcode\n                                           _freq_mesure_init:\n                                           ; 2 exit points\n                                           ;\t.line\t174; \"main.c\"\tT0SE = 0;  // bit 4 TMR0 Source Edge Select bit 0 = low/high 1 = high/low\n0003f6   1683     bsf     0x03, 0x5        \tBANKSEL\t_OPTION_REGbits\n0003f7   1303     bcf     0x03, 0x6        \n0003f8   1201     bcf     0x01, 0x4        \tBCF\t_OPTION_REGbits,4\n                                           ;\t.line\t175; \"main.c\"\ttimer0_overflows = 0;\n0003f9   1283     bcf     0x03, 0x5        \tBANKSEL\t_timer0_overflows\n0003fa   1303     bcf     0x03, 0x6        \n0003fb   01da     clrf    0x5a             \tCLRF\t_timer0_overflows\n0003fc   01db     clrf    0x5b             \tCLRF\t(_timer0_overflows + 1)\n                                           ;\t.line\t180; \"main.c\"\tT1CKPS1 = 1;  // bits 5-4  Prescaler Rate Select bits\n0003fd   1283     bcf     0x03, 0x5        \tBANKSEL\t_T1CONbits\n0003fe   1303     bcf     0x03, 0x6        \n0003ff   1690     bsf     0x10, 0x5        \tBSF\t_T1CONbits,5\n                                           ;\t.line\t181; \"main.c\"\tT1CKPS0 = 1;\n000400   1610     bsf     0x10, 0x4        \tBSF\t_T1CONbits,4\n                                           ;\t.line\t182; \"main.c\"\tT1OSCEN = 0;  // bit 3 Timer1 Oscillator Enable Control: bit 1=on\n000401   1190     bcf     0x10, 0x3        \tBCF\t_T1CONbits,3\n                                           ;\t.line\t183; \"main.c\"\tNOT_T1SYNC =\n000402   1510     bsf     0x10, 0x2        \tBSF\t_T1CONbits,2\n                                           ;\t.line\t185; \"main.c\"\tTMR1CS =\n000403   1090     bcf     0x10, 0x1        \tBCF\t_T1CONbits,1\n                                           ;\t.line\t187; \"main.c\"\tTMR1IE = 1;\n000404   1683     bsf     0x03, 0x5        \tBANKSEL\t_PIE1bits\n000405   1303     bcf     0x03, 0x6        \n000406   140c     bsf     0x0c, 0x0        \tBSF\t_PIE1bits,0\n                                           ;\t.line\t188; \"main.c\"\tTMR1H = 0;   // preset for timer1 MSB register\n000407   1283     bcf     0x03, 0x5        \tBANKSEL\t_TMR1H\n000408   1303     bcf     0x03, 0x6        \n000409   018f     clrf    0x0f             \tCLRF\t_TMR1H\n                                           ;\t.line\t189; \"main.c\"\tTMR1L = 0;   // preset for timer1 LSB register\n00040a   018e     clrf    0x0e             \tCLRF\t_TMR1L\n                                           ;\t.line\t191; \"main.c\"\tTMR1ON = 1;  // bit 0 enables timer\n00040b   1410     bsf     0x10, 0x0        \tBSF\t_T1CONbits,0\n                                           ;\t.line\t193; \"main.c\"\tTMR0 = 0;\n00040c   0181     clrf    0x01             \tCLRF\t_TMR0\n                                           ;\t.line\t194; \"main.c\"\tT0IE = 1;\n00040d   168b     bsf     0x0b, 0x5        \tBSF\t_INTCONbits,5\n                                           ;\t.line\t196; \"main.c\"\tTRISA3 = 1;  // TRISA3 = 1 enable it as input\n00040e   1683     bsf     0x03, 0x5        \tBANKSEL\t_TRISAbits\n00040f   1303     bcf     0x03, 0x6        \n000410   1585     bsf     0x05, 0x3        \tBSF\t_TRISAbits,3\n                                           ;\t.line\t197; \"main.c\"\t}\n000411   0008     return                   \tRETURN\t\n                                           ; exit point of _freq_mesure_init\n\n                                           ;***\n                                           ;  pBlock Stats: dbName = C\n                                           ;***\n                                           ;has an exit\n                                           ;; Starting pCode block\n                                           S_main__ReceiveByteSerially\tcode\n                                           _ReceiveByteSerially:\n                                           ; 2 exit points\n                                           ;\t.line\t120; \"main.c\"\tif ( OERR )  // If over run error, then reset the receiver\n00048e   1283     bcf     0x03, 0x5        \tBANKSEL\t_RCSTAbits\n00048f   1303     bcf     0x03, 0x6        \n000490   1c98     btfss   0x18, 0x1        \tBTFSS\t_RCSTAbits,1\n000491   2c94     goto    0x0494           \tGOTO\t_00175_DS_\n                                           ;\t.line\t122; \"main.c\"\tCREN = 0;\n000492   1218     bcf     0x18, 0x4        \tBCF\t_RCSTAbits,4\n                                           ;\t.line\t123; \"main.c\"\tCREN = 1;\n000493   1618     bsf     0x18, 0x4        \tBSF\t_RCSTAbits,4\n                                           _00175_DS_:\n                                           ;\t.line\t126; \"main.c\"\twhile ( !RCIF )\n000494   1283     bcf     0x03, 0x5        \tBANKSEL\t_PIR1bits\n000495   1303     bcf     0x03, 0x6        \n000496   1e8c     btfss   0x0c, 0x5        \tBTFSS\t_PIR1bits,5\n000497   2c94     goto    0x0494           \tGOTO\t_00175_DS_\n                                           ;\t.line\t129; \"main.c\"\treturn RCREG;\n000498   081a     movf    0x1a, 0x0        \tMOVF\t_RCREG,W\n                                           ;\t.line\t130; \"main.c\"\t}\n000499   0008     return                   \tRETURN\t\n                                           ; exit point of _ReceiveByteSerially\n\n                                           ;***\n                                           ;  pBlock Stats: dbName = C\n                                           ;***\n                                           ;has an exit\n                                           ;1 compiler assigned register :\n                                           ;   r0x1011\n                                           ;; Starting pCode block\n                                           S_main__SendByteSerially\tcode\n                                           _SendByteSerially:\n                                           ; 2 exit points\n                                           ;\t.line\t111; \"main.c\"\tvoid SendByteSerially( unsigned char Byte )  // Writes a character to the serial port\n000472   1283     bcf     0x03, 0x5        \tBANKSEL\tr0x1011\n000473   1703     bsf     0x03, 0x6        \n000474   00a9     movwf   0x29             \tMOVWF\tr0x1011\n                                           _00168_DS_:\n                                           ;\t.line\t113; \"main.c\"\twhile ( !TXIF )\n000475   1283     bcf     0x03, 0x5        \tBANKSEL\t_PIR1bits\n000476   1303     bcf     0x03, 0x6        \n000477   1e0c     btfss   0x0c, 0x4        \tBTFSS\t_PIR1bits,4\n000478   2c75     goto    0x0475           \tGOTO\t_00168_DS_\n                                           ;\t.line\t115; \"main.c\"\tTXREG = Byte;\n000479   1283     bcf     0x03, 0x5        \tBANKSEL\tr0x1011\n00047a   1703     bsf     0x03, 0x6        \n00047b   0829     movf    0x29, 0x0        \tMOVF\tr0x1011,W\n00047c   1283     bcf     0x03, 0x5        \tBANKSEL\t_TXREG\n00047d   1303     bcf     0x03, 0x6        \n00047e   0099     movwf   0x19             \tMOVWF\t_TXREG\n                                           ;\t.line\t116; \"main.c\"\t}\n00047f   0008     return                   \tRETURN\t\n                                           ; exit point of _SendByteSerially\n\n                                           ;***\n                                           ;  pBlock Stats: dbName = C\n                                           ;***\n                                           ;has an exit\n                                           ;; Starting pCode block\n                                           S_main__uart_init\tcode\n                                           _uart_init:\n                                           ; 2 exit points\n                                           ;\t.line\t92; \"main.c\"\tTRISB2 = 0;  // TX Pin\n00042c   1683     bsf     0x03, 0x5        \tBANKSEL\t_TRISBbits\n00042d   1303     bcf     0x03, 0x6        \n00042e   1106     bcf     0x06, 0x2        \tBCF\t_TRISBbits,2\n                                           ;\t.line\t93; \"main.c\"\tTRISB1 = 1;  // RX Pin\n00042f   1486     bsf     0x06, 0x1        \tBSF\t_TRISBbits,1\n                                           ;\t.line\t94; \"main.c\"\tSPBRG = ( ( _XTAL_FREQ / 16 ) / BAUDRATE ) - 1;\n000430   3014     movlw   0x14             \tMOVLW\t0x14\n000431   0099     movwf   0x19             \tMOVWF\t_SPBRG\n                                           ;\t.line\t95; \"main.c\"\tBRGH = 1;  // Fast baudrate\n000432   1518     bsf     0x18, 0x2        \tBSF\t_TXSTAbits,2\n                                           ;\t.line\t96; \"main.c\"\tSYNC = 0;  // Asynchronous\n000433   1218     bcf     0x18, 0x4        \tBCF\t_TXSTAbits,4\n                                           ;\t.line\t97; \"main.c\"\tSPEN = 1;  // Enable serial port pins\n000434   1283     bcf     0x03, 0x5        \tBANKSEL\t_RCSTAbits\n000435   1303     bcf     0x03, 0x6        \n000436   1798     bsf     0x18, 0x7        \tBSF\t_RCSTAbits,7\n                                           ;\t.line\t98; \"main.c\"\tCREN = 1;  // Enable reception\n000437   1618     bsf     0x18, 0x4        \tBSF\t_RCSTAbits,4\n                                           ;\t.line\t99; \"main.c\"\tSREN = 0;  // No effect\n000438   1298     bcf     0x18, 0x5        \tBCF\t_RCSTAbits,5\n                                           ;\t.line\t100; \"main.c\"\tTXIE = 0;  // Disable tx interrupts\n000439   1683     bsf     0x03, 0x5        \tBANKSEL\t_PIE1bits\n00043a   1303     bcf     0x03, 0x6        \n00043b   120c     bcf     0x0c, 0x4        \tBCF\t_PIE1bits,4\n                                           ;\t.line\t101; \"main.c\"\tRCIE = 1;  // Enable rx interrupts\n00043c   168c     bsf     0x0c, 0x5        \tBSF\t_PIE1bits,5\n                                           ;\t.line\t102; \"main.c\"\tTX9 = 0;   // 8-bit transmission\n00043d   1318     bcf     0x18, 0x6        \tBCF\t_TXSTAbits,6\n                                           ;\t.line\t103; \"main.c\"\tRX9 = 0;   // 8-bit reception\n00043e   1283     bcf     0x03, 0x5        \tBANKSEL\t_RCSTAbits\n00043f   1303     bcf     0x03, 0x6        \n000440   1318     bcf     0x18, 0x6        \tBCF\t_RCSTAbits,6\n                                           ;\t.line\t104; \"main.c\"\tTXEN = 0;  // Reset transmitter\n000441   1683     bsf     0x03, 0x5        \tBANKSEL\t_TXSTAbits\n000442   1303     bcf     0x03, 0x6        \n000443   1298     bcf     0x18, 0x5        \tBCF\t_TXSTAbits,5\n                                           ;\t.line\t105; \"main.c\"\tTXEN = 1;  // Enable the transmitter\n000444   1698     bsf     0x18, 0x5        \tBSF\t_TXSTAbits,5\n                                           ;\t.line\t106; \"main.c\"\t}\n000445   0008     return                   \tRETURN\t\n                                           ; exit point of _uart_init\n\n                                           ;***\n                                           ;  pBlock Stats: dbName = C\n                                           ;***\n                                           ;has an exit\n                                           ;4 compiler assigned registers:\n                                           ;   r0x1024\n                                           ;   r0x1025\n                                           ;   r0x1026\n                                           ;   r0x1027\n                                           ;; Starting pCode block\n                                           S_main__reply\tcode\n                                           _reply:\n                                           ; 2 exit points\n                                           ;\t.line\t71; \"main.c\"\tunsigned char ret = 0, i;\n0002c8   1283     bcf     0x03, 0x5        \tBANKSEL\tr0x1024\n0002c9   1703     bsf     0x03, 0x6        \n0002ca   01a5     clrf    0x25             \tCLRF\tr0x1024\n                                           ;\t.line\t73; \"main.c\"\tfor ( i = 0; i < 8; i++ )\n0002cb   01a6     clrf    0x26             \tCLRF\tr0x1025\n                                           _00139_DS_:\n                                           ;\t.line\t75; \"main.c\"\tto;\n0002cc   1683     bsf     0x03, 0x5        \tBANKSEL\t_TRISAbits\n0002cd   1303     bcf     0x03, 0x6        \n0002ce   1085     bcf     0x05, 0x1        \tBCF\t_TRISAbits,1\n                                           ;\t.line\t76; \"main.c\"\tt = 0;\n0002cf   1283     bcf     0x03, 0x5        \tBANKSEL\t_PORTAbits\n0002d0   1303     bcf     0x03, 0x6        \n0002d1   1085     bcf     0x05, 0x1        \tBCF\t_PORTAbits,1\n                                           ;\t.line\t78; \"main.c\"\tti;\n0002d2   1683     bsf     0x03, 0x5        \tBANKSEL\t_TRISAbits\n0002d3   1303     bcf     0x03, 0x6        \n0002d4   1485     bsf     0x05, 0x1        \tBSF\t_TRISAbits,1\n                                           ;\t.line\t80; \"main.c\"\tif ( t )\n0002d5   1283     bcf     0x03, 0x5        \tBANKSEL\t_PORTAbits\n0002d6   1303     bcf     0x03, 0x6        \n0002d7   1c85     btfss   0x05, 0x1        \tBTFSS\t_PORTAbits,1\n0002d8   2afb     goto    0x02fb           \tGOTO\t_00140_DS_\n                                           ;;103\tMOVF\tr0x1025,W\n                                           ;\t.line\t82; \"main.c\"\tret += 1 << i;\n0002d9   3001     movlw   0x01             \tMOVLW\t0x01\n0002da   1283     bcf     0x03, 0x5        \tBANKSEL\tr0x1027\n0002db   1703     bsf     0x03, 0x6        \n0002dc   00a8     movwf   0x28             \tMOVWF\tr0x1027\n                                           ;;102\tMOVF\tr0x1026,W\n0002dd   0826     movf    0x26, 0x0        \tMOVF\tr0x1025,W\n0002de   00a7     movwf   0x27             \tMOVWF\tr0x1026\n0002df   1ba7     btfsc   0x27, 0x7        \tBTFSC\tr0x1026,7\n0002e0   2aeb     goto    0x02eb           \tGOTO\t_00159_DS_\n0002e1   3c00     sublw   0x00             \tSUBLW\t0x00\n0002e2   1903     btfsc   0x03, 0x2        \tBTFSC\tSTATUS,2\n0002e3   2af4     goto    0x02f4           \tGOTO\t_00157_DS_\n                                           _00156_DS_:\n0002e4   1283     bcf     0x03, 0x5        \tBANKSEL\tr0x1027\n0002e5   1703     bsf     0x03, 0x6        \n0002e6   0da8     rlf     0x28, 0x1        \tRLF\tr0x1027,F\n0002e7   3e01     addlw   0x01             \tADDLW\t0x01\n0002e8   1c03     btfss   0x03, 0x0        \tBTFSS\tSTATUS,0\n0002e9   2ae4     goto    0x02e4           \tGOTO\t_00156_DS_\n0002ea   2af4     goto    0x02f4           \tGOTO\t_00157_DS_\n                                           _00159_DS_:\n0002eb   1003     bcf     0x03, 0x0        \tBCF\tSTATUS,0\n0002ec   1283     bcf     0x03, 0x5        \tBANKSEL\tr0x1027\n0002ed   1703     bsf     0x03, 0x6        \n0002ee   1ba8     btfsc   0x28, 0x7        \tBTFSC\tr0x1027,7\n0002ef   1403     bsf     0x03, 0x0        \tBSF\tSTATUS,0\n0002f0   0ca8     rrf     0x28, 0x1        \tRRF\tr0x1027,F\n0002f1   3e01     addlw   0x01             \tADDLW\t0x01\n0002f2   1c03     btfss   0x03, 0x0        \tBTFSS\tSTATUS,0\n0002f3   2aeb     goto    0x02eb           \tGOTO\t_00159_DS_\n                                           _00157_DS_:\n0002f4   1283     bcf     0x03, 0x5        \tBANKSEL\tr0x1024\n0002f5   1703     bsf     0x03, 0x6        \n0002f6   0825     movf    0x25, 0x0        \tMOVF\tr0x1024,W\n0002f7   00a7     movwf   0x27             \tMOVWF\tr0x1026\n0002f8   0828     movf    0x28, 0x0        \tMOVF\tr0x1027,W\n0002f9   0727     addwf   0x27, 0x0        \tADDWF\tr0x1026,W\n0002fa   00a5     movwf   0x25             \tMOVWF\tr0x1024\n                                           _00140_DS_:\n                                           ;\t.line\t73; \"main.c\"\tfor ( i = 0; i < 8; i++ )\n0002fb   1283     bcf     0x03, 0x5        \tBANKSEL\tr0x1025\n0002fc   1703     bsf     0x03, 0x6        \n0002fd   0aa6     incf    0x26, 0x1        \tINCF\tr0x1025,F\n                                           ;;unsigned compare: left < lit(0x8=8), size=1\n0002fe   3008     movlw   0x08             \tMOVLW\t0x08\n0002ff   0226     subwf   0x26, 0x0        \tSUBWF\tr0x1025,W\n000300   1c03     btfss   0x03, 0x0        \tBTFSS\tSTATUS,0\n000301   2acc     goto    0x02cc           \tGOTO\t_00139_DS_\n                                           ;;genSkipc:3307: created from rifx:00000000047A5780\n                                           ;\t.line\t86; \"main.c\"\tti;\n000302   1683     bsf     0x03, 0x5        \tBANKSEL\t_TRISAbits\n000303   1303     bcf     0x03, 0x6        \n000304   1485     bsf     0x05, 0x1        \tBSF\t_TRISAbits,1\n                                           ;\t.line\t87; \"main.c\"\treturn ret;\n000305   1283     bcf     0x03, 0x5        \tBANKSEL\tr0x1024\n000306   1703     bsf     0x03, 0x6        \n000307   0825     movf    0x25, 0x0        \tMOVF\tr0x1024,W\n                                           ;\t.line\t88; \"main.c\"\t}\n000308   0008     return                   \tRETURN\t\n                                           ; exit point of _reply\n\n                                           ;***\n                                           ;  pBlock Stats: dbName = C\n                                           ;***\n                                           ;has an exit\n                                           ;1 compiler assigned register :\n                                           ;   r0x1028\n                                           ;; Starting pCode block\n                                           S_main__sensor_rst\tcode\n                                           _sensor_rst:\n                                           ; 2 exit points\n                                           ;\t.line\t60; \"main.c\"\tto;\n000446   1683     bsf     0x03, 0x5        \tBANKSEL\t_TRISAbits\n000447   1303     bcf     0x03, 0x6        \n000448   1085     bcf     0x05, 0x1        \tBCF\t_TRISAbits,1\n                                           ;\t.line\t61; \"main.c\"\tt = 0;\n000449   1283     bcf     0x03, 0x5        \tBANKSEL\t_PORTAbits\n00044a   1303     bcf     0x03, 0x6        \n00044b   1085     bcf     0x05, 0x1        \tBCF\t_PORTAbits,1\n                                           ;\t.line\t63; \"main.c\"\tti;\n00044c   1683     bsf     0x03, 0x5        \tBANKSEL\t_TRISAbits\n00044d   1303     bcf     0x03, 0x6        \n00044e   1485     bsf     0x05, 0x1        \tBSF\t_TRISAbits,1\n                                           ;\t.line\t66; \"main.c\"\treturn t;  //return 0 for sensor present\n00044f   1283     bcf     0x03, 0x5        \tBANKSEL\tr0x1028\n000450   1703     bsf     0x03, 0x6        \n000451   01a4     clrf    0x24             \tCLRF\tr0x1028\n000452   1283     bcf     0x03, 0x5        \tBANKSEL\t_PORTAbits\n000453   1303     bcf     0x03, 0x6        \n000454   1c85     btfss   0x05, 0x1        \tBTFSS\t_PORTAbits,1\n000455   2c59     goto    0x0459           \tGOTO\t_00001_DS_\n000456   1283     bcf     0x03, 0x5        \tBANKSEL\tr0x1028\n000457   1703     bsf     0x03, 0x6        \n000458   0aa4     incf    0x24, 0x1        \tINCF\tr0x1028,F\n                                           _00001_DS_:\n000459   1283     bcf     0x03, 0x5        \tBANKSEL\tr0x1028\n00045a   1703     bsf     0x03, 0x6        \n00045b   0824     movf    0x24, 0x0        \tMOVF\tr0x1028,W\n                                           ;\t.line\t67; \"main.c\"\t}\n00045c   0008     return                   \tRETURN\t\n                                           ; exit point of _sensor_rst\n\n                                           ;***\n                                           ;  pBlock Stats: dbName = C\n                                           ;***\n                                           ;has an exit\n                                           ;6 compiler assigned registers:\n                                           ;   r0x1029\n                                           ;   r0x102A\n                                           ;   r0x102B\n                                           ;   r0x102C\n                                           ;   r0x102D\n                                           ;   r0x102E\n                                           ;; Starting pCode block\n                                           S_main__cmnd_w\tcode\n                                           _cmnd_w:\n                                           ; 2 exit points\n                                           ;\t.line\t31; \"main.c\"\tvoid cmnd_w( unsigned char cmnd )\n000309   1283     bcf     0x03, 0x5        \tBANKSEL\tr0x1029\n00030a   1703     bsf     0x03, 0x6        \n00030b   00a0     movwf   0x20             \tMOVWF\tr0x1029\n                                           ;\t.line\t35; \"main.c\"\tfor ( i = 0; i < 8; i++ )\n00030c   01a1     clrf    0x21             \tCLRF\tr0x102A\n                                           _00109_DS_:\n                                           ;\t.line\t37; \"main.c\"\tif ( cmnd & ( 1 << i ) )\n00030d   3000     movlw   0x00             \tMOVLW\t0x00\n00030e   1283     bcf     0x03, 0x5        \tBANKSEL\tr0x102B\n00030f   1703     bsf     0x03, 0x6        \n000310   00a3     movwf   0x23             \tMOVWF\tr0x102B\n000311   3001     movlw   0x01             \tMOVLW\t0x01\n000312   00a2     movwf   0x22             \tMOVWF\tr0x102C\n000313   0821     movf    0x21, 0x0        \tMOVF\tr0x102A,W\n000314   3c00     sublw   0x00             \tSUBLW\t0x00\n000315   1903     btfsc   0x03, 0x2        \tBTFSC\tSTATUS,2\n000316   2b1e     goto    0x031e           \tGOTO\t_00127_DS_\n                                           _00126_DS_:\n000317   1283     bcf     0x03, 0x5        \tBANKSEL\tr0x102C\n000318   1703     bsf     0x03, 0x6        \n000319   0da2     rlf     0x22, 0x1        \tRLF\tr0x102C,F\n00031a   0da3     rlf     0x23, 0x1        \tRLF\tr0x102B,F\n00031b   3e01     addlw   0x01             \tADDLW\t0x01\n00031c   1c03     btfss   0x03, 0x0        \tBTFSS\tSTATUS,0\n00031d   2b17     goto    0x0317           \tGOTO\t_00126_DS_\n                                           ;;101\tMOVF\tr0x1029,W\n                                           ;;99\tMOVWF\tr0x102D\n                                           ;;1\tCLRF\tr0x102E\n                                           ;;100\tMOVF\tr0x102D,W\n                                           _00127_DS_:\n00031e   1283     bcf     0x03, 0x5        \tBANKSEL\tr0x1029\n00031f   1703     bsf     0x03, 0x6        \n000320   0820     movf    0x20, 0x0        \tMOVF\tr0x1029,W\n000321   05a2     andwf   0x22, 0x1        \tANDWF\tr0x102C,F\n000322   3000     movlw   0x00             \tMOVLW\t0x00\n000323   05a3     andwf   0x23, 0x1        \tANDWF\tr0x102B,F\n000324   0823     movf    0x23, 0x0        \tMOVF\tr0x102B,W\n000325   0422     iorwf   0x22, 0x0        \tIORWF\tr0x102C,W\n000326   1903     btfsc   0x03, 0x2        \tBTFSC\tSTATUS,2\n000327   2b32     goto    0x0332           \tGOTO\t_00106_DS_\n                                           ;\t.line\t39; \"main.c\"\tto;\n000328   1683     bsf     0x03, 0x5        \tBANKSEL\t_TRISAbits\n000329   1303     bcf     0x03, 0x6        \n00032a   1085     bcf     0x05, 0x1        \tBCF\t_TRISAbits,1\n                                           ;\t.line\t40; \"main.c\"\tt = 0;\n00032b   1283     bcf     0x03, 0x5        \tBANKSEL\t_PORTAbits\n00032c   1303     bcf     0x03, 0x6        \n00032d   1085     bcf     0x05, 0x1        \tBCF\t_PORTAbits,1\n                                           ;\t.line\t42; \"main.c\"\tti;\n00032e   1683     bsf     0x03, 0x5        \tBANKSEL\t_TRISAbits\n00032f   1303     bcf     0x03, 0x6        \n000330   1485     bsf     0x05, 0x1        \tBSF\t_TRISAbits,1\n000331   2b3b     goto    0x033b           \tGOTO\t_00110_DS_\n                                           _00106_DS_:\n                                           ;\t.line\t47; \"main.c\"\tto;\n000332   1683     bsf     0x03, 0x5        \tBANKSEL\t_TRISAbits\n000333   1303     bcf     0x03, 0x6        \n000334   1085     bcf     0x05, 0x1        \tBCF\t_TRISAbits,1\n                                           ;\t.line\t48; \"main.c\"\tt = 0;\n000335   1283     bcf     0x03, 0x5        \tBANKSEL\t_PORTAbits\n000336   1303     bcf     0x03, 0x6        \n000337   1085     bcf     0x05, 0x1        \tBCF\t_PORTAbits,1\n                                           ;\t.line\t50; \"main.c\"\tti;\n000338   1683     bsf     0x03, 0x5        \tBANKSEL\t_TRISAbits\n000339   1303     bcf     0x03, 0x6        \n00033a   1485     bsf     0x05, 0x1        \tBSF\t_TRISAbits,1\n                                           _00110_DS_:\n                                           ;\t.line\t35; \"main.c\"\tfor ( i = 0; i < 8; i++ )\n00033b   1283     bcf     0x03, 0x5        \tBANKSEL\tr0x102A\n00033c   1703     bsf     0x03, 0x6        \n00033d   0aa1     incf    0x21, 0x1        \tINCF\tr0x102A,F\n                                           ;;unsigned compare: left < lit(0x8=8), size=1\n00033e   3008     movlw   0x08             \tMOVLW\t0x08\n00033f   0221     subwf   0x21, 0x0        \tSUBWF\tr0x102A,W\n000340   1c03     btfss   0x03, 0x0        \tBTFSS\tSTATUS,0\n000341   2b0d     goto    0x030d           \tGOTO\t_00109_DS_\n                                           ;;genSkipc:3307: created from rifx:00000000047A5780\n                                           ;\t.line\t54; \"main.c\"\tti;\n000342   1683     bsf     0x03, 0x5        \tBANKSEL\t_TRISAbits\n000343   1303     bcf     0x03, 0x6        \n000344   1485     bsf     0x05, 0x1        \tBSF\t_TRISAbits,1\n                                           ;\t.line\t55; \"main.c\"\t}\n000345   0008     return                   \tRETURN\t\n                                           ; exit point of _cmnd_w\n\n\n                                           ;\tcode size estimation:\n                                           ;\t  471+  209 =   680 instructions ( 1778 byte)\n\n                                           \tend\n                                           list P=16F628A\n                                           #include <P16F628A.inc>      ; processor specific definitions\n                                                   LIST\n\n                                           ;==========================================================================\n                                           ; Build date : Oct 21 2015\n                                           ;  MPASM PIC16F628A processor include\n                                           ; \n                                           ;  (c) Copyright 1999-2015 Microchip Technology, All rights reserved\n                                           ;==========================================================================\n\n                                                   NOLIST\n                                                         global _eeprom_read\n                                                         global _eeprom_write\n                                                         extern _uart\n                                                         code\n                                           ; W has address to read from\n                                           _eeprom_read:\n0000a7   1683     bsf     0x03, 0x5                      BANKSEL   EEADR        ; select memory bank 1\n0000a8   1303     bcf     0x03, 0x6        \n0000a9   009b     movwf   0x1b                           MOVWF     EEADR        ; Скопировать 02h, из регистра W,\n                                                                                ; в регистр EEAdr.\n0000aa   141c     bsf     0x1c, 0x0                      BSF       EECON1, RD   ; Инициализировать чтение.\n0000ab   081a     movf    0x1a, 0x0                      MOVF      EEDATA, W    ; W = EEDATA\n0000ac   0008     return                                 RETURN\n                                           ; _uart+1 has address to read from\n                                           ; _uart+2 has a data to write\n                                           _eeprom_write:\n0000ad   1283     bcf     0x03, 0x5                      BANKSEL\t  _uart        ; select bank 0\n0000ae   1303     bcf     0x03, 0x6        \n0000af   0861     movf    0x61, 0x0                      MOVF      (_uart+1), W ; set address\n0000b0   1683     bsf     0x03, 0x5                      BANKSEL   EEADR        ; select Bank 1\n0000b1   1303     bcf     0x03, 0x6        \n0000b2   009b     movwf   0x1b                           MOVWF\t    EEADR\n0000b3   1283     bcf     0x03, 0x5                      BANKSEL\t  _uart        ; select bank 0\n0000b4   1303     bcf     0x03, 0x6        \n0000b5   0862     movf    0x62, 0x0                      MOVF\t    (_uart+2), W ; set data byte\n0000b6   1683     bsf     0x03, 0x5                      BANKSEL   EEDATA       ; select bank 1\n0000b7   1303     bcf     0x03, 0x6        \n0000b8   009a     movwf   0x1a                           MOVWF\t    EEDATA\n0000b9   151c     bsf     0x1c, 0x2                      BSF       EECON1, WREN ; enable write\n0000ba   138b     bcf     0x0b, 0x7                      BCF       INTCON, GIE  ; disable global interrupts\n0000bb   1b8b     btfsc   0x0b, 0x7                      BTFSC     INTCON, GIE  ; see AN576\n0000bc   28ba     goto    0x00ba                         GOTO      $-D'2'\n0000bd   3055     movlw   0x55                           MOVLW     0x55         ;\n0000be   009d     movwf   0x1d                           MOVWF     EECON2       ; write 55h\n0000bf   30aa     movlw   0xaa                           MOVLW     0xAA         ;\n0000c0   009d     movwf   0x1d                           MOVWF     EECON2       ; write AAh\n0000c1   149c     bsf     0x1c, 0x1                      BSF       EECON1, WR   ; Set WR bit\n                                                                                ; begin write\n0000c2   178b     bsf     0x0b, 0x7                      BSF       INTCON, GIE  ; enable global interrupts\n0000c3   111c     bcf     0x1c, 0x2                      BCF       EECON1, WREN\n0000c4   189c     btfsc   0x1c, 0x1                      BTFSC     EECON1, WR\n0000c5   28c4     goto    0x00c4                         GOTO      $-D'1'\n0000c6   0008     return                                 RETURN\t               ; exit point of _write_eeprom             \n                                                         END\n                                           list P=16F628A\n                                           #include <P16F628A.inc>      ; processor specific definitions\n                                                   LIST\n\n                                           ;==========================================================================\n                                           ; Build date : Oct 21 2015\n                                           ;  MPASM PIC16F628A processor include\n                                           ; \n                                           ;  (c) Copyright 1999-2015 Microchip Technology, All rights reserved\n                                           ;==========================================================================\n\n                                                   NOLIST\n                                           #include <timer0.inc>\n                                           ;--------------------------------------------------------------------------\n                                           ;  Configure the prescaler for TIMER 0 in the PIC's OPTION register .\n                                           ;--------------------------------------------------------------------------\n\n                                           ; Description of the OPTION register, from the PIC16F628 data sheet:\n                                           ; bit 7: RBPU: PORTB Pull-up Enable bit\n                                           ;        1 = PORTB pull-ups are disabled\n                                           ;        0 = PORTB pull-ups are enabled by individual port latch values\n                                           ; bit 6: INTEDG: Interrupt Edge Select bit\n                                           ;        1 = Interrupt on rising edge of RB0/INT pin\n                                           ;        0 = Interrupt on falling edge of RB0/INT pin\n                                           ; bit 5: T0CS: TMR0 Clock Source Select bit\n                                           ;        1 = Transition on RA4/T0CKI pin\n                                           ;        0 = Internal instruction cycle clock (CLKOUT)\n                                           ; bit 4: T0SE: TMR0 Source Edge Select bit\n                                           ;        1 = Increment on high-to-low transition on RA4/T0CKI pin\n                                           ;        0 = Increment on low-to-high transition on RA4/T0CKI pin\n                                           ; bit 3: PSA: Prescaler Assignment bit\n                                           ;        1 = Prescaler is assigned to the WDT\n                                           ;        0 = Prescaler is assigned to the Timer0 module\n                                           ; bit 2-0: PS2:PS0: Prescaler Rate Select bits, here shown for TMR0 :\n                                           ;     000  = 1 : 2\n                                           ; ... 111  = 1 : 256\n                                           ;        Note: to count EVERY pulse (1 : 1) with TMR0, the prescaler\n                                           ;              must be assigned to the WATCHDOG TIMER (WDT) !\n                                           ; Some examples (for the OPTION register, parameter in W for SetPrescaler):\n                                           PSC_DIV_BY_2   equ  b'00100000'   ; let prescaler divide TMR0 by two\n                                           PSC_DIV_BY_4   equ  b'00100001'   ; let prescaler divide TMR0 by   4\n                                           PSC_DIV_BY_8   equ  b'00100010'   ; let prescaler divide TMR0 by   8\n                                           PSC_DIV_BY_16  equ  b'00100011'   ; let prescaler divide TMR0 by  16\n                                           PSC_DIV_BY_32  equ  b'00100100'   ; let prescaler divide TMR0 by  32\n                                           PSC_DIV_BY_64  equ  b'00100101'   ; let prescaler divide TMR0 by  64\n                                           PSC_DIV_BY_128 equ  b'00100110'   ; let prescaler divide TMR0 by 128\n                                           PSC_DIV_BY_256 equ  b'00100111'   ; let prescaler divide TMR0 by 256\n                                           ;--------------------------------------------------------------------------\n                                           ;  Configure the prescaler for TIMER 0 in the PIC's OPTION register .\n                                           ;--------------------------------------------------------------------------\n                                           ; Description of the OPTION register, from the PIC16F628 data sheet:\n                                           ; bit 7: RBPU: PORTB Pull-up Enable bit\n                                           ;        1 = PORTB pull-ups are disabled\n                                           ;        0 = PORTB pull-ups are enabled by individual port latch values\n                                           ; bit 6: INTEDG: Interrupt Edge Select bit\n                                           ;        1 = Interrupt on rising edge of RB0/INT pin\n                                           ;        0 = Interrupt on falling edge of RB0/INT pin\n                                           ; bit 5: T0CS: TMR0 Clock Source Select bit\n                                           ;        1 = Transition on RA4/T0CKI pin\n                                           ;        0 = Internal instruction cycle clock (CLKOUT)\n                                           ; bit 4: T0SE: TMR0 Source Edge Select bit\n                                           ;        1 = Increment on high-to-low transition on RA4/T0CKI pin\n                                           ;        0 = Increment on low-to-high transition on RA4/T0CKI pin\n                                           ; bit 3: PSA: Prescaler Assignment bit\n                                           ;        1 = Prescaler is assigned to the WDT\n                                           ;        0 = Prescaler is assigned to the Timer0 module\n                                           ; bit 2-0: PS2:PS0: Prescaler Rate Select bits, here shown for TMR0 :\n                                           ;     000  = 1 : 2\n                                           ; ... 111  = 1 : 256\n                                           ;        Note: to count EVERY pulse (1 : 1) with TMR0, the prescaler\n                                           ;              must be assigned to the WATCHDOG TIMER (WDT) !\n                                           ; Some examples (for the OPTION register, parameter in W for SetPrescaler):\n                                           ;PSC_DIV_BY_2   equ  b'00100000'   ; let prescaler divide TMR0 by two\n                                           ;PSC_DIV_BY_4   equ  b'00100001'   ; let prescaler divide TMR0 by   4\n                                           ;PSC_DIV_BY_8   equ  b'00100010'   ; let prescaler divide TMR0 by   8\n                                           ;PSC_DIV_BY_16  equ  b'00100011'   ; let prescaler divide TMR0 by  16\n                                           ;PSC_DIV_BY_32  equ  b'00100100'   ; let prescaler divide TMR0 by  32\n                                           ;PSC_DIV_BY_64  equ  b'00100101'   ; let prescaler divide TMR0 by  64\n                                           ;PSC_DIV_BY_128 equ  b'00100110'   ; let prescaler divide TMR0 by 128\n                                           ;PSC_DIV_BY_256 equ  b'00100111'   ; let prescaler divide TMR0 by 256\n                                                     code\n                                                     global _SetPrescaler\n                                                     global _PrescalerOff\n                                           _SetPrescaler:                          ; copy W into OPTION register, avoid watchdog trouble\n                                                     ;clrwdt                       ; recommended by Microchip (\"switching prescaler assignment\") \n                                           ;          errorlevel -302              ; Turn off banking message for the next few instructions..\n\n0000c7   1683     bsf     0x03, 0x5                  BANKSEL OPTION_REG            ;! setting RP0 enables access to OPTION reg\n0000c8   1303     bcf     0x03, 0x6        \n                                                                                   ; option register is in bank1. i know. thanks for the warning.\n0000c9   0081     movwf   0x01                       MOVWF OPTION_REG              ;! ex: \"option\" command (yucc)\n                                                                                   ;! clearing RP0 for normal register access\n0000ca   3400     retlw   0x00                       RETLW 0\n                                            \n                                            \n                                           _PrescalerOff:                         ; turn the prescaler for TMR0 \"off\" \n                                                                                  ; (actually done by assigning the prescaler to the watchdog timer )\n                                                     ;clrwdt                      ; clear watchdog timer\n0000cb   0181     clrf    0x01                        clrf  TMR0                  ; clear timer 0 AND PRESCALER(!)\n                                                     errorlevel -302              ; Turn off banking message for the next few instructions..\n0000cc   1683     bsf     0x03, 0x5                  BANKSEL OPTION_REG           ;! setting RP0 enables access to OPTION reg\n0000cd   1303     bcf     0x03, 0x6        \n                                                                                  ; option register is in bank1. i know. thanks for the warning.\n0000ce   3027     movlw   0x27                       movlw b'00100111'            ;! recommended by Microchip when\n                                                                                  ;! changing prescaler assignment from TMR0 to WDT\n0000cf   0081     movwf   0x01                       movwf OPTION_REG             ;! ex: \"option\" command (yucc)\n0000d0   0064     clrwdt                             clrwdt                       ;! clear watchdog again\n0000d1   302f     movlw   0x2f                       movlw b'00101111'            ;! bit 3 set means PS assigned to WDT now\n0000d2   0081     movwf   0x01                       movwf OPTION_REG             ;! ex: \"option\" command (yucc)\n\n0000d3   3400     retlw   0x00                       retlw 0\n                                                     end\n                                           list P=16F628A\n                                           #include <P16F628A.inc>      ; processor specific definitions\n                                                   LIST\n\n                                           ;==========================================================================\n                                           ; Build date : Oct 21 2015\n                                           ;  MPASM PIC16F628A processor include\n                                           ; \n                                           ;  (c) Copyright 1999-2015 Microchip Technology, All rights reserved\n                                           ;==========================================================================\n\n                                                   NOLIST\n\n                                           LEDS_PORT      equ  PORTB\n                                           LEDS_IO        equ  TRISB\n                                           \t\t\t   global _leds_end\n                                           \t\t       global _leds_reg\n                                           UD_LEDS_0      udata  0x6E\n                                           _leds_end      res\t1\n                                           UD_LEDS_1      udata  0x6F\n                                           _leds_reg      res\t1\n                                           \t\t\n                                           \t\tglobal _leds\n                                           \t\tglobal _leds_over\n                                           \t\tglobal _leds_set_end\n                                                   global _leds_init\n                                                   code\n                                           _leds_init:\n0000d4   1683     bsf     0x03, 0x5        \tBANKSEL\tLEDS_IO\n0000d5   1303     bcf     0x03, 0x6        \n0000d6   1186     bcf     0x06, 0x3        \tBCF\tLEDS_IO,3     ; configure as output YELLOW\n0000d7   1206     bcf     0x06, 0x4        \tBCF\tLEDS_IO,4     ; configure as output BLUE\n0000d8   1286     bcf     0x06, 0x5        \tBCF\tLEDS_IO,5     ; configure as output GREEN\n0000d9   1283     bcf     0x03, 0x5        \tBANKSEL LEDS_PORT\n0000da   1303     bcf     0x03, 0x6        \n0000db   1186     bcf     0x06, 0x3        \tBCF\tLEDS_PORT,3\n0000dc   1206     bcf     0x06, 0x4        \tBCF\tLEDS_PORT,4\n0000dd   1286     bcf     0x06, 0x5        \tBCF\tLEDS_PORT,5\t\t\n0000de   0008     return                   \tRETURN\n\n                                           _leds_set_end:\n0000df   1283     bcf     0x03, 0x5        \tBANKSEL\t_leds_end\n0000e0   1303     bcf     0x03, 0x6        \n0000e1   00ee     movwf   0x6e             \tMOVWF _leds_end\n0000e2   0008     return                   \tRETURN\n\n                                           _leds_over:\n0000e3   1283     bcf     0x03, 0x5        \tBANKSEL\t_leds_end\n0000e4   1303     bcf     0x03, 0x6        \n0000e5   086e     movf    0x6e, 0x0        \tMOVF _leds_end,W\n                                           _leds:\n0000e6   1283     bcf     0x03, 0x5        \tBANKSEL\t_leds_reg\n0000e7   1303     bcf     0x03, 0x6        \n0000e8   00ef     movwf   0x6f             \tMOVWF _leds_reg\n                                           NEXT_LED_YELLOW:\t\n0000e9   1def     btfss   0x6f, 0x3        \tBTFSS\t_leds_reg,3\n0000ea   28ed     goto    0x00ed           \tGOTO LED_YELLOW_DISABLE\n0000eb   1586     bsf     0x06, 0x3        \tBSF\tPORTB,3\n0000ec   28ee     goto    0x00ee           \tGOTO NEXT_LED_RED\n                                           LED_YELLOW_DISABLE:\n0000ed   1186     bcf     0x06, 0x3        \tBCF\tPORTB,3\n                                           NEXT_LED_RED:\n0000ee   1e6f     btfss   0x6f, 0x4        \tBTFSS\t_leds_reg,4\n0000ef   28f2     goto    0x00f2           \tGOTO LED_RED_DISABLE\n0000f0   1606     bsf     0x06, 0x4        \tBSF LEDS_PORT,4\n0000f1   28f3     goto    0x00f3           \tGOTO NEXT_LED_GREEN\n                                           LED_RED_DISABLE:\t\n0000f2   1206     bcf     0x06, 0x4        \tBCF\tPORTB,4\n                                           NEXT_LED_GREEN:\n0000f3   1eef     btfss   0x6f, 0x5        \tBTFSS\t_leds_reg,5\n0000f4   28f7     goto    0x00f7           \tGOTO LED_GREEN_DISABLE\n0000f5   1686     bsf     0x06, 0x5        \tBSF\tPORTB,5\n0000f6   0008     return                   \tRETURN\n                                           LED_GREEN_DISABLE:\n0000f7   1286     bcf     0x06, 0x5        \tBCF\tPORTB,5\n0000f8   0008     return                   \tRETURN\n                                           \tend\n                                           list P=16F628A\n                                           #include <P16F628A.inc>      ; processor specific definitions\n                                                   LIST\n\n                                           ;==========================================================================\n                                           ; Build date : Oct 21 2015\n                                           ;  MPASM PIC16F628A processor include\n                                           ; \n                                           ;  (c) Copyright 1999-2015 Microchip Technology, All rights reserved\n                                           ;==========================================================================\n\n                                                   NOLIST\n                                           #include <timer0.inc>\n                                           ;--------------------------------------------------------------------------\n                                           ;  Configure the prescaler for TIMER 0 in the PIC's OPTION register .\n                                           ;--------------------------------------------------------------------------\n\n                                           ; Description of the OPTION register, from the PIC16F628 data sheet:\n                                           ; bit 7: RBPU: PORTB Pull-up Enable bit\n                                           ;        1 = PORTB pull-ups are disabled\n                                           ;        0 = PORTB pull-ups are enabled by individual port latch values\n                                           ; bit 6: INTEDG: Interrupt Edge Select bit\n                                           ;        1 = Interrupt on rising edge of RB0/INT pin\n                                           ;        0 = Interrupt on falling edge of RB0/INT pin\n                                           ; bit 5: T0CS: TMR0 Clock Source Select bit\n                                           ;        1 = Transition on RA4/T0CKI pin\n                                           ;        0 = Internal instruction cycle clock (CLKOUT)\n                                           ; bit 4: T0SE: TMR0 Source Edge Select bit\n                                           ;        1 = Increment on high-to-low transition on RA4/T0CKI pin\n                                           ;        0 = Increment on low-to-high transition on RA4/T0CKI pin\n                                           ; bit 3: PSA: Prescaler Assignment bit\n                                           ;        1 = Prescaler is assigned to the WDT\n                                           ;        0 = Prescaler is assigned to the Timer0 module\n                                           ; bit 2-0: PS2:PS0: Prescaler Rate Select bits, here shown for TMR0 :\n                                           ;     000  = 1 : 2\n                                           ; ... 111  = 1 : 256\n                                           ;        Note: to count EVERY pulse (1 : 1) with TMR0, the prescaler\n                                           ;              must be assigned to the WATCHDOG TIMER (WDT) !\n                                           ; Some examples (for the OPTION register, parameter in W for SetPrescaler):\n                                           PSC_DIV_BY_2   equ  b'00100000'   ; let prescaler divide TMR0 by two\n                                           PSC_DIV_BY_4   equ  b'00100001'   ; let prescaler divide TMR0 by   4\n                                           PSC_DIV_BY_8   equ  b'00100010'   ; let prescaler divide TMR0 by   8\n                                           PSC_DIV_BY_16  equ  b'00100011'   ; let prescaler divide TMR0 by  16\n                                           PSC_DIV_BY_32  equ  b'00100100'   ; let prescaler divide TMR0 by  32\n                                           PSC_DIV_BY_64  equ  b'00100101'   ; let prescaler divide TMR0 by  64\n                                           PSC_DIV_BY_128 equ  b'00100110'   ; let prescaler divide TMR0 by 128\n                                           PSC_DIV_BY_256 equ  b'00100111'   ; let prescaler divide TMR0 by 256\n\n\n                                                  global _temperature\n                                           UD_DS18B20_0        udata  0x69\n                                           COUNT               res 1\n\n                                           UD_DS18B20_1        udata  0x6A\n                                           _temperature        res 2\n\n                                           UD_DS18B20_2        udata  0x6C\n                                           _delay_counter_0    res 1\n\n                                           UD_DS18B20_3        udata  0x6D\n                                           SHIFT               res 1\n                                                  extern _leds_over\n                                                  global _ds18b20_get_temperature\n                                                  global _ds18b20_init\n                                                  code\n                                           ; Dallas DS18B20 Temperature Sensor 'One Wire' Communication Routines\n\n                                           DELAY:                                  ; This routine can provide delays from \n                                                                                   ; 10uS to 669uS depending on the number moved to the Working register prior to calling the delay\n0000f9   00ec     movwf   0x6c                     MOVWF   _delay_counter_0        ; [1]    Move integer to GPR\n0000fa   28fb     goto    0x00fb                   GOTO    $+D'1'                  ; [2]    No Operation\n0000fb   28fc     goto    0x00fc                   GOTO    $+D'1'                  ; [2]    No Operation\n0000fc   28fd     goto    0x00fd                   GOTO    $+D'1'                  ; [2]    No Operation\n0000fd   28fe     goto    0x00fe                   GOTO    $+D'1'                  ; [2]    No Operation\n0000fe   28ff     goto    0x00ff                   GOTO    $+D'1'                  ; [2]    No Operation\n0000ff   0bec     decfsz  0x6c, 0x1                DECFSZ  _delay_counter_0, F     ; [1]    Decrement GPR and place back in itself\n000100   28fa     goto    0x00fa                   GOTO    $-D'6'                  ; [2](1) Not finished, GOTO here - 3 instructions\n000101   0008     return                           RETURN                          ; [2]    Finished, Return\n\n\n                                           DQ_HIZ:                                 ; This routine forces the DQ Line to an Input / High Impedance state\n000102   1683     bsf     0x03, 0x5                BSF     STATUS, RP0             ; Bank 1\n000103   1485     bsf     0x05, 0x1                BSF     TRISA, 1                ; Make Pin 3 an input, Pull-up resistor forces line to logic 1, unless DS18B20 pulls it low\n000104   1283     bcf     0x03, 0x5                BCF     STATUS, RP0             ; Bank 0\n000105   0008     return                           RETURN\n\n                                           DQ_LL:                                  ; This routine forces the DQ Line to Logic Low\n000106   1085     bcf     0x05, 0x1                BCF     PORTA, 1                ; Clear output latch\n000107   1683     bsf     0x03, 0x5                BSF     STATUS, RP0             ; Bank 1\n000108   1085     bcf     0x05, 0x1                BCF     TRISA, 1                ; Make Pin 3 an output\n000109   1283     bcf     0x03, 0x5                BCF     STATUS, RP0             ; Bank 0\n00010a   0008     return                           RETURN\n\n\n\n                                           DS18B20_RESET:                          ; This routine Resets the DS18B20\n00010b   2106     call    0x0106                   CALL    DQ_LL                   ; Force the DQ Line to Logic Low\n                                                                                   ; (2+1+2*5+1+(2+2*5+1)*184+1+2)*0.2 = 481.8uS      \n00010c   30b8     movlw   0xb8                     MOVLW   D'184'                  ; Reset pulse must be held a minimum of 480uS. \n00010d   20f9     call    0x00f9                   CALL    DELAY             \n00010e   2102     call    0x0102                   CALL    DQ_HIZ                  ; Release DQ Line\n                                                                                   ; (2+1+2*5+1+(2+2*5+1)*22+1+2)*0.2 = 60.6uS\n00010f   3016     movlw   0x16                     MOVLW   D'22'                   ; Wait for recovery\n000110   20f9     call    0x00f9                   CALL    DELAY                   ;\n000111   1885     btfsc   0x05, 0x1                BTFSC   PORTA, 1                ; Test for 'Presence Pulse'\n000112   0008     return                           RETURN\n                                                                                   ; (2+1+2*5+1+(2+2*5+1)*180+1+2)*0.2 = 471.4uS\n000113   30b4     movlw   0xb4                     MOVLW   D'180'                  ; Must wait a minimum of 480uS from when DQ line is released before moving on\n000114   20f9     call    0x00f9                   CALL    DELAY                   ;\n000115   0008     return                           RETURN \n\n                                           DS18B20_WRITE_BIT:                      ; This routine writes one bit of data to the DS18B20\n000116   138b     bcf     0x0b, 0x7                BCF     INTCON, GIE             ; Disable Global Interrupts\n000117   2106     call    0x0106                   CALL    DQ_LL                   ; Force the DQ Line to Logic Low\n000118   1c03     btfss   0x03, 0x0                BTFSS   STATUS, C               ; Test Carry Flag\n000119   291b     goto    0x011b                   GOTO    $+D'2'                  ; If zero, leave DQ Line Logic Low\n00011a   2102     call    0x0102                   CALL    DQ_HIZ                  ; If not zero, release DQ Line to Logic High\n                                                                                   ; (2+1+2*5+1+(2+2*5+1)*22+1+2)*0.2 = 60.6uS\n00011b   3012     movlw   0x12                     MOVLW   D'18'                   ; Hold Logic Low, write 0\n00011c   20f9     call    0x00f9                   CALL    DELAY                   ; \n00011d   2102     call    0x0102                   CALL    DQ_HIZ                  ; If not zero, release DQ Line to Logic High, write 1\n00011e   178b     bsf     0x0b, 0x7                BSF     INTCON, GIE             ; Enable Global Interrupts\n00011f   0008     return                           RETURN\n\n\n                                           DS18B20_WRITE_BYTE:                     ; This routine writes a byte of data to the DS18B20\n000120   00ed     movwf   0x6d                     MOVWF   SHIFT                   ; Move data to shift into DS18B20 to SHIFT GPR\n000121   3008     movlw   0x08                     MOVLW   D'08'                   ; Amount of bits to shift in\n000122   00e9     movwf   0x69                     MOVWF   COUNT                   ; Store in COUNT GPR\n000123   0ced     rrf     0x6d, 0x1                RRF     SHIFT, F                ; Rotate valid data into Carry Flag\n000124   2116     call    0x0116                   CALL    DS18B20_WRITE_BIT       ; Write bit\n000125   0be9     decfsz  0x69, 0x1                DECFSZ  COUNT, F                ; Decrement COUNT\n000126   2923     goto    0x0123                   GOTO    $-D'3'                  ; If not zero, read next bit\n000127   0008     return                           RETURN                          ; If zero, RETURN\n                                            \n                                           DS18B20_READ_BIT:                       ; This routine reads one bit of data from the DS18B20\n000128   138b     bcf     0x0b, 0x7                BCF     INTCON, GIE             ; Disable Global Interrupts\n000129   2106     call    0x0106                   CALL    DQ_LL                   ; Force the DQ Line to Logic Low\n00012a   2102     call    0x0102                   CALL    DQ_HIZ                  ; Release DQ Line\n                                                                                   ; (2+1+2*5+1+(2+2*5+1)*1+1+2)*0.2 = 6uS\n00012b   3002     movlw   0x02                     MOVLW   D'1'+D'1'               ; Hold Logic Low, write 0\n00012c   20f9     call    0x00f9                   CALL    DELAY \n00012d   1403     bsf     0x03, 0x0                BSF     STATUS, C               ; Pre-set Carry Flag\n00012e   1c85     btfss   0x05, 0x1                BTFSS   PORTA, 1                ; Test DQ Line\n00012f   1003     bcf     0x03, 0x0                BCF     STATUS, C               ; If zero, Clear Carry Flag\n                                                                                   ; (2+1+2*5+1+(2+2*5+1)*22+1+2)*0.2 = 50.2uS\n000130   3013     movlw   0x13                     MOVLW   D'18'+D'1'              ; Wait for Time Slot to end\n000131   20f9     call    0x00f9                   CALL    DELAY                   ; \n000132   178b     bsf     0x0b, 0x7                BSF     INTCON, GIE             ; Enable Global Interrupts\n000133   0008     return                           RETURN\n\n\n                                           DS18B20_READ_BYTE:                      ; This routine reads a byte of data from the DS18B20\n000134   3008     movlw   0x08                     MOVLW   H'08'                   ; Amount of bits to shift out\n000135   00e9     movwf   0x69                     MOVWF   COUNT                   ; Store in COUNT GPR\n000136   2128     call    0x0128                   CALL    DS18B20_READ_BIT        ; Read bit\n000137   0ced     rrf     0x6d, 0x1                RRF     SHIFT, F                ; Rotate bit out of carry into SHIFT GPR\n000138   0be9     decfsz  0x69, 0x1                DECFSZ  COUNT, F                ; Decrement COUNT\n000139   2936     goto    0x0136                   GOTO    $-D'3'                  ; If not zero, read next bit\n00013a   086d     movf    0x6d, 0x0                MOVF    SHIFT, W                ; If zero, move SHIFT GPR to W\n00013b   0008     return                           RETURN                          ;\n                                             \n                                           _ds18b20_init:\n                                                                                   ; clear all VARIABLES\n00013c   01e9     clrf    0x69                     CLRF    COUNT                   ; clear COUNT \n00013d   01ea     clrf    0x6a                     CLRF    _temperature            ; clear _temperature\n00013e   01eb     clrf    0x6b                     CLRF    _temperature+1          ;\n00013f   01ec     clrf    0x6c                     CLRF    _delay_counter_0        ; clear _delay_counter_0\n000140   01ed     clrf    0x6d                     CLRF    SHIFT                   ; clear SHIFT\n                                                                                   ;\n000141   0185     clrf    0x05                     CLRF    PORTA                   ; Initialize PORTA by \n                                                                                   ; setting\n                                                                                   ; output data latches\n000142   3007     movlw   0x07                     MOVLW   0x07                    ; Turn comparators off and\n000143   009f     movwf   0x1f                     MOVWF   CMCON                   ; enable pins for I/O \n                                                                                   ; functions\n000144   0008     return                           RETURN   \n\n                                           _ds18b20_get_temperature:\n000145   1283     bcf     0x03, 0x5                BANKSEL PORTA\n000146   1303     bcf     0x03, 0x6        \n000147   210b     call    0x010b                   CALL    DS18B20_RESET           ; Reset\n\n000148   30cc     movlw   0xcc                     MOVLW   H'CC'                   ; Skiprom\n000149   2120     call    0x0120                   CALL    DS18B20_WRITE_BYTE      ; Skiprom\n00014a   3044     movlw   0x44                     MOVLW   H'44'                   ; Convert T\n00014b   2120     call    0x0120                   CALL    DS18B20_WRITE_BYTE      ; Convert T\n00014c   308f     movlw   0x8f                     MOVLW   D'143'\n00014d   20f9     call    0x00f9                   CALL    DELAY\n00014e   308f     movlw   0x8f                     MOVLW   D'143'\n00014f   20f9     call    0x00f9                   CALL    DELAY\n                                                   \n                                                   \n000150   210b     call    0x010b                   CALL    DS18B20_RESET           ; Reset\n000151   30cc     movlw   0xcc                     MOVLW   H'CC'                   ; Skiprom\n000152   2120     call    0x0120                   CALL    DS18B20_WRITE_BYTE      ; Skiprom\n000153   30be     movlw   0xbe                     MOVLW   H'BE'                   ; Read Scratchpad\n000154   2120     call    0x0120                   CALL    DS18B20_WRITE_BYTE      ; Read Scratchpad\n\n000155   2134     call    0x0134                   CALL    DS18B20_READ_BYTE       ; Move Scrachpad Byte 0 to W\n000156   00ea     movwf   0x6a                     MOVWF   _temperature            ; Store in Celsius TEMPLO GPR\n000157   2134     call    0x0134                   CALL    DS18B20_READ_BYTE       ; Move Scrachpad Byte 1 to W\n000158   00eb     movwf   0x6b                     MOVWF   _temperature+1          ; Store in Celsius TEMPHI GPR\n000159   0008     return                           RETURN\n                                                   END\n                                           list P=16F628A\n                                           #include <P16F628A.inc>      ; processor specific definitions\n                                                   LIST\n\n                                           ;==========================================================================\n                                           ; Build date : Oct 21 2015\n                                           ;  MPASM PIC16F628A processor include\n                                           ; \n                                           ;  (c) Copyright 1999-2015 Microchip Technology, All rights reserved\n                                           ;==========================================================================\n\n                                                   NOLIST\n002007   3f02     addlw   0x02                           __CONFIG _CP_OFF&_WDT_OFF&_PWRTE_ON&_HS_OSC&_LVP_OFF&_BODEN_OFF&_MCLRE_OFF\n                                                         extern _ds18b20_init\n                                                         extern _leds_init\n                                                         extern _uart_init\n                                                         extern _uart_rx_packet\n                                                         extern _timer1_int\n                                                         global _main_asm\n                                                         global _b\n\n                                           UD_MAIN_0        udata  0x68\n                                           _b               res 1\n\n                                           RX_FULL                equ 0\n                                           TIMER1_INTERRUPT       equ 1\n                                                         code\n                                           _main_asm:\n00015a   1283     bcf     0x03, 0x5                      BANKSEL _b\n00015b   1303     bcf     0x03, 0x6        \n00015c   01e8     clrf    0x68                           CLRF   _b\n00015d   213c     call    0x013c                         CALL  _ds18b20_init\n00015e   20d4     call    0x00d4                         CALL  _leds_init\n00015f   242c     call    0x042c                         CALL  _uart_init\n000160   178b     bsf     0x0b, 0x7                      BSF INTCON, GIE\n000161   170b     bsf     0x0b, 0x6                      BSF INTCON, PEIE\n000162   1283     bcf     0x03, 0x5                      BANKSEL _b          ; BANK 0\n000163   1303     bcf     0x03, 0x6        \n                                           MAIN_LOOP:\n000164   1868     btfsc   0x68, 0x0                      BTFSC _b, RX_FULL              \n000165   223a     call    0x023a                         CALL  _uart_rx_packet\n000166   18e8     btfsc   0x68, 0x1                      BTFSC _b, TIMER1_INTERRUPT\n000167   239a     call    0x039a                         CALL  _timer1_int\n000168   2964     goto    0x0164                         GOTO MAIN_LOOP\n000169   0008     return                                 RETURN              \n                                                         END\n                                           list P=16F628A\n                                           #include <P16F628A.inc>      ; processor specific definitions\n                                                   LIST\n\n                                           ;==========================================================================\n                                           ; Build date : Oct 21 2015\n                                           ;  MPASM PIC16F628A processor include\n                                           ; \n                                           ;  (c) Copyright 1999-2015 Microchip Technology, All rights reserved\n                                           ;==========================================================================\n\n                                                   NOLIST\n                                                         global _uart\n                                                         global _uart_id\n                                           UD_UART_0        udata  0x59\n                                           _uart_id         res 1\n\n                                           UD_UART_1        udata  0x60\n                                           _uart            res 8\n                                                         END\n",
			"file": "FLCQ.lst",
			"file_size": 140952,
			"file_write_time": 132314076972290244,
			"settings":
			{
				"buffer_size": 138812,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "MAKEFILES",
	"build_system_choices":
	[
		[
			[
				[
					"MAKEFILES",
					""
				],
				[
					"MAKEFILES",
					"make"
				],
				[
					"MAKEFILES",
					"clean"
				],
				[
					"Packages/C++/C Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C Single File.sublime-build",
					"Run"
				],
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				]
			],
			[
				"MAKEFILES",
				"make"
			]
		],
		[
			[
				[
					"MAKEFILES",
					""
				],
				[
					"MAKEFILES",
					"make"
				],
				[
					"MAKEFILES",
					"clean"
				],
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				]
			],
			[
				"MAKEFILES",
				"clean"
			]
		],
		[
			[
				[
					"MAKEFILES",
					""
				],
				[
					"MAKEFILES",
					"make"
				],
				[
					"MAKEFILES",
					"clean"
				],
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				],
				[
					"Packages/ShellScript/ShellScript.sublime-build",
					""
				]
			],
			[
				"MAKEFILES",
				"clean"
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"rust",
				"Set Syntax: Rust"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 234.0,
		"history":
		[
			"print(sys.path)",
			"import sys",
			"print(sys.path)",
			"import sys",
			"sys.version"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/Vasyl/FLCQ"
	],
	"file_history":
	[
		"/C/Users/Vasyl/FLCQ/FLCQ.lst",
		"/C/Users/Vasyl/FLCQ/main.asm",
		"/C/Users/Vasyl/AppData/Roaming/Sublime Text 3/Packages/User/Anaconda.sublime-settings",
		"/C/Users/Vasyl/AppData/Roaming/Sublime Text 3/Packages/User/Python.sublime-settings"
	],
	"find":
	{
		"height": 27.0
	},
	"find_in_files":
	{
		"height": 101.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"_eeprom_write",
			"_ds18b20_get_temperature",
			"_eeprom_write",
			"_write_eeprom",
			"BCF\t_EECON1bits,2",
			"_write_ee",
			"_write_",
			"_isr",
			"_send_temp",
			"_main",
			"leds_init",
			"main",
			"serie_counter",
			"_temperature",
			"_temperatur",
			"_ds18b20_get_temperature",
			"ds18b20",
			"DQ_HIZ",
			"DQ_ll"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 6,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "DS18B20.asm",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7736,
						"regions":
						{
						},
						"selection":
						[
							[
								185,
								128
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "Makefile",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 951,
						"regions":
						{
						},
						"selection":
						[
							[
								849,
								849
							]
						],
						"settings":
						{
							"syntax": "Packages/Makefile/Makefile.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "leds.asm",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1154,
						"regions":
						{
						},
						"selection":
						[
							[
								640,
								640
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "main.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7802,
						"regions":
						{
						},
						"selection":
						[
							[
								2516,
								2516
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2268.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "main_.asm",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1018,
						"regions":
						{
						},
						"selection":
						[
							[
								442,
								391
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 7,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "main.asm",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 30160,
						"regions":
						{
						},
						"selection":
						[
							[
								3398,
								3398
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2607.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "interrupt.asm",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5273,
						"regions":
						{
						},
						"selection":
						[
							[
								4547,
								4491
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 7,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2322.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "timer0.asm",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3841,
						"regions":
						{
						},
						"selection":
						[
							[
								2698,
								2698
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "digitaltemperaturesensor.asm",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 35154,
						"regions":
						{
						},
						"selection":
						[
							[
								24327,
								24327
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1026.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "eeprom.asm",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1751,
						"regions":
						{
						},
						"selection":
						[
							[
								1335,
								1335
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 108.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "uart.asm",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 257,
						"regions":
						{
						},
						"selection":
						[
							[
								257,
								257
							]
						],
						"settings":
						{
							"auto_name": "list P=16F628A",
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "FLCQ.lst",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 138812,
						"regions":
						{
						},
						"selection":
						[
							[
								97860,
								97873
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 6,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 28448.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 39.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 169.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "FLCQ.sublime-project",
	"replace":
	{
		"height": 50.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 288.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
