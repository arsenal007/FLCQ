

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Sun Mar 29 16:07:22 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og9 
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	intentry,global,class=CODE,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	dabs	1,0x7E,2
    24  0000                     
    25                           ; Version 2.10
    26                           ; Generated 31/07/2019 GMT
    27                           ; 
    28                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution.
    42                           ; 
    43                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    44                           ;        software without specific prior written permission.
    45                           ; 
    46                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    47                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    48                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    49                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    50                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    51                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    52                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    53                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    54                           ; 
    55                           ; 
    56                           ; Code-generator required, PIC16F628A Definitions
    57                           ; 
    58                           ; SFR Addresses
    59  0000                     	;# 
    60  0001                     	;# 
    61  0002                     	;# 
    62  0003                     	;# 
    63  0004                     	;# 
    64  0005                     	;# 
    65  0006                     	;# 
    66  000A                     	;# 
    67  000B                     	;# 
    68  000C                     	;# 
    69  000E                     	;# 
    70  000E                     	;# 
    71  000F                     	;# 
    72  0010                     	;# 
    73  0011                     	;# 
    74  0012                     	;# 
    75  0015                     	;# 
    76  0015                     	;# 
    77  0016                     	;# 
    78  0017                     	;# 
    79  0018                     	;# 
    80  0019                     	;# 
    81  001A                     	;# 
    82  001F                     	;# 
    83  0081                     	;# 
    84  0085                     	;# 
    85  0086                     	;# 
    86  008C                     	;# 
    87  008E                     	;# 
    88  0092                     	;# 
    89  0098                     	;# 
    90  0099                     	;# 
    91  009A                     	;# 
    92  009B                     	;# 
    93  009C                     	;# 
    94  009D                     	;# 
    95  009F                     	;# 
    96  0000                     	;# 
    97  0001                     	;# 
    98  0002                     	;# 
    99  0003                     	;# 
   100  0004                     	;# 
   101  0005                     	;# 
   102  0006                     	;# 
   103  000A                     	;# 
   104  000B                     	;# 
   105  000C                     	;# 
   106  000E                     	;# 
   107  000E                     	;# 
   108  000F                     	;# 
   109  0010                     	;# 
   110  0011                     	;# 
   111  0012                     	;# 
   112  0015                     	;# 
   113  0015                     	;# 
   114  0016                     	;# 
   115  0017                     	;# 
   116  0018                     	;# 
   117  0019                     	;# 
   118  001A                     	;# 
   119  001F                     	;# 
   120  0081                     	;# 
   121  0085                     	;# 
   122  0086                     	;# 
   123  008C                     	;# 
   124  008E                     	;# 
   125  0092                     	;# 
   126  0098                     	;# 
   127  0099                     	;# 
   128  009A                     	;# 
   129  009B                     	;# 
   130  009C                     	;# 
   131  009D                     	;# 
   132  009F                     	;# 
   133  0000                     	;# 
   134  0001                     	;# 
   135  0002                     	;# 
   136  0003                     	;# 
   137  0004                     	;# 
   138  0005                     	;# 
   139  0006                     	;# 
   140  000A                     	;# 
   141  000B                     	;# 
   142  000C                     	;# 
   143  000E                     	;# 
   144  000E                     	;# 
   145  000F                     	;# 
   146  0010                     	;# 
   147  0011                     	;# 
   148  0012                     	;# 
   149  0015                     	;# 
   150  0015                     	;# 
   151  0016                     	;# 
   152  0017                     	;# 
   153  0018                     	;# 
   154  0019                     	;# 
   155  001A                     	;# 
   156  001F                     	;# 
   157  0081                     	;# 
   158  0085                     	;# 
   159  0086                     	;# 
   160  008C                     	;# 
   161  008E                     	;# 
   162  0092                     	;# 
   163  0098                     	;# 
   164  0099                     	;# 
   165  009A                     	;# 
   166  009B                     	;# 
   167  009C                     	;# 
   168  009D                     	;# 
   169  009F                     	;# 
   170  000B                     _INTCONbits	set	11
   171  0003                     _STATUSbits	set	3
   172  0006                     _PORTBbits	set	6
   173  001A                     _RCREG	set	26
   174  0019                     _TXREG	set	25
   175  005E                     _PEIE	set	94
   176  005F                     _GIE	set	95
   177  0065                     _RCIF	set	101
   178  00C1                     _OERR	set	193
   179  0064                     _TXIF	set	100
   180  00C6                     _RX9	set	198
   181  00C5                     _SREN	set	197
   182  00C4                     _CREN	set	196
   183  00C7                     _SPEN	set	199
   184  0029                     _RA1	set	41
   185  009D                     _EECON2	set	157
   186  009A                     _EEDATA	set	154
   187  009C                     _EECON1	set	156
   188  009B                     _EEADR	set	155
   189  009C                     _EECON1bits	set	156
   190  0086                     _TRISBbits	set	134
   191  0099                     _SPBRG	set	153
   192  04E1                     _WR	set	1249
   193  04C5                     _TXEN	set	1221
   194  04C6                     _TX9	set	1222
   195  0465                     _RCIE	set	1125
   196  0464                     _TXIE	set	1124
   197  04C4                     _SYNC	set	1220
   198  04C2                     _BRGH	set	1218
   199  0431                     _TRISB1	set	1073
   200  0432                     _TRISB2	set	1074
   201  0429                     _TRISA1	set	1065
   202                           
   203                           	psect	strings
   204  014F                     __pstrings:	
   205  014F                     stringtab:	
   206  014F                     __stringtab:	
   207  014F                     stringcode:	
   208                           ;	String table - string pointers are 1 byte each
   209                           
   210  014F                     stringdir:	
   211  014F  3001               	movlw	high stringdir
   212  0150  008A               	movwf	10
   213  0151  0804               	movf	4,w
   214  0152  0A84               	incf	4,f
   215  0153  0782               	addwf	2,f
   216  0154                     __stringbase:	
   217  0154  3400               	retlw	0
   218  0155                     __end_of__stringtab:	
   219  0155                     STR_1:	
   220  0155  3446               	retlw	70	;'F'
   221  0156  344C               	retlw	76	;'L'
   222  0157  3443               	retlw	67	;'C'
   223  0158  3451               	retlw	81	;'Q'
   224  0159  3420               	retlw	32	;' '
   225  015A  3476               	retlw	118	;'v'
   226  015B  3465               	retlw	101	;'e'
   227  015C  3472               	retlw	114	;'r'
   228  015D  342E               	retlw	46	;'.'
   229  015E  3420               	retlw	32	;' '
   230  015F  3431               	retlw	49	;'1'
   231  0160  342E               	retlw	46	;'.'
   232  0161  3430               	retlw	48	;'0'
   233  0162  340A               	retlw	10
   234  0163  3400               	retlw	0
   235                           
   236                           ; #config settings
   237  0000                     
   238                           	psect	cinit
   239  000B                     start_initialization:	
   240  000B                     __initialization:	
   241                           
   242                           ; Clear objects allocated to COMMON
   243  000B  01F8               	clrf	__pbssCOMMON& (0+127)
   244  000C  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   245  000D  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
   246                           
   247                           ; Clear objects allocated to BANK0
   248  000E  1283               	bcf	3,5	;RP0=0, select bank0
   249  000F  1303               	bcf	3,6	;RP1=0, select bank0
   250  0010  01A0               	clrf	__pbssBANK0& (0+127)
   251  0011  01A1               	clrf	(__pbssBANK0+1)& (0+127)
   252  0012  01A2               	clrf	(__pbssBANK0+2)& (0+127)
   253  0013                     end_of_initialization:	
   254                           ;End of C runtime variable initialization code
   255                           
   256  0013                     __end_of__initialization:	
   257  0013  0183               	clrf	3
   258  0014  2815               	ljmp	_main	;jump to C main() function
   259                           
   260                           	psect	bssCOMMON
   261  0078                     __pbssCOMMON:	
   262  0078                     _eeprom_address:	
   263  0078                     	ds	1
   264  0079                     _uart_recive:	
   265  0079                     	ds	1
   266  007A                     _uart_rx:	
   267  007A                     	ds	1
   268                           
   269                           	psect	bssBANK0
   270  0020                     __pbssBANK0:	
   271  0020                     _tempH:	
   272  0020                     	ds	1
   273  0021                     _tempL:	
   274  0021                     	ds	1
   275  0022                     _eeprom_data:	
   276  0022                     	ds	1
   277                           
   278                           	psect	cstackCOMMON
   279  0070                     __pcstackCOMMON:	
   280  0070                     ?_cmnd_w:	
   281  0070                     ?_sensor_rst:	
   282                           ; 1 bytes @ 0x0
   283                           
   284  0070                     ?_reply:	
   285                           ; 1 bytes @ 0x0
   286                           
   287  0070                     ?_InitUART:	
   288                           ; 1 bytes @ 0x0
   289                           
   290  0070                     ?_SendByteSerially:	
   291                           ; 1 bytes @ 0x0
   292                           
   293  0070                     ?_ReceiveByteSerially:	
   294                           ; 1 bytes @ 0x0
   295                           
   296  0070                     ??_ReceiveByteSerially:	
   297                           ; 1 bytes @ 0x0
   298                           
   299  0070                     ?_isr:	
   300                           ; 1 bytes @ 0x0
   301                           
   302  0070                     ??_isr:	
   303                           ; 1 bytes @ 0x0
   304                           
   305  0070                     ?_SendStringSerially:	
   306                           ; 1 bytes @ 0x0
   307                           
   308  0070                     ?_blue_enable:	
   309                           ; 1 bytes @ 0x0
   310                           
   311  0070                     ?_blue_disable:	
   312                           ; 1 bytes @ 0x0
   313                           
   314  0070                     ?_main:	
   315                           ; 1 bytes @ 0x0
   316                           
   317                           
   318                           ; 1 bytes @ 0x0
   319  0070                     	ds	3
   320  0073                     ?_eeprom_write:	
   321  0073                     ??_cmnd_w:	
   322                           ; 1 bytes @ 0x3
   323                           
   324  0073                     ??_sensor_rst:	
   325                           ; 1 bytes @ 0x3
   326                           
   327  0073                     ??_reply:	
   328                           ; 1 bytes @ 0x3
   329                           
   330  0073                     ??_InitUART:	
   331                           ; 1 bytes @ 0x3
   332                           
   333  0073                     ??_SendByteSerially:	
   334                           ; 1 bytes @ 0x3
   335                           
   336  0073                     ??_blue_enable:	
   337                           ; 1 bytes @ 0x3
   338                           
   339  0073                     ??_blue_disable:	
   340                           ; 1 bytes @ 0x3
   341                           
   342  0073                     SendByteSerially@Byte:	
   343                           ; 1 bytes @ 0x3
   344                           
   345  0073                     eeprom_write@value:	
   346                           ; 1 bytes @ 0x3
   347                           
   348                           
   349                           ; 1 bytes @ 0x3
   350  0073                     	ds	1
   351  0074                     ??_eeprom_write:	
   352  0074                     ??_SendStringSerially:	
   353                           ; 1 bytes @ 0x4
   354                           
   355  0074                     cmnd_w@cmnd:	
   356                           ; 1 bytes @ 0x4
   357                           
   358                           
   359                           ; 1 bytes @ 0x4
   360  0074                     	ds	1
   361  0075                     cmnd_w@i:	
   362  0075                     reply@ret:	
   363                           ; 1 bytes @ 0x5
   364                           
   365  0075                     SendStringSerially@st:	
   366                           ; 1 bytes @ 0x5
   367                           
   368  0075                     eeprom_write@addr:	
   369                           ; 1 bytes @ 0x5
   370                           
   371                           
   372                           ; 1 bytes @ 0x5
   373  0075                     	ds	1
   374  0076                     reply@i:	
   375                           
   376                           ; 1 bytes @ 0x6
   377  0076                     	ds	1
   378  0077                     main@lauflicht:	
   379                           
   380                           ; 1 bytes @ 0x7
   381  0077                     	ds	1
   382                           
   383                           	psect	cstackBANK0
   384  0023                     __pcstackBANK0:	
   385  0023                     ??_main:	
   386                           
   387                           ; 1 bytes @ 0x0
   388  0023                     	ds	3
   389                           
   390                           	psect	maintext
   391  0015                     __pmaintext:	
   392 ;;
   393 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   394 ;;
   395 ;; *************** function _main *****************
   396 ;; Defined at:
   397 ;;		line 167 in file "main.c"
   398 ;; Parameters:    Size  Location     Type
   399 ;;		None
   400 ;; Auto vars:     Size  Location     Type
   401 ;;  lauflicht       1    7[COMMON] unsigned char 
   402 ;; Return value:  Size  Location     Type
   403 ;;                  1    wreg      void 
   404 ;; Registers used:
   405 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   406 ;; Tracked objects:
   407 ;;		On entry : B00/0
   408 ;;		On exit  : 0/0
   409 ;;		Unchanged: 0/0
   410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   411 ;;      Params:         0       0       0       0
   412 ;;      Locals:         1       0       0       0
   413 ;;      Temps:          0       3       0       0
   414 ;;      Totals:         1       3       0       0
   415 ;;Total ram usage:        4 bytes
   416 ;; Hardware stack levels required when called:    4
   417 ;; This function calls:
   418 ;;		_InitUART
   419 ;;		_SendStringSerially
   420 ;;		_blue_disable
   421 ;;		_blue_enable
   422 ;;		_cmnd_w
   423 ;;		_eeprom_write
   424 ;;		_reply
   425 ;;		_sensor_rst
   426 ;; This function is called by:
   427 ;;		Startup code after reset
   428 ;; This function uses a non-reentrant model
   429 ;;
   430                           
   431                           
   432                           ;psect for function _main
   433  0015                     _main:	
   434                           
   435                           ;main.c: 169: uint8_t lauflicht = 1;
   436                           
   437                           ;incstack = 0
   438                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   439  0015  01F7               	clrf	main@lauflicht
   440  0016  0AF7               	incf	main@lauflicht,f
   441                           
   442                           ;main.c: 170: TRISBbits.TRISB3 = 0;
   443  0017  1683               	bsf	3,5	;RP0=1, select bank1
   444  0018  1186               	bcf	6,3	;volatile
   445                           
   446                           ;main.c: 171: TRISBbits.TRISB4 = 0;
   447  0019  1206               	bcf	6,4	;volatile
   448                           
   449                           ;main.c: 172: TRISBbits.TRISB5 = 0;
   450  001A  1286               	bcf	6,5	;volatile
   451                           
   452                           ;main.c: 173: PORTBbits.RB3 = 0;
   453  001B  1283               	bcf	3,5	;RP0=0, select bank0
   454  001C  1186               	bcf	6,3	;volatile
   455                           
   456                           ;main.c: 174: PORTBbits.RB4 = 0;
   457  001D  1206               	bcf	6,4	;volatile
   458                           
   459                           ;main.c: 175: PORTBbits.RB5 = 0;
   460  001E  1286               	bcf	6,5	;volatile
   461                           
   462                           ;main.c: 177: InitUART();
   463  001F  2164               	fcall	_InitUART
   464                           
   465                           ;main.c: 179: sensor_rst();
   466  0020  2114               	fcall	_sensor_rst
   467                           
   468                           ;main.c: 180: cmnd_w( 0xCC );
   469  0021  30CC               	movlw	204
   470  0022  20A3               	fcall	_cmnd_w
   471                           
   472                           ;main.c: 181: cmnd_w( 0xBE );
   473  0023  30BE               	movlw	190
   474  0024  20A3               	fcall	_cmnd_w
   475                           
   476                           ;main.c: 182: tempL = reply();
   477  0025  20DF               	fcall	_reply
   478  0026  1283               	bcf	3,5	;RP0=0, select bank0
   479  0027  00A3               	movwf	??_main
   480  0028  0823               	movf	??_main,w
   481  0029  00A1               	movwf	_tempL
   482                           
   483                           ;main.c: 183: tempH = reply();
   484  002A  20DF               	fcall	_reply
   485  002B  1283               	bcf	3,5	;RP0=0, select bank0
   486  002C  00A3               	movwf	??_main
   487  002D  0823               	movf	??_main,w
   488  002E  00A0               	movwf	_tempH
   489                           
   490                           ;main.c: 184: sensor_rst();
   491  002F  2114               	fcall	_sensor_rst
   492                           
   493                           ;main.c: 185: sensor_rst();
   494  0030  2114               	fcall	_sensor_rst
   495                           
   496                           ;main.c: 186: cmnd_w( 0xCC );
   497  0031  30CC               	movlw	204
   498  0032  20A3               	fcall	_cmnd_w
   499                           
   500                           ;main.c: 187: cmnd_w( 0x44 );
   501  0033  3044               	movlw	68
   502  0034  20A3               	fcall	_cmnd_w
   503                           
   504                           ;main.c: 189: SendStringSerially( "FLCQ ver. 1.0\n" );
   505  0035  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   506  0036  2179               	fcall	_SendStringSerially
   507                           
   508                           ;main.c: 191: GIE = 1;
   509  0037  178B               	bsf	11,7	;volatile
   510                           
   511                           ;main.c: 192: PEIE = 1;
   512  0038  170B               	bsf	11,6	;volatile
   513  0039                     l1110:	
   514                           
   515                           ;main.c: 195: {;main.c: 196: lauflicht <<= 1;
   516  0039  1003               	clrc
   517  003A  0DF7               	rlf	main@lauflicht,f
   518                           
   519                           ;main.c: 198: switch ( uart_recive )
   520  003B  2872               	goto	l1132
   521  003C                     l1112:	
   522                           
   523                           ;main.c: 201: {;main.c: 202: if ( uart_rx == 0xBE ) uart_recive = 2u;
   524  003C  30BE               	movlw	190
   525  003D  067A               	xorwf	_uart_rx,w
   526  003E  1D03               	btfss	3,2
   527  003F  2883               	goto	l1134
   528  0040  3002               	movlw	2
   529  0041  2843               	goto	L1
   530  0042                     l1116:	
   531                           
   532                           ;main.c: 211: {;main.c: 212: uart_recive = 4u;
   533  0042  3004               	movlw	4
   534  0043                     L1:	
   535  0043  1283               	bcf	3,5	;RP0=0, select bank0
   536  0044  1303               	bcf	3,6	;RP1=0, select bank0
   537  0045  285D               	goto	L3
   538  0046                     l1120:	
   539                           ;main.c: 213: break;
   540                           
   541  0046  087A               	movf	_uart_rx,w
   542                           
   543                           ; Switch size 1, requested type "simple"
   544                           ; Number of cases is 2, Range of values is 1 to 2
   545                           ; switch strategies available:
   546                           ; Name         Instructions Cycles
   547                           ; simple_byte            7     4 (average)
   548                           ; direct_byte           11     9 (fixed)
   549                           ; jumptable            263     9 (fixed)
   550                           ;	Chosen strategy is simple_byte
   551  0047  3A01               	xorlw	1	; case 1
   552  0048  1903               	skipnz
   553  0049  2842               	goto	l1116
   554  004A  3A03               	xorlw	3	; case 2
   555  004B  1903               	skipnz
   556  004C  2883               	goto	l1134
   557  004D  2883               	goto	l1134
   558  004E                     l1122:	
   559                           
   560                           ;main.c: 223: {;main.c: 224: eeprom_address = uart_recive;
   561  004E  0879               	movf	_uart_recive,w
   562  004F  1283               	bcf	3,5	;RP0=0, select bank0
   563  0050  1303               	bcf	3,6	;RP1=0, select bank0
   564  0051  00A3               	movwf	??_main
   565  0052  0823               	movf	??_main,w
   566  0053  00F8               	movwf	_eeprom_address
   567                           
   568                           ;main.c: 225: uart_recive = 6u;
   569  0054  3006               	movlw	6
   570  0055  285D               	goto	L3
   571  0056                     l1124:	
   572                           ;main.c: 226: break;
   573                           
   574                           
   575                           ;main.c: 229: {;main.c: 230: eeprom_data = uart_recive;
   576  0056  0879               	movf	_uart_recive,w
   577  0057  1283               	bcf	3,5	;RP0=0, select bank0
   578  0058  1303               	bcf	3,6	;RP1=0, select bank0
   579  0059  00A3               	movwf	??_main
   580  005A  0823               	movf	??_main,w
   581  005B  00A2               	movwf	_eeprom_data
   582                           
   583                           ;main.c: 231: uart_recive = 8u;
   584  005C  3008               	movlw	8
   585  005D                     L3:	
   586  005D  00A3               	movwf	??_main
   587  005E  0823               	movf	??_main,w
   588  005F  00F9               	movwf	_uart_recive
   589                           
   590                           ;main.c: 232: break;
   591  0060  2883               	goto	l1134
   592  0061                     l1126:	
   593                           
   594                           ;main.c: 235: {;main.c: 236: if ( uart_recive == 0xEF ) eeprom_write( eeprom_address, ee
      +                          prom_data );
   595  0061  30EF               	movlw	239
   596  0062  0679               	xorwf	_uart_recive,w
   597  0063  1D03               	btfss	3,2
   598  0064  286D               	goto	l135
   599  0065  1283               	bcf	3,5	;RP0=0, select bank0
   600  0066  1303               	bcf	3,6	;RP1=0, select bank0
   601  0067  0822               	movf	_eeprom_data,w
   602  0068  00A3               	movwf	??_main
   603  0069  0823               	movf	??_main,w
   604  006A  00F3               	movwf	eeprom_write@value
   605  006B  0878               	movf	_eeprom_address,w
   606  006C  2134               	fcall	_eeprom_write
   607  006D                     l135:	
   608  006D  1683               	bsf	3,5	;RP0=1, select bank1
   609  006E  1303               	bcf	3,6	;RP1=0, select bank1
   610  006F  189C               	btfsc	28,1	;volsfr
   611  0070  286D               	goto	l135
   612  0071  2883               	goto	l1134
   613  0072                     l1132:	
   614  0072  0879               	movf	_uart_recive,w
   615                           
   616                           ; Switch size 1, requested type "simple"
   617                           ; Number of cases is 5, Range of values is 1 to 9
   618                           ; switch strategies available:
   619                           ; Name         Instructions Cycles
   620                           ; simple_byte           16     9 (average)
   621                           ; direct_byte           18     9 (fixed)
   622                           ; jumptable            263     9 (fixed)
   623                           ;	Chosen strategy is simple_byte
   624  0073  3A01               	xorlw	1	; case 1
   625  0074  1903               	skipnz
   626  0075  283C               	goto	l1112
   627  0076  3A02               	xorlw	2	; case 3
   628  0077  1903               	skipnz
   629  0078  2846               	goto	l1120
   630  0079  3A06               	xorlw	6	; case 5
   631  007A  1903               	skipnz
   632  007B  284E               	goto	l1122
   633  007C  3A02               	xorlw	2	; case 7
   634  007D  1903               	skipnz
   635  007E  2856               	goto	l1124
   636  007F  3A0E               	xorlw	14	; case 9
   637  0080  1903               	skipnz
   638  0081  2861               	goto	l1126
   639  0082  2883               	goto	l1134
   640  0083                     l1134:	
   641                           
   642                           ;main.c: 243: if ( lauflicht )
   643  0083  0877               	movf	main@lauflicht,w
   644  0084  1903               	btfsc	3,2
   645  0085  288D               	goto	l138
   646                           
   647                           ;main.c: 244: {;main.c: 245: lauflicht = 0;
   648  0086  01F7               	clrf	main@lauflicht
   649                           
   650                           ;main.c: 246: PORTBbits.RB3 = 1;
   651  0087  1283               	bcf	3,5	;RP0=0, select bank0
   652  0088  1303               	bcf	3,6	;RP1=0, select bank0
   653  0089  1586               	bsf	6,3	;volatile
   654                           
   655                           ;main.c: 247: PORTBbits.RB4 = 1;
   656  008A  1606               	bsf	6,4	;volatile
   657                           
   658                           ;main.c: 248: blue_enable();
   659  008B  21A8               	fcall	_blue_enable
   660                           
   661                           ;main.c: 249: }
   662  008C  2894               	goto	l1146
   663  008D                     l138:	
   664                           
   665                           ;main.c: 250: else;main.c: 251: {;main.c: 252: lauflicht = 1;
   666  008D  01F7               	clrf	main@lauflicht
   667  008E  0AF7               	incf	main@lauflicht,f
   668                           
   669                           ;main.c: 253: PORTBbits.RB3 = 0;
   670  008F  1283               	bcf	3,5	;RP0=0, select bank0
   671  0090  1303               	bcf	3,6	;RP1=0, select bank0
   672  0091  1186               	bcf	6,3	;volatile
   673                           
   674                           ;main.c: 254: PORTBbits.RB4 = 0;
   675  0092  1206               	bcf	6,4	;volatile
   676                           
   677                           ;main.c: 255: blue_disable();
   678  0093  21AA               	fcall	_blue_disable
   679  0094                     l1146:	
   680                           
   681                           ;main.c: 256: };main.c: 258: _delay((unsigned long)((1000)*(20000000/4000.0)));
   682  0094  301A               	movlw	26
   683  0095  1283               	bcf	3,5	;RP0=0, select bank0
   684  0096  1303               	bcf	3,6	;RP1=0, select bank0
   685  0097  00A5               	movwf	??_main+2
   686  0098  305E               	movlw	94
   687  0099  00A4               	movwf	??_main+1
   688  009A  306E               	movlw	110
   689  009B  00A3               	movwf	??_main
   690  009C                     u387:	
   691  009C  0BA3               	decfsz	??_main,f
   692  009D  289C               	goto	u387
   693  009E  0BA4               	decfsz	??_main+1,f
   694  009F  289C               	goto	u387
   695  00A0  0BA5               	decfsz	??_main+2,f
   696  00A1  289C               	goto	u387
   697  00A2  2839               	goto	l1110
   698  00A3                     __end_of_main:	
   699                           
   700                           	psect	text1
   701  0114                     __ptext1:	
   702 ;; *************** function _sensor_rst *****************
   703 ;; Defined at:
   704 ;;		line 61 in file "main.c"
   705 ;; Parameters:    Size  Location     Type
   706 ;;		None
   707 ;; Auto vars:     Size  Location     Type
   708 ;;		None
   709 ;; Return value:  Size  Location     Type
   710 ;;                  1    wreg      unsigned char 
   711 ;; Registers used:
   712 ;;		wreg
   713 ;; Tracked objects:
   714 ;;		On entry : 0/100
   715 ;;		On exit  : 0/0
   716 ;;		Unchanged: 0/0
   717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   718 ;;      Params:         0       0       0       0
   719 ;;      Locals:         0       0       0       0
   720 ;;      Temps:          2       0       0       0
   721 ;;      Totals:         2       0       0       0
   722 ;;Total ram usage:        2 bytes
   723 ;; Hardware stack levels used:    1
   724 ;; Hardware stack levels required when called:    2
   725 ;; This function calls:
   726 ;;		Nothing
   727 ;; This function is called by:
   728 ;;		_main
   729 ;; This function uses a non-reentrant model
   730 ;;
   731                           
   732                           
   733                           ;psect for function _sensor_rst
   734  0114                     _sensor_rst:	
   735                           
   736                           ;main.c: 64: TRISA1 = 0;
   737                           
   738                           ;incstack = 0
   739                           ; Regs used in _sensor_rst: [wreg]
   740  0114  1683               	bsf	3,5	;RP0=1, select bank1
   741  0115  1303               	bcf	3,6	;RP1=0, select bank1
   742  0116  1085               	bcf	5,1	;volatile
   743                           
   744                           ;main.c: 65: RA1 = 0;
   745  0117  1283               	bcf	3,5	;RP0=0, select bank0
   746  0118  1085               	bcf	5,1	;volatile
   747                           
   748                           ;main.c: 66: _delay((unsigned long)((600)*(20000000/4000000.0)));
   749  0119  3004               	movlw	4
   750  011A  00F4               	movwf	??_sensor_rst+1
   751  011B  30E4               	movlw	228
   752  011C  00F3               	movwf	??_sensor_rst
   753  011D                     u397:	
   754  011D  0BF3               	decfsz	??_sensor_rst,f
   755  011E  291D               	goto	u397
   756  011F  0BF4               	decfsz	??_sensor_rst+1,f
   757  0120  291D               	goto	u397
   758  0121  0000               	nop
   759                           
   760                           ;main.c: 67: TRISA1 = 1;
   761  0122  1683               	bsf	3,5	;RP0=1, select bank1
   762  0123  1303               	bcf	3,6	;RP1=0, select bank1
   763  0124  1485               	bsf	5,1	;volatile
   764                           
   765                           ;main.c: 68: _delay((unsigned long)((100)*(20000000/4000000.0)));
   766  0125  30A6               	movlw	166
   767  0126  00F3               	movwf	??_sensor_rst
   768  0127                     u407:	
   769  0127  0BF3               	decfsz	??_sensor_rst,f
   770  0128  2927               	goto	u407
   771  0129  0000               	nop
   772                           
   773                           ;main.c: 69: _delay((unsigned long)((600)*(20000000/4000000.0)));
   774  012A  3004               	movlw	4
   775  012B  00F4               	movwf	??_sensor_rst+1
   776  012C  30E4               	movlw	228
   777  012D  00F3               	movwf	??_sensor_rst
   778  012E                     u417:	
   779  012E  0BF3               	decfsz	??_sensor_rst,f
   780  012F  292E               	goto	u417
   781  0130  0BF4               	decfsz	??_sensor_rst+1,f
   782  0131  292E               	goto	u417
   783  0132  0000               	nop
   784                           
   785                           ;main.c: 70: return RA1;;	Return value of _sensor_rst is never used
   786  0133  0008               	return
   787  0134                     __end_of_sensor_rst:	
   788                           
   789                           	psect	text2
   790  00DF                     __ptext2:	
   791 ;; *************** function _reply *****************
   792 ;; Defined at:
   793 ;;		line 73 in file "main.c"
   794 ;; Parameters:    Size  Location     Type
   795 ;;		None
   796 ;; Auto vars:     Size  Location     Type
   797 ;;  i               1    6[COMMON] unsigned char 
   798 ;;  ret             1    5[COMMON] unsigned char 
   799 ;; Return value:  Size  Location     Type
   800 ;;                  1    wreg      unsigned char 
   801 ;; Registers used:
   802 ;;		wreg, status,2, status,0
   803 ;; Tracked objects:
   804 ;;		On entry : 200/100
   805 ;;		On exit  : 300/100
   806 ;;		Unchanged: 0/0
   807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   808 ;;      Params:         0       0       0       0
   809 ;;      Locals:         2       0       0       0
   810 ;;      Temps:          2       0       0       0
   811 ;;      Totals:         4       0       0       0
   812 ;;Total ram usage:        4 bytes
   813 ;; Hardware stack levels used:    1
   814 ;; Hardware stack levels required when called:    2
   815 ;; This function calls:
   816 ;;		Nothing
   817 ;; This function is called by:
   818 ;;		_main
   819 ;; This function uses a non-reentrant model
   820 ;;
   821                           
   822                           
   823                           ;psect for function _reply
   824  00DF                     _reply:	
   825                           
   826                           ;main.c: 75: unsigned char ret = 0, i;
   827                           
   828                           ;incstack = 0
   829                           ; Regs used in _reply: [wreg+status,2+status,0]
   830  00DF  01F5               	clrf	reply@ret
   831                           
   832                           ;main.c: 77: for ( i = 0; i < 8; i++ )
   833  00E0  01F6               	clrf	reply@i
   834  00E1                     l67:	
   835                           
   836                           ;main.c: 78: {;main.c: 79: TRISA1 = 0;
   837  00E1  1683               	bsf	3,5	;RP0=1, select bank1
   838  00E2  1303               	bcf	3,6	;RP1=0, select bank1
   839  00E3  1085               	bcf	5,1	;volatile
   840                           
   841                           ;main.c: 80: RA1 = 0;
   842  00E4  1283               	bcf	3,5	;RP0=0, select bank0
   843  00E5  1085               	bcf	5,1	;volatile
   844                           
   845                           ;main.c: 81: _delay((unsigned long)((2)*(20000000/4000000.0)));
   846  00E6  3003               	movlw	3
   847  00E7  00F3               	movwf	??_reply
   848  00E8                     u427:	
   849  00E8  0BF3               	decfsz	??_reply,f
   850  00E9  28E8               	goto	u427
   851                           
   852                           ;main.c: 82: TRISA1 = 1;
   853  00EA  1683               	bsf	3,5	;RP0=1, select bank1
   854  00EB  1303               	bcf	3,6	;RP1=0, select bank1
   855  00EC  1485               	bsf	5,1	;volatile
   856                           
   857                           ;main.c: 83: _delay((unsigned long)((6)*(20000000/4000000.0)));
   858  00ED  3009               	movlw	9
   859  00EE  00F3               	movwf	??_reply
   860  00EF                     u437:	
   861  00EF  0BF3               	decfsz	??_reply,f
   862  00F0  28EF               	goto	u437
   863  00F1  28F2               	nop2
   864                           
   865                           ;main.c: 84: if ( RA1 )
   866  00F2  1283               	bcf	3,5	;RP0=0, select bank0
   867  00F3  1303               	bcf	3,6	;RP1=0, select bank0
   868  00F4  1C85               	btfss	5,1	;volatile
   869  00F5  2903               	goto	l986
   870                           
   871                           ;main.c: 85: {;main.c: 86: ret += 1 << i;
   872  00F6  3001               	movlw	1
   873  00F7  00F3               	movwf	??_reply
   874  00F8  0A76               	incf	reply@i,w
   875  00F9  28FC               	goto	u244
   876  00FA                     u245:	
   877  00FA  1003               	clrc
   878  00FB  0DF3               	rlf	??_reply,f
   879  00FC                     u244:	
   880  00FC  3EFF               	addlw	-1
   881  00FD  1D03               	skipz
   882  00FE  28FA               	goto	u245
   883  00FF  0873               	movf	??_reply,w
   884  0100  00F4               	movwf	??_reply+1
   885  0101  0874               	movf	??_reply+1,w
   886  0102  07F5               	addwf	reply@ret,f
   887  0103                     l986:	
   888                           
   889                           ;main.c: 87: };main.c: 88: _delay((unsigned long)((80)*(20000000/4000000.0)));
   890  0103  3085               	movlw	133
   891  0104  00F3               	movwf	??_reply
   892  0105                     u447:	
   893  0105  0BF3               	decfsz	??_reply,f
   894  0106  2905               	goto	u447
   895  0107  3001               	movlw	1
   896  0108  00F3               	movwf	??_reply
   897  0109  0873               	movf	??_reply,w
   898  010A  07F6               	addwf	reply@i,f
   899  010B  3008               	movlw	8
   900  010C  0276               	subwf	reply@i,w
   901  010D  1C03               	skipc
   902  010E  28E1               	goto	l67
   903                           
   904                           ;main.c: 89: };main.c: 90: TRISA1 = 1;
   905  010F  1683               	bsf	3,5	;RP0=1, select bank1
   906  0110  1303               	bcf	3,6	;RP1=0, select bank1
   907  0111  1485               	bsf	5,1	;volatile
   908                           
   909                           ;main.c: 91: return ret;
   910  0112  0875               	movf	reply@ret,w
   911  0113  0008               	return
   912  0114                     __end_of_reply:	
   913                           
   914                           	psect	text3
   915  0134                     __ptext3:	
   916 ;; *************** function _eeprom_write *****************
   917 ;; Defined at:
   918 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\pic\__eewrite.c"
   919 ;; Parameters:    Size  Location     Type
   920 ;;  addr            1    wreg     unsigned char 
   921 ;;  value           1    3[COMMON] unsigned char 
   922 ;; Auto vars:     Size  Location     Type
   923 ;;  addr            1    5[COMMON] unsigned char 
   924 ;; Return value:  Size  Location     Type
   925 ;;                  1    wreg      void 
   926 ;; Registers used:
   927 ;;		wreg, status,2, status,0
   928 ;; Tracked objects:
   929 ;;		On entry : 300/0
   930 ;;		On exit  : 300/100
   931 ;;		Unchanged: 0/0
   932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   933 ;;      Params:         1       0       0       0
   934 ;;      Locals:         1       0       0       0
   935 ;;      Temps:          1       0       0       0
   936 ;;      Totals:         3       0       0       0
   937 ;;Total ram usage:        3 bytes
   938 ;; Hardware stack levels used:    1
   939 ;; Hardware stack levels required when called:    2
   940 ;; This function calls:
   941 ;;		Nothing
   942 ;; This function is called by:
   943 ;;		_main
   944 ;; This function uses a non-reentrant model
   945 ;;
   946                           
   947                           
   948                           ;psect for function _eeprom_write
   949  0134                     _eeprom_write:	
   950                           
   951                           ;incstack = 0
   952                           ; Regs used in _eeprom_write: [wreg+status,2+status,0]
   953                           ;eeprom_write@addr stored from wreg
   954  0134  00F5               	movwf	eeprom_write@addr
   955  0135                     l242:	
   956                           ;__eewrite.c: 8: do{ while (EECON1bits.WR) { continue; } EEADR = (addr); EEDATA = (value
      +                          ); EECON1 &= 0x3F; STATUSbits.CARRY = 0; if (INTCONbits.GIE) { STATUSbits.CARRY = 1; } I
      +                          NTCONbits.GIE = 0; EECON1bits.WREN = 1; EECON2 = 0x55; EECON2 = 0xAA; EECON1bits.WR = 1;
      +                           EE
   957                           
   958  0135  1683               	bsf	3,5	;RP0=1, select bank1
   959  0136  189C               	btfsc	28,1	;volsfr
   960  0137  2935               	goto	l242
   961  0138  0875               	movf	eeprom_write@addr,w
   962  0139  009B               	movwf	27	;volatile
   963  013A  0873               	movf	eeprom_write@value,w
   964  013B  009A               	movwf	26	;volatile
   965  013C  303F               	movlw	63
   966  013D  00F4               	movwf	??_eeprom_write
   967  013E  0874               	movf	??_eeprom_write,w
   968  013F  059C               	andwf	28,f	;volsfr
   969  0140  1003               	bcf	3,0	;volatile
   970  0141  1B8B               	btfsc	11,7	;volatile
   971  0142  1403               	bsf	3,0	;volatile
   972  0143  138B               	bcf	11,7	;volatile
   973  0144  151C               	bsf	28,2	;volsfr
   974  0145  3055               	movlw	85
   975  0146  009D               	movwf	29	;volsfr
   976  0147  30AA               	movlw	170
   977  0148  009D               	movwf	29	;volsfr
   978  0149  149C               	bsf	28,1	;volsfr
   979  014A  111C               	bcf	28,2	;volsfr
   980  014B  1C03               	btfss	3,0	;volatile
   981  014C  0008               	return
   982  014D  178B               	bsf	11,7	;volatile
   983  014E  0008               	return
   984  014F                     __end_of_eeprom_write:	
   985                           
   986                           	psect	text4
   987  00A3                     __ptext4:	
   988 ;; *************** function _cmnd_w *****************
   989 ;; Defined at:
   990 ;;		line 35 in file "main.c"
   991 ;; Parameters:    Size  Location     Type
   992 ;;  cmnd            1    wreg     unsigned char 
   993 ;; Auto vars:     Size  Location     Type
   994 ;;  cmnd            1    4[COMMON] unsigned char 
   995 ;;  i               1    5[COMMON] unsigned char 
   996 ;; Return value:  Size  Location     Type
   997 ;;                  1    wreg      void 
   998 ;; Registers used:
   999 ;;		wreg, status,2, status,0
  1000 ;; Tracked objects:
  1001 ;;		On entry : 0/100
  1002 ;;		On exit  : 300/100
  1003 ;;		Unchanged: 0/0
  1004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1005 ;;      Params:         0       0       0       0
  1006 ;;      Locals:         2       0       0       0
  1007 ;;      Temps:          1       0       0       0
  1008 ;;      Totals:         3       0       0       0
  1009 ;;Total ram usage:        3 bytes
  1010 ;; Hardware stack levels used:    1
  1011 ;; Hardware stack levels required when called:    2
  1012 ;; This function calls:
  1013 ;;		Nothing
  1014 ;; This function is called by:
  1015 ;;		_main
  1016 ;; This function uses a non-reentrant model
  1017 ;;
  1018                           
  1019                           
  1020                           ;psect for function _cmnd_w
  1021  00A3                     _cmnd_w:	
  1022                           
  1023                           ;incstack = 0
  1024                           ; Regs used in _cmnd_w: [wreg+status,2+status,0]
  1025                           ;cmnd_w@cmnd stored from wreg
  1026  00A3  00F4               	movwf	cmnd_w@cmnd
  1027                           
  1028                           ;main.c: 37: unsigned char i;;main.c: 39: for ( i = 0; i < 8; i++ )
  1029  00A4  01F5               	clrf	cmnd_w@i
  1030  00A5                     l946:	
  1031                           
  1032                           ;main.c: 40: {;main.c: 41: if ( cmnd & ( 1 << i ) )
  1033  00A5  3001               	movlw	1
  1034  00A6  00F3               	movwf	??_cmnd_w
  1035  00A7  0A75               	incf	cmnd_w@i,w
  1036  00A8  28AB               	goto	u204
  1037  00A9                     u205:	
  1038  00A9  1003               	clrc
  1039  00AA  0DF3               	rlf	??_cmnd_w,f
  1040  00AB                     u204:	
  1041  00AB  3EFF               	addlw	-1
  1042  00AC  1D03               	skipz
  1043  00AD  28A9               	goto	u205
  1044  00AE  0873               	movf	??_cmnd_w,w
  1045  00AF  0574               	andwf	cmnd_w@cmnd,w
  1046  00B0  1903               	btfsc	3,2
  1047  00B1  28C3               	goto	l59
  1048                           
  1049                           ;main.c: 42: {;main.c: 43: TRISA1 = 0;
  1050  00B2  1683               	bsf	3,5	;RP0=1, select bank1
  1051  00B3  1303               	bcf	3,6	;RP1=0, select bank1
  1052  00B4  1085               	bcf	5,1	;volatile
  1053                           
  1054                           ;main.c: 44: RA1 = 0;
  1055  00B5  1283               	bcf	3,5	;RP0=0, select bank0
  1056  00B6  1085               	bcf	5,1	;volatile
  1057                           
  1058                           ;main.c: 45: _delay((unsigned long)((2)*(20000000/4000000.0)));
  1059  00B7  3003               	movlw	3
  1060  00B8  00F3               	movwf	??_cmnd_w
  1061  00B9                     u457:	
  1062  00B9  0BF3               	decfsz	??_cmnd_w,f
  1063  00BA  28B9               	goto	u457
  1064                           
  1065                           ;main.c: 46: TRISA1 = 1;
  1066  00BB  1683               	bsf	3,5	;RP0=1, select bank1
  1067  00BC  1303               	bcf	3,6	;RP1=0, select bank1
  1068  00BD  1485               	bsf	5,1	;volatile
  1069                           
  1070                           ;main.c: 47: _delay((unsigned long)((80)*(20000000/4000000.0)));
  1071  00BE  3085               	movlw	133
  1072  00BF  00F3               	movwf	??_cmnd_w
  1073  00C0                     u467:	
  1074  00C0  0BF3               	decfsz	??_cmnd_w,f
  1075  00C1  28C0               	goto	u467
  1076                           
  1077                           ;main.c: 48: }
  1078  00C2  28D3               	goto	l958
  1079  00C3                     l59:	
  1080                           
  1081                           ;main.c: 49: else;main.c: 50: {;main.c: 51: TRISA1 = 0;
  1082  00C3  1683               	bsf	3,5	;RP0=1, select bank1
  1083  00C4  1303               	bcf	3,6	;RP1=0, select bank1
  1084  00C5  1085               	bcf	5,1	;volatile
  1085                           
  1086                           ;main.c: 52: RA1 = 0;
  1087  00C6  1283               	bcf	3,5	;RP0=0, select bank0
  1088  00C7  1085               	bcf	5,1	;volatile
  1089                           
  1090                           ;main.c: 53: _delay((unsigned long)((80)*(20000000/4000000.0)));
  1091  00C8  3085               	movlw	133
  1092  00C9  00F3               	movwf	??_cmnd_w
  1093  00CA                     u477:	
  1094  00CA  0BF3               	decfsz	??_cmnd_w,f
  1095  00CB  28CA               	goto	u477
  1096                           
  1097                           ;main.c: 54: TRISA1 = 1;
  1098  00CC  1683               	bsf	3,5	;RP0=1, select bank1
  1099  00CD  1303               	bcf	3,6	;RP1=0, select bank1
  1100  00CE  1485               	bsf	5,1	;volatile
  1101                           
  1102                           ;main.c: 55: _delay((unsigned long)((2)*(20000000/4000000.0)));
  1103  00CF  3003               	movlw	3
  1104  00D0  00F3               	movwf	??_cmnd_w
  1105  00D1                     u487:	
  1106  00D1  0BF3               	decfsz	??_cmnd_w,f
  1107  00D2  28D1               	goto	u487
  1108  00D3                     l958:	
  1109  00D3  3001               	movlw	1
  1110  00D4  00F3               	movwf	??_cmnd_w
  1111  00D5  0873               	movf	??_cmnd_w,w
  1112  00D6  07F5               	addwf	cmnd_w@i,f
  1113  00D7  3008               	movlw	8
  1114  00D8  0275               	subwf	cmnd_w@i,w
  1115  00D9  1C03               	skipc
  1116  00DA  28A5               	goto	l946
  1117                           
  1118                           ;main.c: 56: };main.c: 57: };main.c: 58: TRISA1 = 1;
  1119  00DB  1683               	bsf	3,5	;RP0=1, select bank1
  1120  00DC  1303               	bcf	3,6	;RP1=0, select bank1
  1121  00DD  1485               	bsf	5,1	;volatile
  1122  00DE  0008               	return
  1123  00DF                     __end_of_cmnd_w:	
  1124                           
  1125                           	psect	text5
  1126  01A8                     __ptext5:	
  1127 ;; *************** function _blue_enable *****************
  1128 ;; Defined at:
  1129 ;;		line 152 in file "main.c"
  1130 ;; Parameters:    Size  Location     Type
  1131 ;;		None
  1132 ;; Auto vars:     Size  Location     Type
  1133 ;;		None
  1134 ;; Return value:  Size  Location     Type
  1135 ;;                  1    wreg      void 
  1136 ;; Registers used:
  1137 ;;		None
  1138 ;; Tracked objects:
  1139 ;;		On entry : 300/0
  1140 ;;		On exit  : 300/0
  1141 ;;		Unchanged: 0/0
  1142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1143 ;;      Params:         0       0       0       0
  1144 ;;      Locals:         0       0       0       0
  1145 ;;      Temps:          0       0       0       0
  1146 ;;      Totals:         0       0       0       0
  1147 ;;Total ram usage:        0 bytes
  1148 ;; Hardware stack levels used:    1
  1149 ;; Hardware stack levels required when called:    2
  1150 ;; This function calls:
  1151 ;;		Nothing
  1152 ;; This function is called by:
  1153 ;;		_main
  1154 ;; This function uses a non-reentrant model
  1155 ;;
  1156                           
  1157                           
  1158                           ;psect for function _blue_enable
  1159  01A8                     _blue_enable:	
  1160                           
  1161                           ;main.c: 154: PORTBbits.RB5 = 1;
  1162                           
  1163                           ;incstack = 0
  1164                           ; Regs used in _blue_enable: []
  1165  01A8  1686               	bsf	6,5	;volatile
  1166  01A9  0008               	return
  1167  01AA                     __end_of_blue_enable:	
  1168                           
  1169                           	psect	text6
  1170  01AA                     __ptext6:	
  1171 ;; *************** function _blue_disable *****************
  1172 ;; Defined at:
  1173 ;;		line 157 in file "main.c"
  1174 ;; Parameters:    Size  Location     Type
  1175 ;;		None
  1176 ;; Auto vars:     Size  Location     Type
  1177 ;;		None
  1178 ;; Return value:  Size  Location     Type
  1179 ;;                  1    wreg      void 
  1180 ;; Registers used:
  1181 ;;		None
  1182 ;; Tracked objects:
  1183 ;;		On entry : 300/0
  1184 ;;		On exit  : 300/0
  1185 ;;		Unchanged: 0/0
  1186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1187 ;;      Params:         0       0       0       0
  1188 ;;      Locals:         0       0       0       0
  1189 ;;      Temps:          0       0       0       0
  1190 ;;      Totals:         0       0       0       0
  1191 ;;Total ram usage:        0 bytes
  1192 ;; Hardware stack levels used:    1
  1193 ;; Hardware stack levels required when called:    2
  1194 ;; This function calls:
  1195 ;;		Nothing
  1196 ;; This function is called by:
  1197 ;;		_main
  1198 ;; This function uses a non-reentrant model
  1199 ;;
  1200                           
  1201                           
  1202                           ;psect for function _blue_disable
  1203  01AA                     _blue_disable:	
  1204                           
  1205                           ;main.c: 159: PORTBbits.RB5 = 0;
  1206                           
  1207                           ;incstack = 0
  1208                           ; Regs used in _blue_disable: []
  1209  01AA  1286               	bcf	6,5	;volatile
  1210  01AB  0008               	return
  1211  01AC                     __end_of_blue_disable:	
  1212                           
  1213                           	psect	text7
  1214  0179                     __ptext7:	
  1215 ;; *************** function _SendStringSerially *****************
  1216 ;; Defined at:
  1217 ;;		line 146 in file "main.c"
  1218 ;; Parameters:    Size  Location     Type
  1219 ;;  st              1    wreg     PTR const unsigned char 
  1220 ;;		 -> STR_1(15), 
  1221 ;; Auto vars:     Size  Location     Type
  1222 ;;  st              1    5[COMMON] PTR const unsigned char 
  1223 ;;		 -> STR_1(15), 
  1224 ;; Return value:  Size  Location     Type
  1225 ;;                  1    wreg      void 
  1226 ;; Registers used:
  1227 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1228 ;; Tracked objects:
  1229 ;;		On entry : 300/100
  1230 ;;		On exit  : 200/0
  1231 ;;		Unchanged: 0/0
  1232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1233 ;;      Params:         0       0       0       0
  1234 ;;      Locals:         1       0       0       0
  1235 ;;      Temps:          1       0       0       0
  1236 ;;      Totals:         2       0       0       0
  1237 ;;Total ram usage:        2 bytes
  1238 ;; Hardware stack levels used:    1
  1239 ;; Hardware stack levels required when called:    3
  1240 ;; This function calls:
  1241 ;;		_SendByteSerially
  1242 ;; This function is called by:
  1243 ;;		_main
  1244 ;; This function uses a non-reentrant model
  1245 ;;
  1246                           
  1247                           
  1248                           ;psect for function _SendStringSerially
  1249  0179                     _SendStringSerially:	
  1250                           
  1251                           ;incstack = 0
  1252                           ; Regs used in _SendStringSerially: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1253                           ;SendStringSerially@st stored from wreg
  1254  0179  00F5               	movwf	SendStringSerially@st
  1255  017A                     l1026:	
  1256                           ;main.c: 148: while ( *st )
  1257                           
  1258  017A  0875               	movf	SendStringSerially@st,w
  1259  017B  0084               	movwf	4
  1260  017C  214F               	fcall	stringdir
  1261  017D  3A00               	xorlw	0
  1262  017E  1903               	btfsc	3,2
  1263  017F  0008               	return
  1264                           
  1265                           ;main.c: 149: SendByteSerially( *st++ );
  1266  0180  0875               	movf	SendStringSerially@st,w
  1267  0181  0084               	movwf	4
  1268  0182  214F               	fcall	stringdir
  1269  0183  21A1               	fcall	_SendByteSerially
  1270  0184  3001               	movlw	1
  1271  0185  00F4               	movwf	??_SendStringSerially
  1272  0186  0874               	movf	??_SendStringSerially,w
  1273  0187  07F5               	addwf	SendStringSerially@st,f
  1274  0188  297A               	goto	l1026
  1275  0189                     __end_of_SendStringSerially:	
  1276                           
  1277                           	psect	text8
  1278  01A1                     __ptext8:	
  1279 ;; *************** function _SendByteSerially *****************
  1280 ;; Defined at:
  1281 ;;		line 112 in file "main.c"
  1282 ;; Parameters:    Size  Location     Type
  1283 ;;  Byte            1    wreg     unsigned char 
  1284 ;; Auto vars:     Size  Location     Type
  1285 ;;  Byte            1    3[COMMON] unsigned char 
  1286 ;; Return value:  Size  Location     Type
  1287 ;;                  1    wreg      void 
  1288 ;; Registers used:
  1289 ;;		wreg
  1290 ;; Tracked objects:
  1291 ;;		On entry : 200/100
  1292 ;;		On exit  : 300/0
  1293 ;;		Unchanged: 0/0
  1294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1295 ;;      Params:         0       0       0       0
  1296 ;;      Locals:         1       0       0       0
  1297 ;;      Temps:          0       0       0       0
  1298 ;;      Totals:         1       0       0       0
  1299 ;;Total ram usage:        1 bytes
  1300 ;; Hardware stack levels used:    1
  1301 ;; Hardware stack levels required when called:    2
  1302 ;; This function calls:
  1303 ;;		Nothing
  1304 ;; This function is called by:
  1305 ;;		_SendStringSerially
  1306 ;; This function uses a non-reentrant model
  1307 ;;
  1308                           
  1309                           
  1310                           ;psect for function _SendByteSerially
  1311  01A1                     _SendByteSerially:	
  1312                           
  1313                           ;incstack = 0
  1314                           ; Regs used in _SendByteSerially: [wreg]
  1315                           ;SendByteSerially@Byte stored from wreg
  1316  01A1  00F3               	movwf	SendByteSerially@Byte
  1317  01A2                     l76:	
  1318                           ;main.c: 115: ;
  1319                           
  1320  01A2  1283               	bcf	3,5	;RP0=0, select bank0
  1321  01A3  1E0C               	btfss	12,4	;volatile
  1322  01A4  29A2               	goto	l76
  1323                           
  1324                           ;main.c: 116: TXREG = Byte;
  1325  01A5  0873               	movf	SendByteSerially@Byte,w
  1326  01A6  0099               	movwf	25	;volatile
  1327  01A7  0008               	return
  1328  01A8                     __end_of_SendByteSerially:	
  1329                           
  1330                           	psect	text9
  1331  0164                     __ptext9:	
  1332 ;; *************** function _InitUART *****************
  1333 ;; Defined at:
  1334 ;;		line 94 in file "main.c"
  1335 ;; Parameters:    Size  Location     Type
  1336 ;;		None
  1337 ;; Auto vars:     Size  Location     Type
  1338 ;;		None
  1339 ;; Return value:  Size  Location     Type
  1340 ;;                  1    wreg      void 
  1341 ;; Registers used:
  1342 ;;		wreg
  1343 ;; Tracked objects:
  1344 ;;		On entry : B00/0
  1345 ;;		On exit  : B00/100
  1346 ;;		Unchanged: 800/0
  1347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1348 ;;      Params:         0       0       0       0
  1349 ;;      Locals:         0       0       0       0
  1350 ;;      Temps:          0       0       0       0
  1351 ;;      Totals:         0       0       0       0
  1352 ;;Total ram usage:        0 bytes
  1353 ;; Hardware stack levels used:    1
  1354 ;; Hardware stack levels required when called:    2
  1355 ;; This function calls:
  1356 ;;		Nothing
  1357 ;; This function is called by:
  1358 ;;		_main
  1359 ;; This function uses a non-reentrant model
  1360 ;;
  1361                           
  1362                           
  1363                           ;psect for function _InitUART
  1364  0164                     _InitUART:	
  1365                           
  1366                           ;main.c: 96: TRISB2 = 0;
  1367                           
  1368                           ;incstack = 0
  1369                           ; Regs used in _InitUART: [wreg]
  1370  0164  1683               	bsf	3,5	;RP0=1, select bank1
  1371  0165  1106               	bcf	6,2	;volatile
  1372                           
  1373                           ;main.c: 97: TRISB1 = 1;
  1374  0166  1486               	bsf	6,1	;volatile
  1375                           
  1376                           ;main.c: 98: SPBRG = ( ( 20000000 / 16 ) / 57600 ) - 1;
  1377  0167  3014               	movlw	20
  1378  0168  0099               	movwf	25	;volatile
  1379                           
  1380                           ;main.c: 99: BRGH = 1;
  1381  0169  1518               	bsf	24,2	;volatile
  1382                           
  1383                           ;main.c: 100: SYNC = 0;
  1384  016A  1218               	bcf	24,4	;volatile
  1385                           
  1386                           ;main.c: 101: SPEN = 1;
  1387  016B  1283               	bcf	3,5	;RP0=0, select bank0
  1388  016C  1798               	bsf	24,7	;volatile
  1389                           
  1390                           ;main.c: 102: CREN = 1;
  1391  016D  1618               	bsf	24,4	;volatile
  1392                           
  1393                           ;main.c: 103: SREN = 0;
  1394  016E  1298               	bcf	24,5	;volatile
  1395                           
  1396                           ;main.c: 104: TXIE = 0;
  1397  016F  1683               	bsf	3,5	;RP0=1, select bank1
  1398  0170  120C               	bcf	12,4	;volatile
  1399                           
  1400                           ;main.c: 105: RCIE = 1;
  1401  0171  168C               	bsf	12,5	;volatile
  1402                           
  1403                           ;main.c: 106: TX9 = 0;
  1404  0172  1318               	bcf	24,6	;volatile
  1405                           
  1406                           ;main.c: 107: RX9 = 0;
  1407  0173  1283               	bcf	3,5	;RP0=0, select bank0
  1408  0174  1318               	bcf	24,6	;volatile
  1409                           
  1410                           ;main.c: 108: TXEN = 0;
  1411  0175  1683               	bsf	3,5	;RP0=1, select bank1
  1412  0176  1298               	bcf	24,5	;volatile
  1413                           
  1414                           ;main.c: 109: TXEN = 1;
  1415  0177  1698               	bsf	24,5	;volatile
  1416  0178  0008               	return
  1417  0179                     __end_of_InitUART:	
  1418                           
  1419                           	psect	text10
  1420  0189                     __ptext10:	
  1421 ;; *************** function _isr *****************
  1422 ;; Defined at:
  1423 ;;		line 136 in file "main.c"
  1424 ;; Parameters:    Size  Location     Type
  1425 ;;		None
  1426 ;; Auto vars:     Size  Location     Type
  1427 ;;		None
  1428 ;; Return value:  Size  Location     Type
  1429 ;;                  1    wreg      void 
  1430 ;; Registers used:
  1431 ;;		wreg, pclath, cstack
  1432 ;; Tracked objects:
  1433 ;;		On entry : 0/0
  1434 ;;		On exit  : 300/0
  1435 ;;		Unchanged: 0/0
  1436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1437 ;;      Params:         0       0       0       0
  1438 ;;      Locals:         0       0       0       0
  1439 ;;      Temps:          3       0       0       0
  1440 ;;      Totals:         3       0       0       0
  1441 ;;Total ram usage:        3 bytes
  1442 ;; Hardware stack levels used:    1
  1443 ;; Hardware stack levels required when called:    1
  1444 ;; This function calls:
  1445 ;;		_ReceiveByteSerially
  1446 ;; This function is called by:
  1447 ;;		Interrupt level 1
  1448 ;; This function uses a non-reentrant model
  1449 ;;
  1450                           
  1451                           
  1452                           ;psect for function _isr
  1453  0189                     _isr:	
  1454                           
  1455                           ;main.c: 139: if ( RCIF )
  1456  0189  1283               	bcf	3,5	;RP0=0, select bank0
  1457  018A  1303               	bcf	3,6	;RP1=0, select bank0
  1458  018B  1E8C               	btfss	12,5	;volatile
  1459  018C  2992               	goto	i1l96
  1460                           
  1461                           ;main.c: 140: {;main.c: 141: uart_rx = ReceiveByteSerially();
  1462  018D  2199               	fcall	_ReceiveByteSerially
  1463  018E  00F0               	movwf	??_isr
  1464  018F  0870               	movf	??_isr,w
  1465  0190  00FA               	movwf	_uart_rx
  1466                           
  1467                           ;main.c: 142: uart_recive |= 1u;
  1468  0191  1479               	bsf	_uart_recive,0
  1469  0192                     i1l96:	
  1470  0192  0872               	movf	??_isr+2,w
  1471  0193  008A               	movwf	10
  1472  0194  0E71               	swapf	(??_isr+1)^(0+4294967168),w
  1473  0195  0083               	movwf	3
  1474  0196  0EFE               	swapf	126,f
  1475  0197  0E7E               	swapf	126,w
  1476  0198  0009               	retfie
  1477  0199                     __end_of_isr:	
  1478                           
  1479                           	psect	intentry
  1480  0004                     __pintentry:	
  1481                           ;incstack = 0
  1482                           ; Regs used in _isr: [wreg+pclath+cstack]
  1483                           
  1484  0004                     interrupt_function:	
  1485  007E                     saved_w	set	btemp
  1486  0004  00FE               	movwf	btemp
  1487  0005  0E03               	swapf	3,w
  1488  0006  00F1               	movwf	??_isr+1
  1489  0007  080A               	movf	10,w
  1490  0008  00F2               	movwf	??_isr+2
  1491  0009  2989               	ljmp	_isr
  1492                           
  1493                           	psect	text11
  1494  0199                     __ptext11:	
  1495 ;; *************** function _ReceiveByteSerially *****************
  1496 ;; Defined at:
  1497 ;;		line 119 in file "main.c"
  1498 ;; Parameters:    Size  Location     Type
  1499 ;;		None
  1500 ;; Auto vars:     Size  Location     Type
  1501 ;;		None
  1502 ;; Return value:  Size  Location     Type
  1503 ;;                  1    wreg      unsigned char 
  1504 ;; Registers used:
  1505 ;;		wreg
  1506 ;; Tracked objects:
  1507 ;;		On entry : 300/0
  1508 ;;		On exit  : 300/0
  1509 ;;		Unchanged: 0/0
  1510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1511 ;;      Params:         0       0       0       0
  1512 ;;      Locals:         0       0       0       0
  1513 ;;      Temps:          0       0       0       0
  1514 ;;      Totals:         0       0       0       0
  1515 ;;Total ram usage:        0 bytes
  1516 ;; Hardware stack levels used:    1
  1517 ;; This function calls:
  1518 ;;		Nothing
  1519 ;; This function is called by:
  1520 ;;		_isr
  1521 ;; This function uses a non-reentrant model
  1522 ;;
  1523                           
  1524                           
  1525                           ;psect for function _ReceiveByteSerially
  1526  0199                     _ReceiveByteSerially:	
  1527                           
  1528                           ;main.c: 121: if ( OERR )
  1529                           
  1530                           ;incstack = 0
  1531                           ; Regs used in _ReceiveByteSerially: [wreg]
  1532  0199  1C98               	btfss	24,1	;volatile
  1533  019A  299D               	goto	i1l83
  1534                           
  1535                           ;main.c: 122: {;main.c: 123: CREN = 0;
  1536  019B  1218               	bcf	24,4	;volatile
  1537                           
  1538                           ;main.c: 124: CREN = 1;
  1539  019C  1618               	bsf	24,4	;volatile
  1540  019D                     i1l83:	
  1541                           ;main.c: 128: ;
  1542                           
  1543  019D  1E8C               	btfss	12,5	;volatile
  1544  019E  299D               	goto	i1l83
  1545                           
  1546                           ;main.c: 130: return RCREG;
  1547  019F  081A               	movf	26,w	;volatile
  1548  01A0  0008               	return
  1549  01A1                     __end_of_ReceiveByteSerially:	
  1550  007E                     btemp	set	126	;btemp
  1551  007E                     wtemp0	set	126


Data Sizes:
    Strings     15
    Constant    0
    Data        0
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80      3       6
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    SendStringSerially@st	PTR const unsigned char  size(1) Largest target is 15
		 -> STR_1(CODE[15]), 


Critical Paths under _main in COMMON

    _main->_reply
    _SendStringSerially->_SendByteSerially

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0     445
                                              7 COMMON     1     1      0
                                              0 BANK0      3     3      0
                           _InitUART
                 _SendStringSerially
                       _blue_disable
                        _blue_enable
                             _cmnd_w
                       _eeprom_write
                              _reply
                         _sensor_rst
 ---------------------------------------------------------------------------------
 (1) _sensor_rst                                           2     2      0       0
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _reply                                                4     4      0      92
                                              3 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _eeprom_write                                         3     2      1     120
                                              3 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _cmnd_w                                               3     3      0      90
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _blue_enable                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _blue_disable                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SendStringSerially                                   2     2      0     100
                                              4 COMMON     2     2      0
                   _SendByteSerially
 ---------------------------------------------------------------------------------
 (2) _SendByteSerially                                     1     1      0      22
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitUART                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _isr                                                  3     3      0       0
                                              0 COMMON     3     3      0
                _ReceiveByteSerially
 ---------------------------------------------------------------------------------
 (4) _ReceiveByteSerially                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitUART
   _SendStringSerially
     _SendByteSerially
   _blue_disable
   _blue_enable
   _cmnd_w
   _eeprom_write
   _reply
   _sensor_rst

 _isr (ROOT)
   _ReceiveByteSerially

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50      3       6       3        7.5%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      11       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK2            30      0       0       8        0.0%
BANK2               30      0       0       9        0.0%
DATA                 0      0      11      10        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sun Mar 29 16:07:22 2020

                           pc 0002                ??_blue_disable 0073                   __CFG_CP$OFF 0000  
                          l59 00C3                            l67 00E1                            l76 01A2  
                          _WR 04E1                            fsr 0004                           l135 006D  
                         l242 0135                           l138 008D                           l946 00A5  
                         l958 00D3                           l986 0103                           _GIE 005F  
                         _RA1 0029                           u204 00AB                           u205 00A9  
                         u244 00FC                           u245 00FA                           u407 0127  
                         u417 012E                  __CFG_CPD$OFF 0000                           u427 00E8  
                         u437 00EF                           u447 0105                           u457 00B9  
                         u467 00C0                           u387 009C                           u477 00CA  
                         u397 011D                           u487 00D1                           _RX9 00C6  
                         _TX9 04C6                           _isr 0189                           fsr0 0004  
                __CFG_FOSC$HS 0000                  __CFG_LVP$OFF 0000                          l1110 0039  
                        l1120 0046                          l1112 003C                          l1026 017A  
                        l1122 004E                          l1124 0056                          l1116 0042  
                        l1132 0072                          l1126 0061                          l1134 0083  
                        l1146 0094                          ?_isr 0070                          STR_1 0155  
                        _BRGH 04C2                          _CREN 00C4                          _PEIE 005E  
                        _RCIE 0465                          _RCIF 0065                          i1l83 019D  
                        i1l96 0192                          _OERR 00C1                          _SPEN 00C7  
                        _SREN 00C5                          _TXIE 0464                          _TXEN 04C5  
                        _TXIF 0064                          _SYNC 04C4                ??_eeprom_write 0074  
                        _main 0015                          btemp 007E                          start 000A  
                       ??_isr 0070                         ?_main 0070                         _EEADR 009B  
               __CFG_WDTE$OFF 0000                         _RCREG 001A                         _SPBRG 0099  
                       _TXREG 0019            _SendStringSerially 0179                         _tempH 0020  
                       _tempL 0021                         _reply 00DF                __CFG_BOREN$OFF 0000  
                       pclath 000A           ?_SendStringSerially 0070                         status 0003  
                       wtemp0 007E                __CFG_MCLRE$OFF 0000               __initialization 000B  
                __end_of_main 00A3              __end_of_InitUART 0179          ??_SendStringSerially 0074  
                      ??_main 0023                        _EEDATA 009A                        _EECON1 009C  
                      _EECON2 009D                        ?_reply 0070          __end_of_blue_disable 01AC  
        __size_of_blue_enable 0002                 main@lauflicht 0077                        _TRISA1 0429  
                      _TRISB1 0431                        _TRISB2 0432                __CFG_PWRTE$OFF 0000  
                      _cmnd_w 00A3          __end_of_eeprom_write 014F      __end_of_SendByteSerially 01A8  
                      saved_w 007E                        reply@i 0076       __end_of__initialization 0013  
 __end_of_ReceiveByteSerially 01A1                __pcstackCOMMON 0070          SendByteSerially@Byte 0073  
               __end_of_reply 0114             eeprom_write@value 0073                       ??_reply 0073  
                  __pbssBANK0 0020                     ?_InitUART 0070                    __pmaintext 0015  
                  __pintentry 0004                       ?_cmnd_w 0070         __size_of_blue_disable 0002  
                  __stringtab 014F                    ??_InitUART 0073          SendStringSerially@st 0075  
       __size_of_eeprom_write 001B               __size_of_cmnd_w 003C                  _blue_disable 01AA  
                     __ptext1 0114                       __ptext2 00DF                       __ptext3 0134  
                     __ptext4 00A3                       __ptext5 01A8                       __ptext6 01AA  
                     __ptext7 0179                       __ptext8 01A1                       __ptext9 0164  
                __size_of_isr 0010                       _uart_rx 007A                       cmnd_w@i 0075  
        end_of_initialization 0013                  _eeprom_write 0134                    _sensor_rst 0114  
                  cmnd_w@cmnd 0074   __size_of_SendStringSerially 0010                     _PORTBbits 0006  
           ?_SendByteSerially 0070                     _TRISBbits 0086            ??_SendByteSerially 0073  
               ??_blue_enable 0073                __end_of_cmnd_w 00DF           start_initialization 000B  
                 __end_of_isr 0199           __end_of_blue_enable 01AA             __size_of_InitUART 0015  
                    ??_cmnd_w 0073                   ?_sensor_rst 0070  __size_of_ReceiveByteSerially 0008  
                 __pbssCOMMON 0078                     ___latbits 0000                 __pcstackBANK0 0023  
            eeprom_write@addr 0075                     __pstrings 014F                   _blue_enable 01A8  
              __size_of_reply 0035           __size_of_sensor_rst 0020             interrupt_function 0004  
                 _eeprom_data 0022                   __stringbase 0154                      _InitUART 0164  
              _eeprom_address 0078                    _EECON1bits 009C     __size_of_SendByteSerially 0007  
  __end_of_SendStringSerially 0189            __end_of__stringtab 0155                      __ptext10 0189  
                    __ptext11 0199           _ReceiveByteSerially 0199                 __size_of_main 008E  
                ??_sensor_rst 0073          ?_ReceiveByteSerially 0070                    _INTCONbits 000B  
                    intlevel1 0000            __end_of_sensor_rst 0134                      reply@ret 0075  
                   stringcode 014F         ??_ReceiveByteSerially 0070                 ?_blue_disable 0070  
                 _uart_recive 0079                      stringdir 014F                      stringtab 014F  
                ?_blue_enable 0070                 ?_eeprom_write 0073                    _STATUSbits 0003  
            _SendByteSerially 01A1  
